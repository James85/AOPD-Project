package rmit.ai.clima.jackagt.plans;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;
import rmit.ai.clima.gui.grid.*;
import java.util.*;
import rmit.ai.clima.jackagt.*;

public plan PCoord_ChoosePlayerActions extends Plan
{
   /******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: PCoord_ChoosePlayerActions
*/
	//Events handled by the plan are declared here.
	#posts event EFindPath efindpath_p;

	#posts event EFindClosestGold efindclosestgold_p;

	#posts event EIdentifyTarget eidentifytarget_p;

	#sends event MEReturnPlayerState mereturnplayerstate_s;

	#posts event EPostPlayerAction epostplayeraction_p;

	#posts event EIdentifyExploreTargets eidentifyexploretargets_p;

	#handles event EChoosePlayerActions echooseplayeractions_h;


	// Declarations of any beliefset/data that the plan accesses.
	#modifies data BPlayerAt bel_playerAt_dat;

	#modifies data BPlayerPosition bel_playerTarget_dat;

	#reads data BPlayerState bel_playerState_dat;

	#reads data BPlayer bel_players_dat;

	#reads data BGoldAt bel_goldAt_dat;

	#reads data BPathCache bel_moveHint_dat;

	#reads data SimulationProp bel_simulationProp_dat;

	#reads data BPlayerGold bel_playerGold_dat;

	#reads data BPlayerPosition bel_playerPositions_dat;

	#reads data BObstacleAt bel_obstacleAt_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/

   static boolean relevant(EChoosePlayerActions e)
   {
      return true;
   }
   context()
   {
      true;
   }
   #reasoning method fail()
   {
       System.out.println("OMGZORS ===========DickZilla : ChoosePlayerActions");
   }
   final static String[] lookUpDirs = { "up", "down", "right", "left" };

   
   body()
   {  
      logical int $depotX, $depotY;
      bel_simulationProp_dat.getDepotLoc( $depotX, $depotY );

      Vector relevantPlayers = new Vector();
      Vector relevantTargets = new Vector();
      
      //Loop through all the players on the team
      logical String $name;
      Cursor c_players = bel_players_dat.get( $name );
      while (c_players.next())
      {         
         //Check if the player is relevant to going for gold
         logical String $state;
         bel_playerState_dat.getByName( $name.as_string(), $state );
         if(! ($state.as_string().equals("depot")))
            relevantPlayers.add( $name.as_string() );
      }
      
      //Loop through all the gold
      logical int $goldX, $goldY;
      Cursor c_gold = bel_goldAt_dat.get( $goldX, $goldY );
      while ( c_gold.next() )
      {
         //Check if gold is relevant
         GridPoint goldPos = new GridPoint( $goldX.as_int(), $goldY.as_int() );
         relevantTargets.add( goldPos );
      }
      
      EIdentifyExploreTargets identifyExplore = eidentifyexploretargets_p.post();
      @subtask( identifyExplore );
      for (int e=0; e<identifyExplore.targets.size(); ++e)
      {
         UnexploredBlock block = (UnexploredBlock) identifyExplore.targets.get(e); 
         relevantTargets.add( block.pivot );
      }
      
      //Find the closest player-gold pairs
      EFindClosestGold goldRequest = efindclosestgold_p.post( relevantPlayers, relevantTargets );
      @subtask( goldRequest );
      //relevantPlayers.clear();
      
      //Loop through all players on the team
      //for (int p=0; p<relevantPlayers.size(); ++p)
      c_players = bel_players_dat.get( $name );
      while (c_players.next())
      {
         //String name = (String) relevantPlayers.get(p);
         String name = $name.as_string();
         String baseName = $name.as_string();
         baseName = baseName.substring(0,baseName.indexOf("@"));
         
         //Check if the player has gold assigned
         boolean goldFound = false;
         for (int p=0; p<goldRequest.playerGold.size(); ++p)
         {
            PlayerGold pg = (PlayerGold) goldRequest.playerGold.get(p);
            if (pg.name.equals( name ))
            {
               //Find path to gold
               logical int $playerX, $playerY;
               bel_playerPositions_dat.getByName( name, $playerX, $playerY );
               EFindPath pathRequest = efindpath_p.post( name, $playerX.as_int(), $playerY.as_int(), pg.pos.x, pg.pos.y );
               @subtask(pathRequest);
               
               //Report new state to player
               @send( baseName, mereturnplayerstate_s.send(
                     "gold", pg.pos, pathRequest.path, pathRequest.reachable ));
               
               System.out.println( baseName + " closest gold at " + pg.pos.x + "," + pg.pos.y );
               System.out.println("I'M SENDING PLAYERS TO THE GOLD");
               goldFound = true;
            }
         }
         
         if (!goldFound)
         {
            //Send empty state
            @send( baseName, mereturnplayerstate_s.sendEmpty() );
         }
      }
      
      //TODO: Follow with a similar subtask to find player-explore pairs
      
      System.out.println( "CLEARING");
      
      //Clear the pathfinding results
      logical int $srcX, $srcY,  $dstX,  $dstY;
      logical int $playerAtX, $playerAtY;
      logical Object $path;
      logical boolean $reachable;
      bel_moveHint_dat.get($srcX, $srcY, $dstX, $dstY, $path, $reachable).removeAll();
      bel_playerAt_dat.get($playerAtX, $playerAtY).removeAll();
      
      //TODO: Clear the player-explore pairs
   }
}
