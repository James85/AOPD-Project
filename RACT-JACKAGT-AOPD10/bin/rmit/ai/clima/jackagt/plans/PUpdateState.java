/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
  This code is generated by JAC version 5.4 by
  Agent Oriented Software. http://www.agent-software.com.au

    DO NOT ALTER THIS CODE AND DO NOT REMOVE THIS COMMENT
 *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
package rmit.ai.clima.jackagt.plans;
import aos.jack.jak.plan.Plan;
import aos.jack.jak.plan.PlanFSM;
import aos.jack.jak.plan.ExMap;
import aos.jack.jak.agent.NameSpace;
import aos.jack.jak.agent.Agent;
import aos.jack.jak.event.Event;
import aos.jack.jak.task.Task;
import aos.jack.jak.core.Generator;
import aos.jack.jak.logic.Signature;
import rmit.ai.clima.jackagt.events.EExecuteCLIMAaction;
import rmit.ai.clima.jackagt.events.MERequestPathfinding;
import rmit.ai.clima.jackagt.events.MERequestCellInfo;
import rmit.ai.clima.jackagt.events.MEReportPlayerState;
import rmit.ai.clima.jackagt.events.MEPlayerPerceptsAssimilated;
import rmit.ai.clima.jackagt.data.BCurrentState;
import rmit.ai.clima.jackagt.data.BCurrentPosition;
import rmit.ai.clima.jackagt.data.BNumCarryingGold;
import rmit.ai.clima.jackagt.data.BGoldAt;
import java.lang.Object;
import aos.jack.jak.cursor.Cursor;
import aos.jack.jak.fsm.FSM;
import aos.jack.jak.core.Jak;
import rmit.ai.clima.gui.grid.GridPoint;

public class PUpdateState extends aos.jack.jak.plan.Plan {
    public rmit.ai.clima.jackagt.events.EExecuteCLIMAaction eexecuteclimaaction_p;
    public rmit.ai.clima.jackagt.events.MERequestPathfinding merequestpathfinding_s;
    public rmit.ai.clima.jackagt.events.MERequestCellInfo merequestcellinfo_s;
    public rmit.ai.clima.jackagt.events.MEReportPlayerState mereportplayerstate_s;
    public rmit.ai.clima.jackagt.events.MEPlayerPerceptsAssimilated meplayerperceptsassimilated_h;
    public rmit.ai.clima.jackagt.data.BCurrentState bel_currentState_dat;
    public rmit.ai.clima.jackagt.data.BCurrentPosition bel_currentTarget_dat;
    public rmit.ai.clima.jackagt.data.BNumCarryingGold bel_numCarryingGold_dat;
    public rmit.ai.clima.jackagt.data.BCurrentPosition bel_currentPosition_dat;
    public rmit.ai.clima.jackagt.data.BGoldAt bel_goldAt_dat;
    private static aos.jack.jak.plan.ExMap[] __exMap_body;
    private static java.lang.String[] __tt__body = {
            "rmit/ai/clima/jackagt/plans/PUpdateState.plan",
            "body",
            "55",
            "56",
            "57",
            "59",
            "60",
            "61",
            "62",
            "65",
            "67",
            "68",
            "70",
            "72",
            "73",
            "75",
            "52",
            "79",
            "52",
            "83",
            "52",
            "87",
            "52",
            "93",
            "95",
            "96",
            "52"};
    private final static java.lang.String[] __planVariableNames = {
            "eexecuteclimaaction_p",
            "merequestpathfinding_s",
            "merequestcellinfo_s",
            "mereportplayerstate_s",
            "meplayerperceptsassimilated_h",
            "bel_currentState_dat",
            "bel_currentTarget_dat",
            "bel_numCarryingGold_dat",
            "bel_currentPosition_dat",
            "bel_goldAt_dat"};
    private final static java.lang.String[] __planVariableTypes = {
            "rmit.ai.clima.jackagt.events.EExecuteCLIMAaction",
            "MERequestPathfinding",
            "MERequestCellInfo",
            "MEReportPlayerState",
            "MEPlayerPerceptsAssimilated",
            "rmit.ai.clima.jackagt.data.BCurrentState",
            "rmit.ai.clima.jackagt.data.BCurrentPosition",
            "rmit.ai.clima.jackagt.data.BNumCarryingGold",
            "rmit.ai.clima.jackagt.data.BCurrentPosition",
            "rmit.ai.clima.jackagt.data.BGoldAt"};
    private final static java.lang.String[] __reasoningMethods = {
            "body"};
    private final static java.lang.String[] __fsmVariableNames_body = {
            "$state",
            "$posX",
            "$posY",
            "$targetX",
            "$targetY",
            "$numGold"};
    private final static java.lang.String[] __fsmTypes_body = {
            "logical String",
            "logical int",
            "logical int",
            "logical int",
            "logical int",
            "logical int"};
    private final static java.lang.String[] __fsmLocalNames_body = {
            "__local__33_0",
            "__local__33_1",
            "__local__33_2",
            "__local__33_3",
            "__local__33_4",
            "__local__33_5"};
    /******** End PDT Design Block *** DO NOT EDIT IT *********/

    static boolean relevant(rmit.ai.clima.jackagt.events.MEPlayerPerceptsAssimilated e)
    {
        return true;
    }
    
    public PUpdateState()
    {
    }
    
    private PUpdateState(aos.jack.jak.task.Task __t, rmit.ai.clima.jackagt.plans.PUpdateState __env)
    {
        __agent = __env.__agent;
        __ns = __env.__ns;
        __planTask = __t;
        __logic = __t.logic;
        eexecuteclimaaction_p = __env.eexecuteclimaaction_p;
        merequestpathfinding_s = __env.merequestpathfinding_s;
        merequestcellinfo_s = __env.merequestcellinfo_s;
        mereportplayerstate_s = __env.mereportplayerstate_s;
        meplayerperceptsassimilated_h = __env.meplayerperceptsassimilated_h;
        bel_currentState_dat = __env.bel_currentState_dat;
        bel_currentTarget_dat = __env.bel_currentTarget_dat;
        bel_numCarryingGold_dat = __env.bel_numCarryingGold_dat;
        bel_currentPosition_dat = __env.bel_currentPosition_dat;
        bel_goldAt_dat = __env.bel_goldAt_dat;
    }
    
    public boolean init_sentinel(aos.jack.jak.agent.NameSpace __a)
    {
        eexecuteclimaaction_p = (rmit.ai.clima.jackagt.events.EExecuteCLIMAaction) __a.findEvent("rmit.ai.clima.jackagt.events.EExecuteCLIMAaction");
        if (eexecuteclimaaction_p == null) {
            warning("Failed to find EExecuteCLIMAaction eexecuteclimaaction_p");
            return false;
        }
        merequestpathfinding_s = (rmit.ai.clima.jackagt.events.MERequestPathfinding) __a.findEvent("rmit.ai.clima.jackagt.events.MERequestPathfinding");
        if (merequestpathfinding_s == null) {
            warning("Failed to find MERequestPathfinding merequestpathfinding_s");
            return false;
        }
        merequestcellinfo_s = (rmit.ai.clima.jackagt.events.MERequestCellInfo) __a.findEvent("rmit.ai.clima.jackagt.events.MERequestCellInfo");
        if (merequestcellinfo_s == null) {
            warning("Failed to find MERequestCellInfo merequestcellinfo_s");
            return false;
        }
        mereportplayerstate_s = (rmit.ai.clima.jackagt.events.MEReportPlayerState) __a.findEvent("rmit.ai.clima.jackagt.events.MEReportPlayerState");
        if (mereportplayerstate_s == null) {
            warning("Failed to find MEReportPlayerState mereportplayerstate_s");
            return false;
        }
        meplayerperceptsassimilated_h = (rmit.ai.clima.jackagt.events.MEPlayerPerceptsAssimilated) __a.findEvent("rmit.ai.clima.jackagt.events.MEPlayerPerceptsAssimilated");
        if (meplayerperceptsassimilated_h == null) {
            warning("Failed to find MEPlayerPerceptsAssimilated meplayerperceptsassimilated_h");
            return false;
        }
        bel_currentState_dat = (rmit.ai.clima.jackagt.data.BCurrentState) lookupNamedObject("bel_currentState_dat","rmit.ai.clima.jackagt.data.BCurrentState",aos.jack.jak.agent.Agent.WRITEABLE);
        if (bel_currentState_dat == null) {
            warning("Failed to find BCurrentState bel_currentState_dat");
            return false;
        }
        bel_currentTarget_dat = (rmit.ai.clima.jackagt.data.BCurrentPosition) lookupNamedObject("bel_currentTarget_dat","rmit.ai.clima.jackagt.data.BCurrentPosition",aos.jack.jak.agent.Agent.WRITEABLE);
        if (bel_currentTarget_dat == null) {
            warning("Failed to find BCurrentPosition bel_currentTarget_dat");
            return false;
        }
        bel_numCarryingGold_dat = (rmit.ai.clima.jackagt.data.BNumCarryingGold) lookupNamedObject("bel_numCarryingGold_dat","rmit.ai.clima.jackagt.data.BNumCarryingGold",0);
        if (bel_numCarryingGold_dat == null) {
            warning("Failed to find BNumCarryingGold bel_numCarryingGold_dat");
            return false;
        }
        bel_currentPosition_dat = (rmit.ai.clima.jackagt.data.BCurrentPosition) lookupNamedObject("bel_currentPosition_dat","rmit.ai.clima.jackagt.data.BCurrentPosition",0);
        if (bel_currentPosition_dat == null) {
            warning("Failed to find BCurrentPosition bel_currentPosition_dat");
            return false;
        }
        bel_goldAt_dat = (rmit.ai.clima.jackagt.data.BGoldAt) lookupNamedObject("bel_goldAt_dat","rmit.ai.clima.jackagt.data.BGoldAt",0);
        if (bel_goldAt_dat == null) {
            warning("Failed to find BGoldAt bel_goldAt_dat");
            return false;
        }
        return true;
    }
    
    public aos.jack.jak.plan.Plan freeze()
    {
        return this;
    }
    
    public aos.jack.jak.plan.Plan unfreeze()
    {
        return this;
    }
    
    public java.lang.Object genObject(int __index)
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Object Construction");
        return null;
    }
    
    public aos.jack.jak.cursor.Cursor genCursor(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Cursor Construction");
        return null;
    }
    
    public aos.jack.jak.fsm.FSM genFSM(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal FSM Construction");
        return null;
    }
    
    public boolean testCondition(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal test Construction");
        return false;
    }
    
    public aos.jack.jak.plan.PlanFSM body()
    {
        return new rmit.ai.clima.jackagt.plans.PUpdateState.__bodyFSM();
    }
    
    private PUpdateState(rmit.ai.clima.jackagt.events.MEPlayerPerceptsAssimilated __ev, aos.jack.jak.task.Task __t, rmit.ai.clima.jackagt.plans.PUpdateState __env)
    {
        this(__t,__env);
        this.meplayerperceptsassimilated_h = __ev;
    }
    
    protected aos.jack.jak.logic.Signature eventSignature(int __log)
    {
        return meplayerperceptsassimilated_h.getSignature(__log);
    }
    
    public java.lang.String handledEvent()
    {
        return "rmit.ai.clima.jackagt.events.MEPlayerPerceptsAssimilated";
    }
    
    public boolean __relevant(aos.jack.jak.event.Event __e)
    {
        return __ns.isEnabled() && relevant(((rmit.ai.clima.jackagt.events.MEPlayerPerceptsAssimilated) __e));
    }
    
    public aos.jack.jak.plan.Plan createPlan(aos.jack.jak.event.Event __e, aos.jack.jak.task.Task __t)
    {
        if (!(__e instanceof rmit.ai.clima.jackagt.events.MEPlayerPerceptsAssimilated)) 
            return null;
        rmit.ai.clima.jackagt.events.MEPlayerPerceptsAssimilated __e1 = (rmit.ai.clima.jackagt.events.MEPlayerPerceptsAssimilated) __e;
        return new rmit.ai.clima.jackagt.plans.PUpdateState(__e1,__t,this);
    }
    
    public java.lang.String[] variableNames()
    {
        return __planVariableNames;
    }
    
    public java.lang.String[] variableTypes()
    {
        return __planVariableTypes;
    }
    
    public java.lang.Object getVariable(int n)
    {
        switch (n) {
            case 0: 
            {
                return aos.util.ToObject.box(eexecuteclimaaction_p);
            }
            case 1: 
            {
                return aos.util.ToObject.box(merequestpathfinding_s);
            }
            case 2: 
            {
                return aos.util.ToObject.box(merequestcellinfo_s);
            }
            case 3: 
            {
                return aos.util.ToObject.box(mereportplayerstate_s);
            }
            case 4: 
            {
                return aos.util.ToObject.box(meplayerperceptsassimilated_h);
            }
            case 5: 
            {
                return aos.util.ToObject.box(bel_currentState_dat);
            }
            case 6: 
            {
                return aos.util.ToObject.box(bel_currentTarget_dat);
            }
            case 7: 
            {
                return aos.util.ToObject.box(bel_numCarryingGold_dat);
            }
            case 8: 
            {
                return aos.util.ToObject.box(bel_currentPosition_dat);
            }
            case 9: 
            {
                return aos.util.ToObject.box(bel_goldAt_dat);
            }
            default: 
            {
                throw new java.lang.IndexOutOfBoundsException("Plan " + this + " does not have variable number " + n);
            }
        }
    }
    
    public java.lang.String[] reasoningMethods()
    {
        return mergeReasoningMethods(__reasoningMethods,super.reasoningMethods());
    }
    
    public aos.jack.jak.cursor.Cursor context()
    {
        try {
            return (((true)?aos.jack.jak.cursor.Cursor.trueCursor:aos.jack.jak.cursor.Cursor.falseCursor));
        }
        catch (java.lang.Exception e) {
            e.printStackTrace();
            return aos.jack.jak.cursor.Cursor.falseCursor;
        }
    }
    
    class __bodyFSM extends aos.jack.jak.plan.PlanFSM implements aos.jack.jak.core.Generator {
        aos.jack.jak.logic.StringVariable __local__33_0;
        aos.jack.jak.logic.IntegerVariable __local__33_1;
        aos.jack.jak.logic.IntegerVariable __local__33_2;
        aos.jack.jak.logic.IntegerVariable __local__33_3;
        aos.jack.jak.logic.IntegerVariable __local__33_4;
        aos.jack.jak.logic.IntegerVariable __local__33_5;
        private int __breakLevel = 0;
        public int run(int __status)
            throws java.lang.Throwable
        {
            do {
                try {
                    if (__tothrow != null) 
                        throw __tothrow;
                    if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_PLANS) != 0) 
                        aos.util.logging.LogMsg.log(this,aos.jack.jak.core.Jak.LOG_PLANS,__task + "-PUpdateState.body:" + java.lang.Integer.toString(__state));
                    if (__task.nsteps > 0) {
                        __task.nsteps-- ;
                        if (__task.nsteps == 0) 
                            agent.changeFocus();
                    }
                    if (__state < 10) {
                        __status = super.stdrun(rmit.ai.clima.jackagt.plans.PUpdateState.this,__status);
                        if (__status != CONTINUE || agent.changing_focus) 
                            return __status;
                        continue;
                    }
                    __curstate = __state;
                    switch (__state) {
                        default: 
                        {
                            aos.jack.jak.core.Jak.error("PUpdateState.body: Illegal state");
                            return FAILED_STATE;
                        }
                        //* (55) 		logical String $state;
                        case 10: 
                        {
                            __breakLevel = 0;
                            __local__33_0 = (aos.jack.jak.logic.StringVariable) __logic.new_variable(java.lang.String.class);
                            __state = 11;
                            break;
                        }
                        //* (56) 		logical int $posX, $posY, $targetX, $targetY;
                        case 11: 
                        {
                            __local__33_1 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __local__33_2 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __local__33_3 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __local__33_4 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __state = 12;
                            break;
                        }
                        //* (57) 		logical int $numGold;
                        case 12: 
                        {
                            __local__33_5 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __state = 13;
                            break;
                        }
                        //* (59) 		bel_currentState_dat.get( $state );
                        case 13: 
                        {
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(0);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 14;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (60) 	   bel_currentPosition_dat.get( $posX, $posY );
                        case 14: 
                        {
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(1);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 15;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (61) 	   bel_currentTarget_dat.get( $targetX, $targetY );
                        case 15: 
                        {
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(2);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 16;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (62) 	   bel_numCarryingGold_dat.get( $numGold );
                        case 16: 
                        {
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(3);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 17;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (65) 		if($state.as_string().equals( "pick") )
                        case 17: 
                        {
                            if (__local__33_0.as_string().equals("pick")) 
                                __state = 18;
                             else 
                                __state = 20;
                            break;
                        }
                        //* (67) 		   if( bel_goldAt_dat.check( $posX.as_int(), $posY.as_int() ))
                        case 18: 
                        {
                            __breakLevel = 2;
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(4);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 19;
                             else 
                                __state = 31;
                            break;
                        }
                        //* (68) 		      bel_currentState_dat.add("idle");
                        case 19: 
                        {
                            __state = 31;
                            bel_currentState_dat.add("idle");
                            break;
                        }
                        //* (70) 		else if($state.as_string().equals( "drop" ))
                        case 20: 
                        {
                            if (__local__33_0.as_string().equals("drop")) 
                                __state = 21;
                             else 
                                __state = 23;
                            break;
                        }
                        //* (72) 	         if( $numGold.as_int() == 0 )
                        case 21: 
                        {
                            __breakLevel = 2;
                            if (__local__33_5.as_int() == 0) 
                                __state = 22;
                             else 
                                __state = 31;
                            break;
                        }
                        //* (73) 	            bel_currentState_dat.add("idle");
                        case 22: 
                        {
                            __state = 31;
                            bel_currentState_dat.add("idle");
                            break;
                        }
                        //* (75) 		else if($state.as_string().equals( "gold") )
                        case 23: 
                        {
                            if (__local__33_0.as_string().equals("gold")) 
                                __state = 24;
                             else 
                                __state = 25;
                            break;
                        }
                        //* (52) 	#reasoning method
                        case 24: 
                        {
                            __state = 31;
                            break;
                        }
                        //* (79) 		else if($state.as_string().equals("depot") )
                        case 25: 
                        {
                            if (__local__33_0.as_string().equals("depot")) 
                                __state = 26;
                             else 
                                __state = 27;
                            break;
                        }
                        //* (52) 	#reasoning method
                        case 26: 
                        {
                            __state = 31;
                            break;
                        }
                        //* (83) 		else if($state.as_string().equals("explore") )
                        case 27: 
                        {
                            if (__local__33_0.as_string().equals("explore")) 
                                __state = 28;
                             else 
                                __state = 29;
                            break;
                        }
                        //* (52) 	#reasoning method
                        case 28: 
                        {
                            __state = 31;
                            break;
                        }
                        //* (87) 		else if($state.as_string().equals("idle") )
                        case 29: 
                        {
                            if (__local__33_0.as_string().equals("idle")) 
                                __state = 30;
                             else 
                                __state = 31;
                            break;
                        }
                        //* (52) 	#reasoning method
                        case 30: 
                        {
                            __state = 31;
                            break;
                        }
                        //* (93) 		bel_currentState_dat.get( $state );
                        case 31: 
                        {
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(0);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 32;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (95) 		@send("boss", mereportplayerstate_s.send( getAgent().name(), $state.as_string(), new GridPoint( $targetX.as_int(), $targetY.as_int() )));
                        case 32: 
                        {
                            __state = 33;
                            agent.send("boss",mereportplayerstate_s.send(getAgent().name(),__local__33_0.as_string(),new rmit.ai.clima.gui.grid.GridPoint(__local__33_3.as_int(),__local__33_4.as_int())));
                            break;
                        }
                        //* (96) 		eexecuteclimaaction_p.post("left");
                        case 33: 
                        {
                            __task.push(eexecuteclimaaction_p.post("left"));
                            __state = -__state;
                            __subtask_pass = 34;
                            __subtask_fail = 4;
                            return SUBTASK;
                        }
                        //* (52) 	#reasoning method
                        case 34: 
                        {
                            if (__pending == null) 
                                __state = PASSED_STATE;
                            __tothrow = __pending;
                            break;
                        }
                    }
                }
                catch (java.lang.Throwable e) {
                    handleException(e,__exMap_body);
                }
            }
             while (!agent.changing_focus);
            return CONTINUE;
        }
        
        public java.lang.String methodName()
        {
            return "body";
        }
        
        __bodyFSM()
        {
        }
        
        public java.lang.String stateInfo()
        {
            int n = __curstate;
            java.lang.String file = __tt__body[0];
            java.lang.String method = __tt__body[1];
            if (n < 0) 
                n = -n;
            n -= (10 - 2);
            java.lang.String line = (n < 2)?"??":__tt__body[n];
            return file + ":" + line + " " + method + " [" + __curstate + "]";
        }
        
        public java.lang.Object genObject(int __index)
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Object Construction");
            return null;
        }
        
        public aos.jack.jak.cursor.Cursor genCursor(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
                case 0: 
                {
                    return (bel_currentState_dat.get(__local__33_0));
                }
                case 1: 
                {
                    return (bel_currentPosition_dat.get(__local__33_1,__local__33_2));
                }
                case 2: 
                {
                    return (bel_currentTarget_dat.get(__local__33_3,__local__33_4));
                }
                case 3: 
                {
                    return (bel_numCarryingGold_dat.get(__local__33_5));
                }
                case 4: 
                {
                    return (bel_goldAt_dat.check(__local__33_1.as_int(),__local__33_2.as_int()));
                }
            }
            aos.jack.jak.core.Jak.error("illegal Cursor Construction");
            return null;
        }
        
        public aos.jack.jak.fsm.FSM genFSM(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal FSM Construction");
            return null;
        }
        
        public boolean testCondition(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal test Construction");
            return false;
        }
        
        public aos.jack.jak.plan.Plan getPlan()
        {
            return rmit.ai.clima.jackagt.plans.PUpdateState.this;
        }
        
        protected aos.jack.jak.fsm.FSM fail()
        {
            return getPlan().fail();
        }
        
        protected aos.jack.jak.fsm.FSM pass()
        {
            return getPlan().pass();
        }
        
        public void enter()
        {
            __trace = agent.trace("rmit.ai.clima.jackagt.plans.PUpdateState.body");
        }
        
        public java.lang.Object getVariable(int n)
        {
            switch (n) {
                case 0: 
                {
                    return aos.util.ToObject.box(__local__33_0);
                }
                case 1: 
                {
                    return aos.util.ToObject.box(__local__33_1);
                }
                case 2: 
                {
                    return aos.util.ToObject.box(__local__33_2);
                }
                case 3: 
                {
                    return aos.util.ToObject.box(__local__33_3);
                }
                case 4: 
                {
                    return aos.util.ToObject.box(__local__33_4);
                }
                case 5: 
                {
                    return aos.util.ToObject.box(__local__33_5);
                }
                default: 
                {
                    throw new java.lang.IndexOutOfBoundsException("Reasoning Method " + methodName() + " does not have variable number " + n);
                }
            }
        }
        
        public java.lang.String[] variableNames()
        {
            return __fsmVariableNames_body;
        }
        
        public java.lang.String[] variableTypes()
        {
            return __fsmTypes_body;
        }
        
        public java.lang.String[] variableLocalNames()
        {
            return __fsmLocalNames_body;
        }
        
    }
}
