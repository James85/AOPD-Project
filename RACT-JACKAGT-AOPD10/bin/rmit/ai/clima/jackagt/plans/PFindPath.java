/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
  This code is generated by JAC version 5.4 by
  Agent Oriented Software. http://www.agent-software.com.au

    DO NOT ALTER THIS CODE AND DO NOT REMOVE THIS COMMENT
 *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
package rmit.ai.clima.jackagt.plans;
import aos.jack.jak.plan.Plan;
import aos.jack.jak.plan.PlanFSM;
import aos.jack.jak.plan.ExMap;
import aos.jack.jak.agent.NameSpace;
import aos.jack.jak.agent.Agent;
import aos.jack.jak.event.Event;
import aos.jack.jak.task.Task;
import aos.jack.jak.core.Generator;
import aos.jack.jak.logic.Signature;
import java.lang.Object;
import rmit.ai.clima.jackagt.events.EFindPath;
import rmit.ai.clima.jackagt.data.BMoveHint;
import rmit.ai.clima.jackagt.data.BObstacleAt;
import rmit.ai.clima.jackagt.data.SimulationProp;
import java.util.Vector;
import rmit.ai.clima.gui.grid.GridPoint;
import java.util.Collections;
import aos.jack.jak.cursor.Cursor;
import aos.jack.jak.fsm.FSM;
import aos.jack.jak.core.Jak;

public class PFindPath extends aos.jack.jak.plan.Plan {
    public rmit.ai.clima.jackagt.events.EFindPath efindpath_h;
    public rmit.ai.clima.jackagt.data.BMoveHint bel_moveHint_dat;
    public rmit.ai.clima.jackagt.data.BObstacleAt bel_obstacleAt_dat;
    public rmit.ai.clima.jackagt.data.SimulationProp bel_simulationProp_dat;
    private static aos.jack.jak.plan.ExMap[] __exMap_body;
    private static java.lang.String[] __tt__body = {
            "rmit/ai/clima/jackagt/plans/PFindPath.plan",
            "body",
            "38",
            "39",
            "40",
            "42",
            "43",
            "44",
            "46",
            "47",
            "48",
            "49",
            "51",
            "52",
            "53",
            "54",
            "57",
            "58",
            "59",
            "59",
            "66",
            "68",
            "68",
            "69",
            "69",
            "71",
            "74",
            "75",
            "78",
            "79",
            "69",
            "68",
            "84",
            "85",
            "86",
            "88",
            "89",
            "93",
            "94",
            "98",
            "99",
            "102",
            "103",
            "105",
            "110",
            "111",
            "111",
            "114",
            "116",
            "117",
            "119",
            "122",
            "122",
            "125",
            "126",
            "127",
            "130",
            "134",
            "137",
            "138",
            "139",
            "140",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "111",
            "156",
            "160",
            "162",
            "163",
            "164",
            "165",
            "167",
            "170",
            "171",
            "172",
            "172",
            "173",
            "177",
            "178",
            "36"};
    private final static java.lang.String[] __planVariableNames = {
            "efindpath_h",
            "bel_moveHint_dat",
            "bel_obstacleAt_dat",
            "bel_simulationProp_dat"};
    private final static java.lang.String[] __planVariableTypes = {
            "rmit.ai.clima.jackagt.events.EFindPath",
            "rmit.ai.clima.jackagt.data.BMoveHint",
            "rmit.ai.clima.jackagt.data.BObstacleAt",
            "rmit.ai.clima.jackagt.data.SimulationProp"};
    private final static java.lang.String[] __reasoningMethods = {
            "body"};
    private final static java.lang.String[] __fsmVariableNames_body = {
            "adjacentDir",
            "$width",
            "$height",
            "$depotX",
            "$depotY",
            "depotPoint",
            "width",
            "height",
            "src",
            "dst",
            "grid",
            "x",
            "y",
            "node",
            "root",
            "open",
            "dstReached",
            "cur",
            "a",
            "adjPos",
            "adj",
            "g",
            "h",
            "f",
            "dstNode",
            "srcNode",
            "prevNode",
            "curNode",
            "prevPoint",
            "moveDir"};
    private final static java.lang.String[] __fsmTypes_body = {
            "Vector",
            "logical int",
            "logical int",
            "logical int",
            "logical int",
            "GridPoint",
            "int",
            "int",
            "GridPoint",
            "GridPoint",
            "PathGrid",
            "int",
            "int",
            "PathNode",
            "PathNode",
            "Vector",
            "boolean",
            "PathNode",
            "int",
            "GridPoint",
            "PathNode",
            "int",
            "int",
            "int",
            "PathNode",
            "PathNode",
            "PathNode",
            "PathNode",
            "GridPoint",
            "String"};
    private final static java.lang.String[] __fsmLocalNames_body = {
            "__local__19_0",
            "__local__19_1",
            "__local__19_2",
            "__local__19_3",
            "__local__19_4",
            "__local__19_5",
            "__local__19_6",
            "__local__19_7",
            "__local__19_8",
            "__local__19_9",
            "__local__19_10",
            "__local__19_11",
            "__local__19_12",
            "__local__19_13",
            "__local__19_14",
            "__local__19_15",
            "__local__19_16",
            "__local__19_17",
            "__local__19_18",
            "__local__19_19",
            "__local__19_20",
            "__local__19_21",
            "__local__19_22",
            "__local__19_23",
            "__local__19_24",
            "__local__19_25",
            "__local__19_26",
            "__local__19_27",
            "__local__19_28",
            "__local__19_29"};
    public PFindPath()
    {
    }
    
    private PFindPath(aos.jack.jak.task.Task __t, rmit.ai.clima.jackagt.plans.PFindPath __env)
    {
        __agent = __env.__agent;
        __ns = __env.__ns;
        __planTask = __t;
        __logic = __t.logic;
        efindpath_h = __env.efindpath_h;
        bel_moveHint_dat = __env.bel_moveHint_dat;
        bel_obstacleAt_dat = __env.bel_obstacleAt_dat;
        bel_simulationProp_dat = __env.bel_simulationProp_dat;
    }
    
    public boolean init_sentinel(aos.jack.jak.agent.NameSpace __a)
    {
        efindpath_h = (rmit.ai.clima.jackagt.events.EFindPath) __a.findEvent("rmit.ai.clima.jackagt.events.EFindPath");
        if (efindpath_h == null) {
            warning("Failed to find EFindPath efindpath_h");
            return false;
        }
        bel_moveHint_dat = (rmit.ai.clima.jackagt.data.BMoveHint) lookupNamedObject("bel_moveHint_dat","rmit.ai.clima.jackagt.data.BMoveHint",aos.jack.jak.agent.Agent.WRITEABLE);
        if (bel_moveHint_dat == null) {
            warning("Failed to find BMoveHint bel_moveHint_dat");
            return false;
        }
        bel_obstacleAt_dat = (rmit.ai.clima.jackagt.data.BObstacleAt) lookupNamedObject("bel_obstacleAt_dat","rmit.ai.clima.jackagt.data.BObstacleAt",0);
        if (bel_obstacleAt_dat == null) {
            warning("Failed to find BObstacleAt bel_obstacleAt_dat");
            return false;
        }
        bel_simulationProp_dat = (rmit.ai.clima.jackagt.data.SimulationProp) lookupNamedObject("bel_simulationProp_dat","rmit.ai.clima.jackagt.data.SimulationProp",0);
        if (bel_simulationProp_dat == null) {
            warning("Failed to find SimulationProp bel_simulationProp_dat");
            return false;
        }
        return true;
    }
    
    public aos.jack.jak.plan.Plan freeze()
    {
        return this;
    }
    
    public aos.jack.jak.plan.Plan unfreeze()
    {
        return this;
    }
    
    public java.lang.Object genObject(int __index)
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Object Construction");
        return null;
    }
    
    public aos.jack.jak.cursor.Cursor genCursor(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Cursor Construction");
        return null;
    }
    
    public aos.jack.jak.fsm.FSM genFSM(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal FSM Construction");
        return null;
    }
    
    public boolean testCondition(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal test Construction");
        return false;
    }
    
    public aos.jack.jak.plan.PlanFSM body()
    {
        return new rmit.ai.clima.jackagt.plans.PFindPath.__bodyFSM();
    }
    
    private PFindPath(rmit.ai.clima.jackagt.events.EFindPath __ev, aos.jack.jak.task.Task __t, rmit.ai.clima.jackagt.plans.PFindPath __env)
    {
        this(__t,__env);
        this.efindpath_h = __ev;
    }
    
    protected aos.jack.jak.logic.Signature eventSignature(int __log)
    {
        return efindpath_h.getSignature(__log);
    }
    
    public java.lang.String handledEvent()
    {
        return "rmit.ai.clima.jackagt.events.EFindPath";
    }
    
    public boolean __relevant(aos.jack.jak.event.Event __e)
    {
        return __ns.isEnabled();
    }
    
    public aos.jack.jak.plan.Plan createPlan(aos.jack.jak.event.Event __e, aos.jack.jak.task.Task __t)
    {
        if (!(__e instanceof rmit.ai.clima.jackagt.events.EFindPath)) 
            return null;
        rmit.ai.clima.jackagt.events.EFindPath __e1 = (rmit.ai.clima.jackagt.events.EFindPath) __e;
        return new rmit.ai.clima.jackagt.plans.PFindPath(__e1,__t,this);
    }
    
    public java.lang.String[] variableNames()
    {
        return __planVariableNames;
    }
    
    public java.lang.String[] variableTypes()
    {
        return __planVariableTypes;
    }
    
    public java.lang.Object getVariable(int n)
    {
        switch (n) {
            case 0: 
            {
                return aos.util.ToObject.box(efindpath_h);
            }
            case 1: 
            {
                return aos.util.ToObject.box(bel_moveHint_dat);
            }
            case 2: 
            {
                return aos.util.ToObject.box(bel_obstacleAt_dat);
            }
            case 3: 
            {
                return aos.util.ToObject.box(bel_simulationProp_dat);
            }
            default: 
            {
                throw new java.lang.IndexOutOfBoundsException("Plan " + this + " does not have variable number " + n);
            }
        }
    }
    
    public java.lang.String[] reasoningMethods()
    {
        return mergeReasoningMethods(__reasoningMethods,super.reasoningMethods());
    }
    
    public aos.jack.jak.cursor.Cursor context()
    {
        try {
            return (((true)?aos.jack.jak.cursor.Cursor.trueCursor:aos.jack.jak.cursor.Cursor.falseCursor));
        }
        catch (java.lang.Exception e) {
            e.printStackTrace();
            return aos.jack.jak.cursor.Cursor.falseCursor;
        }
    }
    
    class PathGrid extends java.lang.Object {
        public int width;
        public int height;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode[] grid;
        public PathGrid(int width, int height)
        {
            this.width = width;
            this.height = height;
            grid = new rmit.ai.clima.jackagt.plans.PFindPath.PathNode[width * height];
            for (int x = 0; x < width; ++x) {
                for (int y = 0; y < height; ++y) {
                    rmit.ai.clima.jackagt.plans.PFindPath.PathNode node = new rmit.ai.clima.jackagt.plans.PFindPath.PathNode();
                    node.pos.x = x;
                    node.pos.y = y;
                    grid[y * width + x] = node;
                }
            }
        }
        
        public rmit.ai.clima.jackagt.plans.PFindPath.PathNode getNode(int x, int y)
        {
            return grid[y * width + x];
        }
        
        public rmit.ai.clima.jackagt.plans.PFindPath.PathNode getNode(rmit.ai.clima.gui.grid.GridPoint pt)
        {
            return getNode(pt.x,pt.y);
        }
        
    }
    class PathNode extends java.lang.Object implements java.lang.Comparable {
        public boolean obstacle;
        public boolean visited;
        public rmit.ai.clima.gui.grid.GridPoint pos;
        public java.lang.String dir;
        public int g;
        public int h;
        public int f;
        public PathNode()
        {
            visited = false;
            obstacle = false;
            pos = new rmit.ai.clima.gui.grid.GridPoint();
            dir = "";
            g = 0;
            h = 0;
            f = 0;
        }
        
        public boolean equals(java.lang.Object o)
        {
            rmit.ai.clima.jackagt.plans.PFindPath.PathNode other = (rmit.ai.clima.jackagt.plans.PFindPath.PathNode) o;
            return (f == other.f);
        }
        
        public int compareTo(java.lang.Object o)
        {
            rmit.ai.clima.jackagt.plans.PFindPath.PathNode other = (rmit.ai.clima.jackagt.plans.PFindPath.PathNode) o;
            return other.f - f;
        }
        
    }
    class __bodyFSM extends aos.jack.jak.plan.PlanFSM implements aos.jack.jak.core.Generator {
        java.util.Vector __local__19_0;
        aos.jack.jak.logic.IntegerVariable __local__19_1;
        aos.jack.jak.logic.IntegerVariable __local__19_2;
        aos.jack.jak.logic.IntegerVariable __local__19_3;
        aos.jack.jak.logic.IntegerVariable __local__19_4;
        rmit.ai.clima.gui.grid.GridPoint __local__19_5;
        int __local__19_6;
        int __local__19_7;
        rmit.ai.clima.gui.grid.GridPoint __local__19_8;
        rmit.ai.clima.gui.grid.GridPoint __local__19_9;
        rmit.ai.clima.jackagt.plans.PFindPath.PathGrid __local__19_10;
        int __local__19_11;
        int __local__19_12;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__19_13;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__19_14;
        java.util.Vector __local__19_15;
        boolean __local__19_16;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__19_17;
        int __local__19_18;
        rmit.ai.clima.gui.grid.GridPoint __local__19_19;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__19_20;
        int __local__19_21;
        int __local__19_22;
        int __local__19_23;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__19_24;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__19_25;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__19_26;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__19_27;
        rmit.ai.clima.gui.grid.GridPoint __local__19_28;
        java.lang.String __local__19_29;
        private int __breakLevel = 0;
        public int run(int __status)
            throws java.lang.Throwable
        {
            do {
                try {
                    if (__tothrow != null) 
                        throw __tothrow;
                    if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_PLANS) != 0) 
                        aos.util.logging.LogMsg.log(this,aos.jack.jak.core.Jak.LOG_PLANS,__task + "-PFindPath.body:" + java.lang.Integer.toString(__state));
                    if (__task.nsteps > 0) {
                        __task.nsteps-- ;
                        if (__task.nsteps == 0) 
                            agent.changeFocus();
                    }
                    if (__state < 10) {
                        __status = super.stdrun(rmit.ai.clima.jackagt.plans.PFindPath.this,__status);
                        if (__status != CONTINUE || agent.changing_focus) 
                            return __status;
                        continue;
                    }
                    __curstate = __state;
                    switch (__state) {
                        default: 
                        {
                            aos.jack.jak.core.Jak.error("PFindPath.body: Illegal state");
                            return FAILED_STATE;
                        }
                        //* (38) 	   Vector adjacentDir = new Vector();
                        case 10: 
                        {
                            __breakLevel = 0;
                            __local__19_0 = new java.util.Vector();
                            __state = 11;
                            break;
                        }
                        //* (39) 	   logical int $width, $height;
                        case 11: 
                        {
                            __local__19_1 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __local__19_2 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __state = 12;
                            break;
                        }
                        //* (40) 	   bel_simulationProp_dat.getGridSize( $width, $height );
                        case 12: 
                        {
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(0);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 13;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (42) 	   logical int $depotX, $depotY;
                        case 13: 
                        {
                            __local__19_3 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __local__19_4 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __state = 14;
                            break;
                        }
                        //* (43) 	   bel_simulationProp_dat.getDepotLoc( $depotX, $depotY );
                        case 14: 
                        {
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(1);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 15;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (44) 	   GridPoint depotPoint = new GridPoint( $depotX.as_int(), $depotY.as_int() );
                        case 15: 
                        {
                            __local__19_5 = new rmit.ai.clima.gui.grid.GridPoint(__local__19_3.as_int(),__local__19_4.as_int());
                            __state = 16;
                            break;
                        }
                        //* (46) 	   int width = $width.as_int();
                        case 16: 
                        {
                            __local__19_6 = __local__19_1.as_int();
                            __state = 17;
                            break;
                        }
                        //* (47) 	   int height = $height.as_int();
                        case 17: 
                        {
                            __local__19_7 = __local__19_2.as_int();
                            __state = 18;
                            break;
                        }
                        //* (48) 	   GridPoint src = new GridPoint(efindpath_h.srcX, efindpath_h.srcY);
                        case 18: 
                        {
                            __local__19_8 = new rmit.ai.clima.gui.grid.GridPoint(efindpath_h.srcX,efindpath_h.srcY);
                            __state = 19;
                            break;
                        }
                        //* (49) 	   GridPoint dst = new GridPoint(efindpath_h.dstX, efindpath_h.dstY);
                        case 19: 
                        {
                            __local__19_9 = new rmit.ai.clima.gui.grid.GridPoint(efindpath_h.dstX,efindpath_h.dstY);
                            __state = 20;
                            break;
                        }
                        //* (51) 	   adjacentDir.add("left");
                        case 20: 
                        {
                            if (__local__19_0.add("left")) 
                                __state = 21;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (52) 	   adjacentDir.add("right");
                        case 21: 
                        {
                            if (__local__19_0.add("right")) 
                                __state = 22;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (53) 	   adjacentDir.add("up");
                        case 22: 
                        {
                            if (__local__19_0.add("up")) 
                                __state = 23;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (54) 	   adjacentDir.add("down");
                        case 23: 
                        {
                            if (__local__19_0.add("down")) 
                                __state = 24;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (57)       if (src.equals(dst)) {
                        case 24: 
                        {
                            if (__local__19_8.equals(__local__19_9)) 
                                __state = 25;
                             else 
                                __state = 28;
                            break;
                        }
                        //* (58)          bel_moveHint_dat.add( src.x, src.y, dst.x, dst.y, "cur" );
                        case 25: 
                        {
                            __breakLevel = 2;
                            __state = 26;
                            bel_moveHint_dat.add(__local__19_8.x,__local__19_8.y,__local__19_9.x,__local__19_9.y,"cur");
                            break;
                        }
                        //* (59)          return true;
                        case 26: 
                        {
                            if (true) 
                                __state = 27;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (59)          return true;
                        case 27: 
                        {
                            __breakLevel = 0;
                            __state = 91;
                            break;
                        }
                        //* (66) 	   PathGrid grid = new PathGrid( width,  height );
                        case 28: 
                        {
                            __local__19_10 = new rmit.ai.clima.jackagt.plans.PFindPath.PathGrid(__local__19_6,__local__19_7);
                            __state = 29;
                            break;
                        }
                        //* (68) 	   for (int x=0; x<width; ++x) {
                        case 29: 
                        {
                            __local__19_11 = 0;
                            __state = 30;
                            break;
                        }
                        //* (68) 	   for (int x=0; x<width; ++x) {
                        case 30: 
                        {
                            if (__local__19_11 < __local__19_6) 
                                __state = 31;
                             else 
                                __state = 40;
                            break;
                        }
                        //* (69) 	      for (int y=0; y<height; ++y) {
                        case 31: 
                        {
                            __breakLevel = 4;
                            __local__19_12 = 0;
                            __state = 32;
                            break;
                        }
                        //* (69) 	      for (int y=0; y<height; ++y) {
                        case 32: 
                        {
                            if (__local__19_12 < __local__19_7) 
                                __state = 33;
                             else 
                                __state = 39;
                            break;
                        }
                        //* (71) 	         PathNode node = grid.getNode( x, y ); 
                        case 33: 
                        {
                            __breakLevel = 8;
                            __local__19_13 = __local__19_10.getNode(__local__19_11,__local__19_12);
                            __state = 34;
                            break;
                        }
                        //* (74) 	         if(bel_obstacleAt_dat.check( x, y ))
                        case 34: 
                        {
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(2);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 35;
                             else 
                                __state = 36;
                            break;
                        }
                        //* (75) 	            node.obstacle = true;
                        case 35: 
                        {
                            __state = 36;
                            __local__19_13.obstacle = true;
                            break;
                        }
                        //* (78) 	         if(node.pos.equals(depotPoint) && !node.pos.equals(src) && !node.pos.equals(dst))
                        case 36: 
                        {
                            if (__local__19_13.pos.equals(__local__19_5) && !__local__19_13.pos.equals(__local__19_8) && !__local__19_13.pos.equals(__local__19_9)) 
                                __state = 37;
                             else 
                                __state = 38;
                            break;
                        }
                        //* (79) 	            node.obstacle = true;
                        case 37: 
                        {
                            __state = 38;
                            __local__19_13.obstacle = true;
                            break;
                        }
                        //* (69) 	      for (int y=0; y<height; ++y) {
                        case 38: 
                        {
                            __state = 32;
                            ++__local__19_12;
                            break;
                        }
                        //* (68) 	   for (int x=0; x<width; ++x) {
                        case 39: 
                        {
                            __state = 30;
                            ++__local__19_11;
                            break;
                        }
                        //* (84) 	   PathNode root = grid.getNode( src );
                        case 40: 
                        {
                            __local__19_14 = __local__19_10.getNode(__local__19_8);
                            __state = 41;
                            break;
                        }
                        //* (85) 	   root.dir = "";
                        case 41: 
                        {
                            __state = 42;
                            __local__19_14.dir = "";
                            break;
                        }
                        //* (86) 	   root.visited = true;
                        case 42: 
                        {
                            __state = 43;
                            __local__19_14.visited = true;
                            break;
                        }
                        //* (88) 	   Vector open = new Vector();
                        case 43: 
                        {
                            __local__19_15 = new java.util.Vector();
                            __state = 44;
                            break;
                        }
                        //* (89) 	   open.add( root );
                        case 44: 
                        {
                            if (__local__19_15.add(__local__19_14)) 
                                __state = 45;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (93) 	   boolean dstReached = false; 
                        case 45: 
                        {
                            __local__19_16 = false;
                            __state = 46;
                            break;
                        }
                        //* (94) 	   while (!open.isEmpty())
                        case 46: 
                        {
                            if (!__local__19_15.isEmpty()) 
                                __state = 47;
                             else 
                                __state = 78;
                            break;
                        }
                        //* (98) 	      PathNode cur = (PathNode)open.lastElement();
                        case 47: 
                        {
                            __breakLevel = 4;
                            __local__19_17 = (rmit.ai.clima.jackagt.plans.PFindPath.PathNode) __local__19_15.lastElement();
                            __state = 48;
                            break;
                        }
                        //* (99) 	      open.remove( open.size() -1 );
                        case 48: 
                        {
                            __state = 49;
                            __local__19_15.remove(__local__19_15.size() - 1);
                            break;
                        }
                        //* (102) 	      if (cur.pos.x == dst.x && cur.pos.y == dst.y) {
                        case 49: 
                        {
                            if (__local__19_17.pos.x == __local__19_9.x && __local__19_17.pos.y == __local__19_9.y) 
                                __state = 50;
                             else 
                                __state = 52;
                            break;
                        }
                        //* (103) 	         dstReached = true;
                        case 50: 
                        {
                            __breakLevel = 6;
                            __state = 51;
                            __local__19_16 = true;
                            break;
                        }
                        //* (105) 	         break;
                        case 51: 
                        {
                            __breakLevel = 2;
                            __state = 78;
                            break;
                        }
                        //* (110) 	      Collections.shuffle(adjacentDir);
                        case 52: 
                        {
                            __state = 53;
                            //Loop through adjacent nodes

                            java.util.Collections.shuffle(__local__19_0);
                            break;
                        }
                        //* (111)    	   for (int a=0; a<adjacentDir.size(); ++a)
                        case 53: 
                        {
                            __local__19_18 = 0;
                            __state = 54;
                            break;
                        }
                        //* (111)    	   for (int a=0; a<adjacentDir.size(); ++a)
                        case 54: 
                        {
                            if (__local__19_18 < __local__19_0.size()) 
                                __state = 55;
                             else 
                                __state = 77;
                            break;
                        }
                        //* (114)    	      GridPoint adjPos = cur.pos.getFromDir( (String)adjacentDir.get(a) );
                        case 55: 
                        {
                            __breakLevel = 8;
                            __local__19_19 = __local__19_17.pos.getFromDir((java.lang.String) __local__19_0.get(__local__19_18));
                            __state = 56;
                            break;
                        }
                        //* (116)    	      if(adjPos.x < 0 || adjPos.x >= grid.width || adjPos.y < 0 || adjPos.y >= grid.height)
                        case 56: 
                        {
                            if (__local__19_19.x < 0 || __local__19_19.x >= __local__19_10.width || __local__19_19.y < 0 || __local__19_19.y >= __local__19_10.height) 
                                __state = 57;
                             else 
                                __state = 58;
                            break;
                        }
                        //* (117)    	         continue;
                        case 57: 
                        {
                            __breakLevel = 7;
                            __state = 76;
                            break;
                        }
                        //* (119)    	      PathNode adj = grid.getNode( adjPos );
                        case 58: 
                        {
                            __local__19_20 = __local__19_10.getNode(__local__19_19);
                            __state = 59;
                            break;
                        }
                        //* (122)    	      if (adj.obstacle) continue;
                        case 59: 
                        {
                            if (__local__19_20.obstacle) 
                                __state = 60;
                             else 
                                __state = 61;
                            break;
                        }
                        //* (122)    	      if (adj.obstacle) continue;
                        case 60: 
                        {
                            __breakLevel = 7;
                            __state = 76;
                            break;
                        }
                        //* (125)    	      int g = cur.g + 1;
                        case 61: 
                        {
                            __local__19_21 = __local__19_17.g + 1;
                            __state = 62;
                            break;
                        }
                        //* (126)    	      int h = adj.pos.getManhattanDist( dst );
                        case 62: 
                        {
                            __local__19_22 = __local__19_20.pos.getManhattanDist(__local__19_9);
                            __state = 63;
                            break;
                        }
                        //* (127)    	      int f = g + h;
                        case 63: 
                        {
                            __local__19_23 = __local__19_21 + __local__19_22;
                            __state = 64;
                            break;
                        }
                        //* (130)    	      if (adj.visited)
                        case 64: 
                        {
                            if (__local__19_20.visited) 
                                __state = 65;
                             else 
                                __state = 70;
                            break;
                        }
                        //* (134)                if (f < adj.f)
                        case 65: 
                        {
                            __breakLevel = 10;
                            if (__local__19_23 < __local__19_20.f) 
                                __state = 66;
                             else 
                                __state = 76;
                            break;
                        }
                        //* (137)                   adj.dir = (String) (GridPoint.getRelativeDirections( adj.pos, cur.pos )[0]);
                        case 66: 
                        {
                            __breakLevel = 12;
                            __state = 67;
                            //It is so  route from adjacent back to current

                            __local__19_20.dir = (java.lang.String) (rmit.ai.clima.gui.grid.GridPoint.getRelativeDirections(__local__19_20.pos,__local__19_17.pos)[0]);
                            break;
                        }
                        //* (138)                   adj.g = g;
                        case 67: 
                        {
                            __state = 68;
                            __local__19_20.g = __local__19_21;
                            break;
                        }
                        //* (139)                   adj.h = h;
                        case 68: 
                        {
                            __state = 69;
                            __local__19_20.h = __local__19_22;
                            break;
                        }
                        //* (140)                   adj.f = f;
                        case 69: 
                        {
                            __state = 76;
                            __local__19_20.f = __local__19_23;
                            break;
                        }
                        //* (146)                adj.dir = (String) ( GridPoint.getRelativeDirections( adj.pos, cur.pos )[0] );
                        case 70: 
                        {
                            __breakLevel = 10;
                            __state = 71;
                            //Haven't so route from adjacent back to current

                            __local__19_20.dir = (java.lang.String) (rmit.ai.clima.gui.grid.GridPoint.getRelativeDirections(__local__19_20.pos,__local__19_17.pos)[0]);
                            break;
                        }
                        //* (147)                adj.g = g;
                        case 71: 
                        {
                            __state = 72;
                            __local__19_20.g = __local__19_21;
                            break;
                        }
                        //* (148)                adj.h = h;
                        case 72: 
                        {
                            __state = 73;
                            __local__19_20.h = __local__19_22;
                            break;
                        }
                        //* (149)                adj.f = f;
                        case 73: 
                        {
                            __state = 74;
                            __local__19_20.f = __local__19_23;
                            break;
                        }
                        //* (150)                adj.visited = true;
                        case 74: 
                        {
                            __state = 75;
                            __local__19_20.visited = true;
                            break;
                        }
                        //* (151)                open.add( adj );
                        case 75: 
                        {
                            if (__local__19_15.add(__local__19_20)) 
                                __state = 76;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (111)    	   for (int a=0; a<adjacentDir.size(); ++a)
                        case 76: 
                        {
                            __state = 54;
                            ++__local__19_18;
                            break;
                        }
                        //* (156)    	   Collections.sort( open );
                        case 77: 
                        {
                            __state = 46;
                            //adjacent nodes

                            java.util.Collections.sort(__local__19_15);
                            break;
                        }
                        //* (160)       if(dstReached)
                        case 78: 
                        {
                            if (__local__19_16) 
                                __state = 79;
                             else 
                                __state = 91;
                            break;
                        }
                        //* (162)          PathNode dstNode = grid.getNode( dst );
                        case 79: 
                        {
                            __breakLevel = 2;
                            __local__19_24 = __local__19_10.getNode(__local__19_9);
                            __state = 80;
                            break;
                        }
                        //* (163)          PathNode srcNode = grid.getNode( src );
                        case 80: 
                        {
                            __local__19_25 = __local__19_10.getNode(__local__19_8);
                            __state = 81;
                            break;
                        }
                        //* (164)          PathNode prevNode = dstNode;
                        case 81: 
                        {
                            __local__19_26 = __local__19_24;
                            __state = 82;
                            break;
                        }
                        //* (165)          PathNode curNode = dstNode;
                        case 82: 
                        {
                            __local__19_27 = __local__19_24;
                            __state = 83;
                            break;
                        }
                        //* (167)          while (true)
                        case 83: 
                        {
                            if (true) 
                                __state = 84;
                             else 
                                __state = 89;
                            break;
                        }
                        //* (170)             GridPoint prevPoint = curNode.pos.getFromDir(curNode.dir);
                        case 84: 
                        {
                            __breakLevel = 6;
                            __local__19_28 = __local__19_27.pos.getFromDir(__local__19_27.dir);
                            __state = 85;
                            break;
                        }
                        //* (171)             prevNode = grid.getNode( prevPoint );
                        case 85: 
                        {
                            __state = 86;
                            __local__19_26 = __local__19_10.getNode(__local__19_28);
                            break;
                        }
                        //* (172)             if (prevNode == srcNode) break;
                        case 86: 
                        {
                            if (__local__19_26 == __local__19_25) 
                                __state = 87;
                             else 
                                __state = 88;
                            break;
                        }
                        //* (172)             if (prevNode == srcNode) break;
                        case 87: 
                        {
                            __breakLevel = 4;
                            __state = 89;
                            break;
                        }
                        //* (173)             curNode = prevNode;
                        case 88: 
                        {
                            __state = 83;
                            __local__19_27 = __local__19_26;
                            break;
                        }
                        //* (177)          String moveDir = (String) ( prevNode.pos.getRelativeDirections( prevNode.pos, curNode.pos )[0] );
                        case 89: 
                        {
                            __local__19_29 = (java.lang.String) (__local__19_26.pos.getRelativeDirections(__local__19_26.pos,__local__19_27.pos)[0]);
                            __state = 90;
                            break;
                        }
                        //* (178)          bel_moveHint_dat.add( src.x, src.y, dst.x, dst.y, moveDir );
                        case 90: 
                        {
                            __state = 91;
                            bel_moveHint_dat.add(__local__19_8.x,__local__19_8.y,__local__19_9.x,__local__19_9.y,__local__19_29);
                            break;
                        }
                        //* (36) 	body()
                        case 91: 
                        {
                            if (__pending == null) 
                                __state = PASSED_STATE;
                            __tothrow = __pending;
                            break;
                        }
                    }
                }
                catch (java.lang.Throwable e) {
                    handleException(e,__exMap_body);
                }
            }
             while (!agent.changing_focus);
            return CONTINUE;
        }
        
        public java.lang.String methodName()
        {
            return "body";
        }
        
        __bodyFSM()
        {
        }
        
        public java.lang.String stateInfo()
        {
            int n = __curstate;
            java.lang.String file = __tt__body[0];
            java.lang.String method = __tt__body[1];
            if (n < 0) 
                n = -n;
            n -= (10 - 2);
            java.lang.String line = (n < 2)?"??":__tt__body[n];
            return file + ":" + line + " " + method + " [" + __curstate + "]";
        }
        
        public java.lang.Object genObject(int __index)
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Object Construction");
            return null;
        }
        
        public aos.jack.jak.cursor.Cursor genCursor(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
                case 0: 
                {
                    return (bel_simulationProp_dat.getGridSize(__local__19_1,__local__19_2));
                }
                case 1: 
                {
                    return (bel_simulationProp_dat.getDepotLoc(__local__19_3,__local__19_4));
                }
                case 2: 
                {
                    return (bel_obstacleAt_dat.check(__local__19_11,__local__19_12));
                }
            }
            aos.jack.jak.core.Jak.error("illegal Cursor Construction");
            return null;
        }
        
        public aos.jack.jak.fsm.FSM genFSM(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal FSM Construction");
            return null;
        }
        
        public boolean testCondition(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal test Construction");
            return false;
        }
        
        public aos.jack.jak.plan.Plan getPlan()
        {
            return rmit.ai.clima.jackagt.plans.PFindPath.this;
        }
        
        protected aos.jack.jak.fsm.FSM fail()
        {
            return getPlan().fail();
        }
        
        protected aos.jack.jak.fsm.FSM pass()
        {
            return getPlan().pass();
        }
        
        public void enter()
        {
            __trace = agent.trace("rmit.ai.clima.jackagt.plans.PFindPath.body");
        }
        
        public java.lang.Object getVariable(int n)
        {
            switch (n) {
                case 0: 
                {
                    return aos.util.ToObject.box(__local__19_0);
                }
                case 1: 
                {
                    return aos.util.ToObject.box(__local__19_1);
                }
                case 2: 
                {
                    return aos.util.ToObject.box(__local__19_2);
                }
                case 3: 
                {
                    return aos.util.ToObject.box(__local__19_3);
                }
                case 4: 
                {
                    return aos.util.ToObject.box(__local__19_4);
                }
                case 5: 
                {
                    return aos.util.ToObject.box(__local__19_5);
                }
                case 6: 
                {
                    return aos.util.ToObject.box(__local__19_6);
                }
                case 7: 
                {
                    return aos.util.ToObject.box(__local__19_7);
                }
                case 8: 
                {
                    return aos.util.ToObject.box(__local__19_8);
                }
                case 9: 
                {
                    return aos.util.ToObject.box(__local__19_9);
                }
                case 10: 
                {
                    return aos.util.ToObject.box(__local__19_10);
                }
                case 11: 
                {
                    return aos.util.ToObject.box(__local__19_11);
                }
                case 12: 
                {
                    return aos.util.ToObject.box(__local__19_12);
                }
                case 13: 
                {
                    return aos.util.ToObject.box(__local__19_13);
                }
                case 14: 
                {
                    return aos.util.ToObject.box(__local__19_14);
                }
                case 15: 
                {
                    return aos.util.ToObject.box(__local__19_15);
                }
                case 16: 
                {
                    return aos.util.ToObject.box(__local__19_16);
                }
                case 17: 
                {
                    return aos.util.ToObject.box(__local__19_17);
                }
                case 18: 
                {
                    return aos.util.ToObject.box(__local__19_18);
                }
                case 19: 
                {
                    return aos.util.ToObject.box(__local__19_19);
                }
                case 20: 
                {
                    return aos.util.ToObject.box(__local__19_20);
                }
                case 21: 
                {
                    return aos.util.ToObject.box(__local__19_21);
                }
                case 22: 
                {
                    return aos.util.ToObject.box(__local__19_22);
                }
                case 23: 
                {
                    return aos.util.ToObject.box(__local__19_23);
                }
                case 24: 
                {
                    return aos.util.ToObject.box(__local__19_24);
                }
                case 25: 
                {
                    return aos.util.ToObject.box(__local__19_25);
                }
                case 26: 
                {
                    return aos.util.ToObject.box(__local__19_26);
                }
                case 27: 
                {
                    return aos.util.ToObject.box(__local__19_27);
                }
                case 28: 
                {
                    return aos.util.ToObject.box(__local__19_28);
                }
                case 29: 
                {
                    return aos.util.ToObject.box(__local__19_29);
                }
                default: 
                {
                    throw new java.lang.IndexOutOfBoundsException("Reasoning Method " + methodName() + " does not have variable number " + n);
                }
            }
        }
        
        public java.lang.String[] variableNames()
        {
            return __fsmVariableNames_body;
        }
        
        public java.lang.String[] variableTypes()
        {
            return __fsmTypes_body;
        }
        
        public java.lang.String[] variableLocalNames()
        {
            return __fsmLocalNames_body;
        }
        
    }
}
