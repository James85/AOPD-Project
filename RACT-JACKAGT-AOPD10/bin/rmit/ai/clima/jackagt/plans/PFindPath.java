/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
  This code is generated by JAC version 5.4 by
  Agent Oriented Software. http://www.agent-software.com.au

    DO NOT ALTER THIS CODE AND DO NOT REMOVE THIS COMMENT
 *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
package rmit.ai.clima.jackagt.plans;
import aos.jack.jak.plan.Plan;
import aos.jack.jak.plan.PlanFSM;
import aos.jack.jak.plan.ExMap;
import aos.jack.jak.agent.NameSpace;
import aos.jack.jak.agent.Agent;
import aos.jack.jak.event.Event;
import aos.jack.jak.task.Task;
import aos.jack.jak.core.Generator;
import aos.jack.jak.logic.Signature;
import java.lang.Object;
import rmit.ai.clima.jackagt.events.EFindPath;
import rmit.ai.clima.jackagt.data.BMoveHint;
import rmit.ai.clima.jackagt.data.SimulationProp;
import rmit.ai.clima.jackagt.data.BObstacleAt;
import java.util.Vector;
import rmit.ai.clima.gui.grid.GridPoint;
import java.util.Collections;
import aos.jack.jak.cursor.Cursor;
import aos.jack.jak.fsm.FSM;
import aos.jack.jak.core.Jak;

public class PFindPath extends aos.jack.jak.plan.Plan {
    public rmit.ai.clima.jackagt.events.EFindPath efindpath_h;
    public rmit.ai.clima.jackagt.data.BMoveHint bel_moveHint_dat;
    public rmit.ai.clima.jackagt.data.SimulationProp bel_simulationProp_dat;
    public rmit.ai.clima.jackagt.data.BObstacleAt bel_obstacleAt_dat;
    private static aos.jack.jak.plan.ExMap[] __exMap_body;
    private static java.lang.String[] __tt__body = {
            "rmit/ai/clima/jackagt/plans/PFindPath.plan",
            "body",
            "38",
            "39",
            "40",
            "42",
            "43",
            "44",
            "45",
            "47",
            "48",
            "49",
            "50",
            "53",
            "54",
            "55",
            "55",
            "62",
            "63",
            "63",
            "64",
            "64",
            "67",
            "69",
            "70",
            "64",
            "63",
            "76",
            "77",
            "78",
            "80",
            "81",
            "85",
            "86",
            "90",
            "91",
            "94",
            "95",
            "97",
            "102",
            "103",
            "103",
            "106",
            "108",
            "109",
            "111",
            "114",
            "114",
            "117",
            "118",
            "119",
            "122",
            "126",
            "129",
            "130",
            "131",
            "132",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "103",
            "148",
            "152",
            "154",
            "155",
            "156",
            "157",
            "159",
            "162",
            "163",
            "164",
            "164",
            "165",
            "169",
            "170",
            "36"};
    private final static java.lang.String[] __planVariableNames = {
            "efindpath_h",
            "bel_moveHint_dat",
            "bel_simulationProp_dat",
            "bel_obstacleAt_dat"};
    private final static java.lang.String[] __planVariableTypes = {
            "rmit.ai.clima.jackagt.events.EFindPath",
            "rmit.ai.clima.jackagt.data.BMoveHint",
            "rmit.ai.clima.jackagt.data.SimulationProp",
            "rmit.ai.clima.jackagt.data.BObstacleAt"};
    private final static java.lang.String[] __reasoningMethods = {
            "body"};
    private final static java.lang.String[] __fsmVariableNames_body = {
            "adjacentDir",
            "$width",
            "$height",
            "width",
            "height",
            "src",
            "dst",
            "grid",
            "x",
            "y",
            "node",
            "root",
            "open",
            "dstReached",
            "cur",
            "a",
            "adjPos",
            "adj",
            "g",
            "h",
            "f",
            "dstNode",
            "srcNode",
            "prevNode",
            "curNode",
            "prevPoint",
            "moveDir"};
    private final static java.lang.String[] __fsmTypes_body = {
            "Vector",
            "logical int",
            "logical int",
            "int",
            "int",
            "GridPoint",
            "GridPoint",
            "PathGrid",
            "int",
            "int",
            "PathNode",
            "PathNode",
            "Vector",
            "boolean",
            "PathNode",
            "int",
            "GridPoint",
            "PathNode",
            "int",
            "int",
            "int",
            "PathNode",
            "PathNode",
            "PathNode",
            "PathNode",
            "GridPoint",
            "String"};
    private final static java.lang.String[] __fsmLocalNames_body = {
            "__local__19_0",
            "__local__19_1",
            "__local__19_2",
            "__local__19_3",
            "__local__19_4",
            "__local__19_5",
            "__local__19_6",
            "__local__19_7",
            "__local__19_8",
            "__local__19_9",
            "__local__19_10",
            "__local__19_11",
            "__local__19_12",
            "__local__19_13",
            "__local__19_14",
            "__local__19_15",
            "__local__19_16",
            "__local__19_17",
            "__local__19_18",
            "__local__19_19",
            "__local__19_20",
            "__local__19_21",
            "__local__19_22",
            "__local__19_23",
            "__local__19_24",
            "__local__19_25",
            "__local__19_26"};
    public PFindPath()
    {
    }
    
    private PFindPath(aos.jack.jak.task.Task __t, rmit.ai.clima.jackagt.plans.PFindPath __env)
    {
        __agent = __env.__agent;
        __ns = __env.__ns;
        __planTask = __t;
        __logic = __t.logic;
        efindpath_h = __env.efindpath_h;
        bel_moveHint_dat = __env.bel_moveHint_dat;
        bel_simulationProp_dat = __env.bel_simulationProp_dat;
        bel_obstacleAt_dat = __env.bel_obstacleAt_dat;
    }
    
    public boolean init_sentinel(aos.jack.jak.agent.NameSpace __a)
    {
        efindpath_h = (rmit.ai.clima.jackagt.events.EFindPath) __a.findEvent("rmit.ai.clima.jackagt.events.EFindPath");
        if (efindpath_h == null) {
            warning("Failed to find EFindPath efindpath_h");
            return false;
        }
        bel_moveHint_dat = (rmit.ai.clima.jackagt.data.BMoveHint) lookupNamedObject("bel_moveHint_dat","rmit.ai.clima.jackagt.data.BMoveHint",aos.jack.jak.agent.Agent.WRITEABLE);
        if (bel_moveHint_dat == null) {
            warning("Failed to find BMoveHint bel_moveHint_dat");
            return false;
        }
        bel_simulationProp_dat = (rmit.ai.clima.jackagt.data.SimulationProp) lookupNamedObject("bel_simulationProp_dat","rmit.ai.clima.jackagt.data.SimulationProp",0);
        if (bel_simulationProp_dat == null) {
            warning("Failed to find SimulationProp bel_simulationProp_dat");
            return false;
        }
        bel_obstacleAt_dat = (rmit.ai.clima.jackagt.data.BObstacleAt) lookupNamedObject("bel_obstacleAt_dat","rmit.ai.clima.jackagt.data.BObstacleAt",0);
        if (bel_obstacleAt_dat == null) {
            warning("Failed to find BObstacleAt bel_obstacleAt_dat");
            return false;
        }
        return true;
    }
    
    public aos.jack.jak.plan.Plan freeze()
    {
        return this;
    }
    
    public aos.jack.jak.plan.Plan unfreeze()
    {
        return this;
    }
    
    public java.lang.Object genObject(int __index)
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Object Construction");
        return null;
    }
    
    public aos.jack.jak.cursor.Cursor genCursor(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Cursor Construction");
        return null;
    }
    
    public aos.jack.jak.fsm.FSM genFSM(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal FSM Construction");
        return null;
    }
    
    public boolean testCondition(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal test Construction");
        return false;
    }
    
    public aos.jack.jak.plan.PlanFSM body()
    {
        return new rmit.ai.clima.jackagt.plans.PFindPath.__bodyFSM();
    }
    
    private PFindPath(rmit.ai.clima.jackagt.events.EFindPath __ev, aos.jack.jak.task.Task __t, rmit.ai.clima.jackagt.plans.PFindPath __env)
    {
        this(__t,__env);
        this.efindpath_h = __ev;
    }
    
    protected aos.jack.jak.logic.Signature eventSignature(int __log)
    {
        return efindpath_h.getSignature(__log);
    }
    
    public java.lang.String handledEvent()
    {
        return "rmit.ai.clima.jackagt.events.EFindPath";
    }
    
    public boolean __relevant(aos.jack.jak.event.Event __e)
    {
        return __ns.isEnabled();
    }
    
    public aos.jack.jak.plan.Plan createPlan(aos.jack.jak.event.Event __e, aos.jack.jak.task.Task __t)
    {
        if (!(__e instanceof rmit.ai.clima.jackagt.events.EFindPath)) 
            return null;
        rmit.ai.clima.jackagt.events.EFindPath __e1 = (rmit.ai.clima.jackagt.events.EFindPath) __e;
        return new rmit.ai.clima.jackagt.plans.PFindPath(__e1,__t,this);
    }
    
    public java.lang.String[] variableNames()
    {
        return __planVariableNames;
    }
    
    public java.lang.String[] variableTypes()
    {
        return __planVariableTypes;
    }
    
    public java.lang.Object getVariable(int n)
    {
        switch (n) {
            case 0: 
            {
                return aos.util.ToObject.box(efindpath_h);
            }
            case 1: 
            {
                return aos.util.ToObject.box(bel_moveHint_dat);
            }
            case 2: 
            {
                return aos.util.ToObject.box(bel_simulationProp_dat);
            }
            case 3: 
            {
                return aos.util.ToObject.box(bel_obstacleAt_dat);
            }
            default: 
            {
                throw new java.lang.IndexOutOfBoundsException("Plan " + this + " does not have variable number " + n);
            }
        }
    }
    
    public java.lang.String[] reasoningMethods()
    {
        return mergeReasoningMethods(__reasoningMethods,super.reasoningMethods());
    }
    
    public aos.jack.jak.cursor.Cursor context()
    {
        try {
            return (((true)?aos.jack.jak.cursor.Cursor.trueCursor:aos.jack.jak.cursor.Cursor.falseCursor));
        }
        catch (java.lang.Exception e) {
            e.printStackTrace();
            return aos.jack.jak.cursor.Cursor.falseCursor;
        }
    }
    
    class PathGrid extends java.lang.Object {
        public int width;
        public int height;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode[] grid;
        public PathGrid(int width, int height)
        {
            this.width = width;
            this.height = height;
            grid = new rmit.ai.clima.jackagt.plans.PFindPath.PathNode[width * height];
            for (int x = 0; x < width; ++x) {
                for (int y = 0; y < height; ++y) {
                    rmit.ai.clima.jackagt.plans.PFindPath.PathNode node = new rmit.ai.clima.jackagt.plans.PFindPath.PathNode();
                    node.pos.x = x;
                    node.pos.y = y;
                    grid[y * width + x] = node;
                }
            }
        }
        
        public rmit.ai.clima.jackagt.plans.PFindPath.PathNode getNode(int x, int y)
        {
            return grid[y * width + x];
        }
        
        public rmit.ai.clima.jackagt.plans.PFindPath.PathNode getNode(rmit.ai.clima.gui.grid.GridPoint pt)
        {
            return getNode(pt.x,pt.y);
        }
        
    }
    class PathNode extends java.lang.Object implements java.lang.Comparable {
        public boolean obstacle;
        public boolean visited;
        public rmit.ai.clima.gui.grid.GridPoint pos;
        public java.lang.String dir;
        public int g;
        public int h;
        public int f;
        public PathNode()
        {
            visited = false;
            obstacle = false;
            pos = new rmit.ai.clima.gui.grid.GridPoint();
            dir = "";
            g = 0;
            h = 0;
            f = 0;
        }
        
        public boolean equals(java.lang.Object o)
        {
            rmit.ai.clima.jackagt.plans.PFindPath.PathNode other = (rmit.ai.clima.jackagt.plans.PFindPath.PathNode) o;
            return (f == other.f);
        }
        
        public int compareTo(java.lang.Object o)
        {
            rmit.ai.clima.jackagt.plans.PFindPath.PathNode other = (rmit.ai.clima.jackagt.plans.PFindPath.PathNode) o;
            return other.f - f;
        }
        
    }
    class __bodyFSM extends aos.jack.jak.plan.PlanFSM implements aos.jack.jak.core.Generator {
        java.util.Vector __local__19_0;
        aos.jack.jak.logic.IntegerVariable __local__19_1;
        aos.jack.jak.logic.IntegerVariable __local__19_2;
        int __local__19_3;
        int __local__19_4;
        rmit.ai.clima.gui.grid.GridPoint __local__19_5;
        rmit.ai.clima.gui.grid.GridPoint __local__19_6;
        rmit.ai.clima.jackagt.plans.PFindPath.PathGrid __local__19_7;
        int __local__19_8;
        int __local__19_9;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__19_10;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__19_11;
        java.util.Vector __local__19_12;
        boolean __local__19_13;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__19_14;
        int __local__19_15;
        rmit.ai.clima.gui.grid.GridPoint __local__19_16;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__19_17;
        int __local__19_18;
        int __local__19_19;
        int __local__19_20;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__19_21;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__19_22;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__19_23;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__19_24;
        rmit.ai.clima.gui.grid.GridPoint __local__19_25;
        java.lang.String __local__19_26;
        private int __breakLevel = 0;
        public int run(int __status)
            throws java.lang.Throwable
        {
            do {
                try {
                    if (__tothrow != null) 
                        throw __tothrow;
                    if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_PLANS) != 0) 
                        aos.util.logging.LogMsg.log(this,aos.jack.jak.core.Jak.LOG_PLANS,__task + "-PFindPath.body:" + java.lang.Integer.toString(__state));
                    if (__task.nsteps > 0) {
                        __task.nsteps-- ;
                        if (__task.nsteps == 0) 
                            agent.changeFocus();
                    }
                    if (__state < 10) {
                        __status = super.stdrun(rmit.ai.clima.jackagt.plans.PFindPath.this,__status);
                        if (__status != CONTINUE || agent.changing_focus) 
                            return __status;
                        continue;
                    }
                    __curstate = __state;
                    switch (__state) {
                        default: 
                        {
                            aos.jack.jak.core.Jak.error("PFindPath.body: Illegal state");
                            return FAILED_STATE;
                        }
                        //* (38) 	   Vector adjacentDir = new Vector();
                        case 10: 
                        {
                            __breakLevel = 0;
                            __local__19_0 = new java.util.Vector();
                            __state = 11;
                            break;
                        }
                        //* (39) 	   logical int $width, $height;
                        case 11: 
                        {
                            __local__19_1 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __local__19_2 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __state = 12;
                            break;
                        }
                        //* (40) 	   bel_simulationProp_dat.getGridSize( $width, $height );
                        case 12: 
                        {
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(0);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 13;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (42) 	   int width = $width.as_int();
                        case 13: 
                        {
                            __local__19_3 = __local__19_1.as_int();
                            __state = 14;
                            break;
                        }
                        //* (43) 	   int height = $height.as_int();
                        case 14: 
                        {
                            __local__19_4 = __local__19_2.as_int();
                            __state = 15;
                            break;
                        }
                        //* (44) 	   GridPoint src = new GridPoint(efindpath_h.srcX, efindpath_h.srcY);
                        case 15: 
                        {
                            __local__19_5 = new rmit.ai.clima.gui.grid.GridPoint(efindpath_h.srcX,efindpath_h.srcY);
                            __state = 16;
                            break;
                        }
                        //* (45) 	   GridPoint dst = new GridPoint(efindpath_h.dstX, efindpath_h.dstY);
                        case 16: 
                        {
                            __local__19_6 = new rmit.ai.clima.gui.grid.GridPoint(efindpath_h.dstX,efindpath_h.dstY);
                            __state = 17;
                            break;
                        }
                        //* (47) 	   adjacentDir.add("left");
                        case 17: 
                        {
                            if (__local__19_0.add("left")) 
                                __state = 18;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (48) 	   adjacentDir.add("right");
                        case 18: 
                        {
                            if (__local__19_0.add("right")) 
                                __state = 19;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (49) 	   adjacentDir.add("up");
                        case 19: 
                        {
                            if (__local__19_0.add("up")) 
                                __state = 20;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (50) 	   adjacentDir.add("down");
                        case 20: 
                        {
                            if (__local__19_0.add("down")) 
                                __state = 21;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (53)       if (src.equals(dst)) {
                        case 21: 
                        {
                            if (__local__19_5.equals(__local__19_6)) 
                                __state = 22;
                             else 
                                __state = 25;
                            break;
                        }
                        //* (54)          bel_moveHint_dat.add( src.x, src.y, dst.x, dst.y, "cur" );
                        case 22: 
                        {
                            __breakLevel = 2;
                            __state = 23;
                            bel_moveHint_dat.add(__local__19_5.x,__local__19_5.y,__local__19_6.x,__local__19_6.y,"cur");
                            break;
                        }
                        //* (55)          return true;
                        case 23: 
                        {
                            if (true) 
                                __state = 24;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (55)          return true;
                        case 24: 
                        {
                            __breakLevel = 0;
                            __state = 86;
                            break;
                        }
                        //* (62) 	   PathGrid grid = new PathGrid( width,  height );
                        case 25: 
                        {
                            __local__19_7 = new rmit.ai.clima.jackagt.plans.PFindPath.PathGrid(__local__19_3,__local__19_4);
                            __state = 26;
                            break;
                        }
                        //* (63) 	   for (int x=0; x<width; ++x) {
                        case 26: 
                        {
                            __local__19_8 = 0;
                            __state = 27;
                            break;
                        }
                        //* (63) 	   for (int x=0; x<width; ++x) {
                        case 27: 
                        {
                            if (__local__19_8 < __local__19_3) 
                                __state = 28;
                             else 
                                __state = 35;
                            break;
                        }
                        //* (64) 	      for (int y=0; y<height; ++y) {
                        case 28: 
                        {
                            __breakLevel = 4;
                            __local__19_9 = 0;
                            __state = 29;
                            break;
                        }
                        //* (64) 	      for (int y=0; y<height; ++y) {
                        case 29: 
                        {
                            if (__local__19_9 < __local__19_4) 
                                __state = 30;
                             else 
                                __state = 34;
                            break;
                        }
                        //* (67) 	         if(bel_obstacleAt_dat.check( x, y ))
                        case 30: 
                        {
                            __breakLevel = 8;
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(1);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 31;
                             else 
                                __state = 33;
                            break;
                        }
                        //* (69) 	            PathNode node = grid.getNode( x, y ); 
                        case 31: 
                        {
                            __breakLevel = 10;
                            __local__19_10 = __local__19_7.getNode(__local__19_8,__local__19_9);
                            __state = 32;
                            break;
                        }
                        //* (70) 	            node.obstacle = true;
                        case 32: 
                        {
                            __state = 33;
                            __local__19_10.obstacle = true;
                            break;
                        }
                        //* (64) 	      for (int y=0; y<height; ++y) {
                        case 33: 
                        {
                            __state = 29;
                            ++__local__19_9;
                            break;
                        }
                        //* (63) 	   for (int x=0; x<width; ++x) {
                        case 34: 
                        {
                            __state = 27;
                            ++__local__19_8;
                            break;
                        }
                        //* (76) 	   PathNode root = grid.getNode( src );
                        case 35: 
                        {
                            __local__19_11 = __local__19_7.getNode(__local__19_5);
                            __state = 36;
                            break;
                        }
                        //* (77) 	   root.dir = "";
                        case 36: 
                        {
                            __state = 37;
                            __local__19_11.dir = "";
                            break;
                        }
                        //* (78) 	   root.visited = true;
                        case 37: 
                        {
                            __state = 38;
                            __local__19_11.visited = true;
                            break;
                        }
                        //* (80) 	   Vector open = new Vector();
                        case 38: 
                        {
                            __local__19_12 = new java.util.Vector();
                            __state = 39;
                            break;
                        }
                        //* (81) 	   open.add( root );
                        case 39: 
                        {
                            if (__local__19_12.add(__local__19_11)) 
                                __state = 40;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (85) 	   boolean dstReached = false; 
                        case 40: 
                        {
                            __local__19_13 = false;
                            __state = 41;
                            break;
                        }
                        //* (86) 	   while (!open.isEmpty())
                        case 41: 
                        {
                            if (!__local__19_12.isEmpty()) 
                                __state = 42;
                             else 
                                __state = 73;
                            break;
                        }
                        //* (90) 	      PathNode cur = (PathNode)open.lastElement();
                        case 42: 
                        {
                            __breakLevel = 4;
                            __local__19_14 = (rmit.ai.clima.jackagt.plans.PFindPath.PathNode) __local__19_12.lastElement();
                            __state = 43;
                            break;
                        }
                        //* (91) 	      open.remove( open.size() -1 );
                        case 43: 
                        {
                            __state = 44;
                            __local__19_12.remove(__local__19_12.size() - 1);
                            break;
                        }
                        //* (94) 	      if (cur.pos.x == dst.x && cur.pos.y == dst.y) {
                        case 44: 
                        {
                            if (__local__19_14.pos.x == __local__19_6.x && __local__19_14.pos.y == __local__19_6.y) 
                                __state = 45;
                             else 
                                __state = 47;
                            break;
                        }
                        //* (95) 	         dstReached = true;
                        case 45: 
                        {
                            __breakLevel = 6;
                            __state = 46;
                            __local__19_13 = true;
                            break;
                        }
                        //* (97) 	         break;
                        case 46: 
                        {
                            __breakLevel = 2;
                            __state = 73;
                            break;
                        }
                        //* (102) 	      Collections.shuffle(adjacentDir);
                        case 47: 
                        {
                            __state = 48;
                            //Loop through adjacent nodes

                            java.util.Collections.shuffle(__local__19_0);
                            break;
                        }
                        //* (103)    	   for (int a=0; a<adjacentDir.size(); ++a)
                        case 48: 
                        {
                            __local__19_15 = 0;
                            __state = 49;
                            break;
                        }
                        //* (103)    	   for (int a=0; a<adjacentDir.size(); ++a)
                        case 49: 
                        {
                            if (__local__19_15 < __local__19_0.size()) 
                                __state = 50;
                             else 
                                __state = 72;
                            break;
                        }
                        //* (106)    	      GridPoint adjPos = cur.pos.getFromDir( (String)adjacentDir.get(a) );
                        case 50: 
                        {
                            __breakLevel = 8;
                            __local__19_16 = __local__19_14.pos.getFromDir((java.lang.String) __local__19_0.get(__local__19_15));
                            __state = 51;
                            break;
                        }
                        //* (108)    	      if(adjPos.x < 0 || adjPos.x >= grid.width || adjPos.y < 0 || adjPos.y >= grid.height)
                        case 51: 
                        {
                            if (__local__19_16.x < 0 || __local__19_16.x >= __local__19_7.width || __local__19_16.y < 0 || __local__19_16.y >= __local__19_7.height) 
                                __state = 52;
                             else 
                                __state = 53;
                            break;
                        }
                        //* (109)    	         continue;
                        case 52: 
                        {
                            __breakLevel = 7;
                            __state = 71;
                            break;
                        }
                        //* (111)    	      PathNode adj = grid.getNode( adjPos );
                        case 53: 
                        {
                            __local__19_17 = __local__19_7.getNode(__local__19_16);
                            __state = 54;
                            break;
                        }
                        //* (114)    	      if (adj.obstacle) continue;
                        case 54: 
                        {
                            if (__local__19_17.obstacle) 
                                __state = 55;
                             else 
                                __state = 56;
                            break;
                        }
                        //* (114)    	      if (adj.obstacle) continue;
                        case 55: 
                        {
                            __breakLevel = 7;
                            __state = 71;
                            break;
                        }
                        //* (117)    	      int g = cur.g + 1;
                        case 56: 
                        {
                            __local__19_18 = __local__19_14.g + 1;
                            __state = 57;
                            break;
                        }
                        //* (118)    	      int h = adj.pos.getManhattanDist( dst );
                        case 57: 
                        {
                            __local__19_19 = __local__19_17.pos.getManhattanDist(__local__19_6);
                            __state = 58;
                            break;
                        }
                        //* (119)    	      int f = g + h;
                        case 58: 
                        {
                            __local__19_20 = __local__19_18 + __local__19_19;
                            __state = 59;
                            break;
                        }
                        //* (122)    	      if (adj.visited)
                        case 59: 
                        {
                            if (__local__19_17.visited) 
                                __state = 60;
                             else 
                                __state = 65;
                            break;
                        }
                        //* (126)                if (f < adj.f)
                        case 60: 
                        {
                            __breakLevel = 10;
                            if (__local__19_20 < __local__19_17.f) 
                                __state = 61;
                             else 
                                __state = 71;
                            break;
                        }
                        //* (129)                   adj.dir = (String) (GridPoint.getRelativeDirections( adj.pos, cur.pos )[0]);
                        case 61: 
                        {
                            __breakLevel = 12;
                            __state = 62;
                            //It is so  route from adjacent back to current

                            __local__19_17.dir = (java.lang.String) (rmit.ai.clima.gui.grid.GridPoint.getRelativeDirections(__local__19_17.pos,__local__19_14.pos)[0]);
                            break;
                        }
                        //* (130)                   adj.g = g;
                        case 62: 
                        {
                            __state = 63;
                            __local__19_17.g = __local__19_18;
                            break;
                        }
                        //* (131)                   adj.h = h;
                        case 63: 
                        {
                            __state = 64;
                            __local__19_17.h = __local__19_19;
                            break;
                        }
                        //* (132)                   adj.f = f;
                        case 64: 
                        {
                            __state = 71;
                            __local__19_17.f = __local__19_20;
                            break;
                        }
                        //* (138)                adj.dir = (String) ( GridPoint.getRelativeDirections( adj.pos, cur.pos )[0] );
                        case 65: 
                        {
                            __breakLevel = 10;
                            __state = 66;
                            //Haven't so route from adjacent back to current

                            __local__19_17.dir = (java.lang.String) (rmit.ai.clima.gui.grid.GridPoint.getRelativeDirections(__local__19_17.pos,__local__19_14.pos)[0]);
                            break;
                        }
                        //* (139)                adj.g = g;
                        case 66: 
                        {
                            __state = 67;
                            __local__19_17.g = __local__19_18;
                            break;
                        }
                        //* (140)                adj.h = h;
                        case 67: 
                        {
                            __state = 68;
                            __local__19_17.h = __local__19_19;
                            break;
                        }
                        //* (141)                adj.f = f;
                        case 68: 
                        {
                            __state = 69;
                            __local__19_17.f = __local__19_20;
                            break;
                        }
                        //* (142)                adj.visited = true;
                        case 69: 
                        {
                            __state = 70;
                            __local__19_17.visited = true;
                            break;
                        }
                        //* (143)                open.add( adj );
                        case 70: 
                        {
                            if (__local__19_12.add(__local__19_17)) 
                                __state = 71;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (103)    	   for (int a=0; a<adjacentDir.size(); ++a)
                        case 71: 
                        {
                            __state = 49;
                            ++__local__19_15;
                            break;
                        }
                        //* (148)    	   Collections.sort( open );
                        case 72: 
                        {
                            __state = 41;
                            //adjacent nodes

                            java.util.Collections.sort(__local__19_12);
                            break;
                        }
                        //* (152)       if(dstReached)
                        case 73: 
                        {
                            if (__local__19_13) 
                                __state = 74;
                             else 
                                __state = 86;
                            break;
                        }
                        //* (154)          PathNode dstNode = grid.getNode( dst );
                        case 74: 
                        {
                            __breakLevel = 2;
                            __local__19_21 = __local__19_7.getNode(__local__19_6);
                            __state = 75;
                            break;
                        }
                        //* (155)          PathNode srcNode = grid.getNode( src );
                        case 75: 
                        {
                            __local__19_22 = __local__19_7.getNode(__local__19_5);
                            __state = 76;
                            break;
                        }
                        //* (156)          PathNode prevNode = dstNode;
                        case 76: 
                        {
                            __local__19_23 = __local__19_21;
                            __state = 77;
                            break;
                        }
                        //* (157)          PathNode curNode = dstNode;
                        case 77: 
                        {
                            __local__19_24 = __local__19_21;
                            __state = 78;
                            break;
                        }
                        //* (159)          while (true)
                        case 78: 
                        {
                            if (true) 
                                __state = 79;
                             else 
                                __state = 84;
                            break;
                        }
                        //* (162)             GridPoint prevPoint = curNode.pos.getFromDir(curNode.dir);
                        case 79: 
                        {
                            __breakLevel = 6;
                            __local__19_25 = __local__19_24.pos.getFromDir(__local__19_24.dir);
                            __state = 80;
                            break;
                        }
                        //* (163)             prevNode = grid.getNode( prevPoint );
                        case 80: 
                        {
                            __state = 81;
                            __local__19_23 = __local__19_7.getNode(__local__19_25);
                            break;
                        }
                        //* (164)             if (prevNode == srcNode) break;
                        case 81: 
                        {
                            if (__local__19_23 == __local__19_22) 
                                __state = 82;
                             else 
                                __state = 83;
                            break;
                        }
                        //* (164)             if (prevNode == srcNode) break;
                        case 82: 
                        {
                            __breakLevel = 4;
                            __state = 84;
                            break;
                        }
                        //* (165)             curNode = prevNode;
                        case 83: 
                        {
                            __state = 78;
                            __local__19_24 = __local__19_23;
                            break;
                        }
                        //* (169)          String moveDir = (String) ( prevNode.pos.getRelativeDirections( prevNode.pos, curNode.pos )[0] );
                        case 84: 
                        {
                            __local__19_26 = (java.lang.String) (__local__19_23.pos.getRelativeDirections(__local__19_23.pos,__local__19_24.pos)[0]);
                            __state = 85;
                            break;
                        }
                        //* (170)          bel_moveHint_dat.add( src.x, src.y, dst.x, dst.y, moveDir );
                        case 85: 
                        {
                            __state = 86;
                            bel_moveHint_dat.add(__local__19_5.x,__local__19_5.y,__local__19_6.x,__local__19_6.y,__local__19_26);
                            break;
                        }
                        //* (36) 	body()
                        case 86: 
                        {
                            if (__pending == null) 
                                __state = PASSED_STATE;
                            __tothrow = __pending;
                            break;
                        }
                    }
                }
                catch (java.lang.Throwable e) {
                    handleException(e,__exMap_body);
                }
            }
             while (!agent.changing_focus);
            return CONTINUE;
        }
        
        public java.lang.String methodName()
        {
            return "body";
        }
        
        __bodyFSM()
        {
        }
        
        public java.lang.String stateInfo()
        {
            int n = __curstate;
            java.lang.String file = __tt__body[0];
            java.lang.String method = __tt__body[1];
            if (n < 0) 
                n = -n;
            n -= (10 - 2);
            java.lang.String line = (n < 2)?"??":__tt__body[n];
            return file + ":" + line + " " + method + " [" + __curstate + "]";
        }
        
        public java.lang.Object genObject(int __index)
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Object Construction");
            return null;
        }
        
        public aos.jack.jak.cursor.Cursor genCursor(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
                case 0: 
                {
                    return (bel_simulationProp_dat.getGridSize(__local__19_1,__local__19_2));
                }
                case 1: 
                {
                    return (bel_obstacleAt_dat.check(__local__19_8,__local__19_9));
                }
            }
            aos.jack.jak.core.Jak.error("illegal Cursor Construction");
            return null;
        }
        
        public aos.jack.jak.fsm.FSM genFSM(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal FSM Construction");
            return null;
        }
        
        public boolean testCondition(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal test Construction");
            return false;
        }
        
        public aos.jack.jak.plan.Plan getPlan()
        {
            return rmit.ai.clima.jackagt.plans.PFindPath.this;
        }
        
        protected aos.jack.jak.fsm.FSM fail()
        {
            return getPlan().fail();
        }
        
        protected aos.jack.jak.fsm.FSM pass()
        {
            return getPlan().pass();
        }
        
        public void enter()
        {
            __trace = agent.trace("rmit.ai.clima.jackagt.plans.PFindPath.body");
        }
        
        public java.lang.Object getVariable(int n)
        {
            switch (n) {
                case 0: 
                {
                    return aos.util.ToObject.box(__local__19_0);
                }
                case 1: 
                {
                    return aos.util.ToObject.box(__local__19_1);
                }
                case 2: 
                {
                    return aos.util.ToObject.box(__local__19_2);
                }
                case 3: 
                {
                    return aos.util.ToObject.box(__local__19_3);
                }
                case 4: 
                {
                    return aos.util.ToObject.box(__local__19_4);
                }
                case 5: 
                {
                    return aos.util.ToObject.box(__local__19_5);
                }
                case 6: 
                {
                    return aos.util.ToObject.box(__local__19_6);
                }
                case 7: 
                {
                    return aos.util.ToObject.box(__local__19_7);
                }
                case 8: 
                {
                    return aos.util.ToObject.box(__local__19_8);
                }
                case 9: 
                {
                    return aos.util.ToObject.box(__local__19_9);
                }
                case 10: 
                {
                    return aos.util.ToObject.box(__local__19_10);
                }
                case 11: 
                {
                    return aos.util.ToObject.box(__local__19_11);
                }
                case 12: 
                {
                    return aos.util.ToObject.box(__local__19_12);
                }
                case 13: 
                {
                    return aos.util.ToObject.box(__local__19_13);
                }
                case 14: 
                {
                    return aos.util.ToObject.box(__local__19_14);
                }
                case 15: 
                {
                    return aos.util.ToObject.box(__local__19_15);
                }
                case 16: 
                {
                    return aos.util.ToObject.box(__local__19_16);
                }
                case 17: 
                {
                    return aos.util.ToObject.box(__local__19_17);
                }
                case 18: 
                {
                    return aos.util.ToObject.box(__local__19_18);
                }
                case 19: 
                {
                    return aos.util.ToObject.box(__local__19_19);
                }
                case 20: 
                {
                    return aos.util.ToObject.box(__local__19_20);
                }
                case 21: 
                {
                    return aos.util.ToObject.box(__local__19_21);
                }
                case 22: 
                {
                    return aos.util.ToObject.box(__local__19_22);
                }
                case 23: 
                {
                    return aos.util.ToObject.box(__local__19_23);
                }
                case 24: 
                {
                    return aos.util.ToObject.box(__local__19_24);
                }
                case 25: 
                {
                    return aos.util.ToObject.box(__local__19_25);
                }
                case 26: 
                {
                    return aos.util.ToObject.box(__local__19_26);
                }
                default: 
                {
                    throw new java.lang.IndexOutOfBoundsException("Reasoning Method " + methodName() + " does not have variable number " + n);
                }
            }
        }
        
        public java.lang.String[] variableNames()
        {
            return __fsmVariableNames_body;
        }
        
        public java.lang.String[] variableTypes()
        {
            return __fsmTypes_body;
        }
        
        public java.lang.String[] variableLocalNames()
        {
            return __fsmLocalNames_body;
        }
        
    }
}
