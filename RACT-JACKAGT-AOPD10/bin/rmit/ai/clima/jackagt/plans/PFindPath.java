/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
  This code is generated by JAC version 5.4 by
  Agent Oriented Software. http://www.agent-software.com.au

    DO NOT ALTER THIS CODE AND DO NOT REMOVE THIS COMMENT
 *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
package rmit.ai.clima.jackagt.plans;
import aos.jack.jak.plan.Plan;
import aos.jack.jak.plan.PlanFSM;
import aos.jack.jak.plan.ExMap;
import aos.jack.jak.agent.NameSpace;
import aos.jack.jak.agent.Agent;
import aos.jack.jak.event.Event;
import aos.jack.jak.task.Task;
import aos.jack.jak.core.Generator;
import aos.jack.jak.logic.Signature;
import java.lang.Object;
import rmit.ai.clima.jackagt.events.EFindPath;
import rmit.ai.clima.jackagt.data.BMoveHint;
import rmit.ai.clima.jackagt.data.BObstacleAt;
import rmit.ai.clima.jackagt.data.BPlayerPosition;
import rmit.ai.clima.jackagt.data.SimulationProp;
import rmit.ai.clima.gui.grid.GridPoint;
import java.util.Vector;
import java.util.Collections;
import aos.jack.jak.cursor.Cursor;
import aos.jack.jak.fsm.FSM;
import aos.jack.jak.core.Jak;

public class PFindPath extends aos.jack.jak.plan.Plan {
    public rmit.ai.clima.jackagt.events.EFindPath efindpath_h;
    public rmit.ai.clima.jackagt.data.BMoveHint bel_moveHint_dat;
    public rmit.ai.clima.jackagt.data.BObstacleAt bel_obstacleAt_dat;
    public rmit.ai.clima.jackagt.data.BPlayerPosition bel_playerPositions_dat;
    public rmit.ai.clima.jackagt.data.SimulationProp bel_simulationProp_dat;
    private static aos.jack.jak.plan.ExMap[] __exMap_body;
    private static java.lang.String[] __tt__body = {
            "rmit/ai/clima/jackagt/plans/PFindPath.plan",
            "body",
            "42",
            "43",
            "46",
            "47",
            "48",
            "49",
            "50",
            "52",
            "52",
            "57",
            "58",
            "59",
            "60",
            "63",
            "64",
            "65",
            "67",
            "68",
            "69",
            "70",
            "71",
            "74",
            "77",
            "78",
            "78",
            "85",
            "87",
            "87",
            "88",
            "88",
            "90",
            "93",
            "94",
            "97",
            "98",
            "101",
            "102",
            "103",
            "104",
            "88",
            "87",
            "109",
            "110",
            "111",
            "113",
            "114",
            "118",
            "119",
            "123",
            "124",
            "127",
            "128",
            "129",
            "134",
            "135",
            "135",
            "138",
            "140",
            "141",
            "143",
            "146",
            "146",
            "149",
            "150",
            "151",
            "154",
            "158",
            "161",
            "162",
            "163",
            "164",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "135",
            "180",
            "185",
            "186",
            "187",
            "189",
            "190",
            "191",
            "192",
            "194",
            "196",
            "197",
            "198",
            "199",
            "199",
            "200",
            "203",
            "207",
            "208",
            "209",
            "38"};
    private final static java.lang.String[] __planVariableNames = {
            "efindpath_h",
            "bel_moveHint_dat",
            "bel_obstacleAt_dat",
            "bel_playerPositions_dat",
            "bel_simulationProp_dat"};
    private final static java.lang.String[] __planVariableTypes = {
            "rmit.ai.clima.jackagt.events.EFindPath",
            "rmit.ai.clima.jackagt.data.BMoveHint",
            "rmit.ai.clima.jackagt.data.BObstacleAt",
            "rmit.ai.clima.jackagt.data.BPlayerPosition",
            "rmit.ai.clima.jackagt.data.SimulationProp"};
    private final static java.lang.String[] __reasoningMethods = {
            "body"};
    private final static java.lang.String[] __fsmVariableNames_body = {
            "src",
            "dst",
            "$cachedMoveHint",
            "$cachedPathLength",
            "$width",
            "$height",
            "width",
            "height",
            "$depotX",
            "$depotY",
            "depotPoint",
            "adjacentDir",
            "grid",
            "x",
            "y",
            "node",
            "$name",
            "root",
            "open",
            "dstReached",
            "cur",
            "a",
            "adjPos",
            "adj",
            "g",
            "h",
            "f",
            "moveHint",
            "pathLength",
            "dstNode",
            "srcNode",
            "prevNode",
            "curNode",
            "prevPoint"};
    private final static java.lang.String[] __fsmTypes_body = {
            "GridPoint",
            "GridPoint",
            "logical String",
            "logical int",
            "logical int",
            "logical int",
            "int",
            "int",
            "logical int",
            "logical int",
            "GridPoint",
            "Vector",
            "PathGrid",
            "int",
            "int",
            "PathNode",
            "logical String",
            "PathNode",
            "Vector",
            "boolean",
            "PathNode",
            "int",
            "GridPoint",
            "PathNode",
            "int",
            "int",
            "int",
            "String",
            "int",
            "PathNode",
            "PathNode",
            "PathNode",
            "PathNode",
            "GridPoint"};
    private final static java.lang.String[] __fsmLocalNames_body = {
            "__local__22_0",
            "__local__22_1",
            "__local__22_2",
            "__local__22_3",
            "__local__22_4",
            "__local__22_5",
            "__local__22_6",
            "__local__22_7",
            "__local__22_8",
            "__local__22_9",
            "__local__22_10",
            "__local__22_11",
            "__local__22_12",
            "__local__22_13",
            "__local__22_14",
            "__local__22_15",
            "__local__22_16",
            "__local__22_17",
            "__local__22_18",
            "__local__22_19",
            "__local__22_20",
            "__local__22_21",
            "__local__22_22",
            "__local__22_23",
            "__local__22_24",
            "__local__22_25",
            "__local__22_26",
            "__local__22_27",
            "__local__22_28",
            "__local__22_29",
            "__local__22_30",
            "__local__22_31",
            "__local__22_32",
            "__local__22_33"};
    public PFindPath()
    {
    }
    
    private PFindPath(aos.jack.jak.task.Task __t, rmit.ai.clima.jackagt.plans.PFindPath __env)
    {
        __agent = __env.__agent;
        __ns = __env.__ns;
        __planTask = __t;
        __logic = __t.logic;
        efindpath_h = __env.efindpath_h;
        bel_moveHint_dat = __env.bel_moveHint_dat;
        bel_obstacleAt_dat = __env.bel_obstacleAt_dat;
        bel_playerPositions_dat = __env.bel_playerPositions_dat;
        bel_simulationProp_dat = __env.bel_simulationProp_dat;
    }
    
    public boolean init_sentinel(aos.jack.jak.agent.NameSpace __a)
    {
        efindpath_h = (rmit.ai.clima.jackagt.events.EFindPath) __a.findEvent("rmit.ai.clima.jackagt.events.EFindPath");
        if (efindpath_h == null) {
            warning("Failed to find EFindPath efindpath_h");
            return false;
        }
        bel_moveHint_dat = (rmit.ai.clima.jackagt.data.BMoveHint) lookupNamedObject("bel_moveHint_dat","rmit.ai.clima.jackagt.data.BMoveHint",aos.jack.jak.agent.Agent.WRITEABLE);
        if (bel_moveHint_dat == null) {
            warning("Failed to find BMoveHint bel_moveHint_dat");
            return false;
        }
        bel_obstacleAt_dat = (rmit.ai.clima.jackagt.data.BObstacleAt) lookupNamedObject("bel_obstacleAt_dat","rmit.ai.clima.jackagt.data.BObstacleAt",0);
        if (bel_obstacleAt_dat == null) {
            warning("Failed to find BObstacleAt bel_obstacleAt_dat");
            return false;
        }
        bel_playerPositions_dat = (rmit.ai.clima.jackagt.data.BPlayerPosition) lookupNamedObject("bel_playerPositions_dat","rmit.ai.clima.jackagt.data.BPlayerPosition",0);
        if (bel_playerPositions_dat == null) {
            warning("Failed to find BPlayerPosition bel_playerPositions_dat");
            return false;
        }
        bel_simulationProp_dat = (rmit.ai.clima.jackagt.data.SimulationProp) lookupNamedObject("bel_simulationProp_dat","rmit.ai.clima.jackagt.data.SimulationProp",0);
        if (bel_simulationProp_dat == null) {
            warning("Failed to find SimulationProp bel_simulationProp_dat");
            return false;
        }
        return true;
    }
    
    public aos.jack.jak.plan.Plan freeze()
    {
        return this;
    }
    
    public aos.jack.jak.plan.Plan unfreeze()
    {
        return this;
    }
    
    public java.lang.Object genObject(int __index)
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Object Construction");
        return null;
    }
    
    public aos.jack.jak.cursor.Cursor genCursor(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Cursor Construction");
        return null;
    }
    
    public aos.jack.jak.fsm.FSM genFSM(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal FSM Construction");
        return null;
    }
    
    public boolean testCondition(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal test Construction");
        return false;
    }
    
    public aos.jack.jak.plan.PlanFSM body()
    {
        return new rmit.ai.clima.jackagt.plans.PFindPath.__bodyFSM();
    }
    
    private PFindPath(rmit.ai.clima.jackagt.events.EFindPath __ev, aos.jack.jak.task.Task __t, rmit.ai.clima.jackagt.plans.PFindPath __env)
    {
        this(__t,__env);
        this.efindpath_h = __ev;
    }
    
    protected aos.jack.jak.logic.Signature eventSignature(int __log)
    {
        return efindpath_h.getSignature(__log);
    }
    
    public java.lang.String handledEvent()
    {
        return "rmit.ai.clima.jackagt.events.EFindPath";
    }
    
    public boolean __relevant(aos.jack.jak.event.Event __e)
    {
        return __ns.isEnabled();
    }
    
    public aos.jack.jak.plan.Plan createPlan(aos.jack.jak.event.Event __e, aos.jack.jak.task.Task __t)
    {
        if (!(__e instanceof rmit.ai.clima.jackagt.events.EFindPath)) 
            return null;
        rmit.ai.clima.jackagt.events.EFindPath __e1 = (rmit.ai.clima.jackagt.events.EFindPath) __e;
        return new rmit.ai.clima.jackagt.plans.PFindPath(__e1,__t,this);
    }
    
    public java.lang.String[] variableNames()
    {
        return __planVariableNames;
    }
    
    public java.lang.String[] variableTypes()
    {
        return __planVariableTypes;
    }
    
    public java.lang.Object getVariable(int n)
    {
        switch (n) {
            case 0: 
            {
                return aos.util.ToObject.box(efindpath_h);
            }
            case 1: 
            {
                return aos.util.ToObject.box(bel_moveHint_dat);
            }
            case 2: 
            {
                return aos.util.ToObject.box(bel_obstacleAt_dat);
            }
            case 3: 
            {
                return aos.util.ToObject.box(bel_playerPositions_dat);
            }
            case 4: 
            {
                return aos.util.ToObject.box(bel_simulationProp_dat);
            }
            default: 
            {
                throw new java.lang.IndexOutOfBoundsException("Plan " + this + " does not have variable number " + n);
            }
        }
    }
    
    public java.lang.String[] reasoningMethods()
    {
        return mergeReasoningMethods(__reasoningMethods,super.reasoningMethods());
    }
    
    public aos.jack.jak.cursor.Cursor context()
    {
        try {
            return (((true)?aos.jack.jak.cursor.Cursor.trueCursor:aos.jack.jak.cursor.Cursor.falseCursor));
        }
        catch (java.lang.Exception e) {
            e.printStackTrace();
            return aos.jack.jak.cursor.Cursor.falseCursor;
        }
    }
    
    class PathGrid extends java.lang.Object {
        public int width;
        public int height;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode[] grid;
        public PathGrid(int width, int height)
        {
            this.width = width;
            this.height = height;
            grid = new rmit.ai.clima.jackagt.plans.PFindPath.PathNode[width * height];
            for (int x = 0; x < width; ++x) {
                for (int y = 0; y < height; ++y) {
                    rmit.ai.clima.jackagt.plans.PFindPath.PathNode node = new rmit.ai.clima.jackagt.plans.PFindPath.PathNode();
                    node.pos.x = x;
                    node.pos.y = y;
                    grid[y * width + x] = node;
                }
            }
        }
        
        public rmit.ai.clima.jackagt.plans.PFindPath.PathNode getNode(int x, int y)
        {
            return grid[y * width + x];
        }
        
        public rmit.ai.clima.jackagt.plans.PFindPath.PathNode getNode(rmit.ai.clima.gui.grid.GridPoint pt)
        {
            return getNode(pt.x,pt.y);
        }
        
    }
    class PathNode extends java.lang.Object implements java.lang.Comparable {
        public boolean obstacle;
        public boolean visited;
        public rmit.ai.clima.gui.grid.GridPoint pos;
        public java.lang.String dir;
        public int g;
        public int h;
        public int f;
        public PathNode()
        {
            visited = false;
            obstacle = false;
            pos = new rmit.ai.clima.gui.grid.GridPoint();
            dir = "";
            g = 0;
            h = 0;
            f = 0;
        }
        
        public boolean equals(java.lang.Object o)
        {
            rmit.ai.clima.jackagt.plans.PFindPath.PathNode other = (rmit.ai.clima.jackagt.plans.PFindPath.PathNode) o;
            return (f == other.f);
        }
        
        public int compareTo(java.lang.Object o)
        {
            rmit.ai.clima.jackagt.plans.PFindPath.PathNode other = (rmit.ai.clima.jackagt.plans.PFindPath.PathNode) o;
            return other.f - f;
        }
        
    }
    class __bodyFSM extends aos.jack.jak.plan.PlanFSM implements aos.jack.jak.core.Generator {
        rmit.ai.clima.gui.grid.GridPoint __local__22_0;
        rmit.ai.clima.gui.grid.GridPoint __local__22_1;
        aos.jack.jak.logic.StringVariable __local__22_2;
        aos.jack.jak.logic.IntegerVariable __local__22_3;
        aos.jack.jak.logic.IntegerVariable __local__22_4;
        aos.jack.jak.logic.IntegerVariable __local__22_5;
        int __local__22_6;
        int __local__22_7;
        aos.jack.jak.logic.IntegerVariable __local__22_8;
        aos.jack.jak.logic.IntegerVariable __local__22_9;
        rmit.ai.clima.gui.grid.GridPoint __local__22_10;
        java.util.Vector __local__22_11;
        rmit.ai.clima.jackagt.plans.PFindPath.PathGrid __local__22_12;
        int __local__22_13;
        int __local__22_14;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__22_15;
        aos.jack.jak.logic.StringVariable __local__22_16;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__22_17;
        java.util.Vector __local__22_18;
        boolean __local__22_19;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__22_20;
        int __local__22_21;
        rmit.ai.clima.gui.grid.GridPoint __local__22_22;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__22_23;
        int __local__22_24;
        int __local__22_25;
        int __local__22_26;
        java.lang.String __local__22_27;
        int __local__22_28;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__22_29;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__22_30;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__22_31;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__22_32;
        rmit.ai.clima.gui.grid.GridPoint __local__22_33;
        private int __breakLevel = 0;
        public int run(int __status)
            throws java.lang.Throwable
        {
            do {
                try {
                    if (__tothrow != null) 
                        throw __tothrow;
                    if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_PLANS) != 0) 
                        aos.util.logging.LogMsg.log(this,aos.jack.jak.core.Jak.LOG_PLANS,__task + "-PFindPath.body:" + java.lang.Integer.toString(__state));
                    if (__task.nsteps > 0) {
                        __task.nsteps-- ;
                        if (__task.nsteps == 0) 
                            agent.changeFocus();
                    }
                    if (__state < 10) {
                        __status = super.stdrun(rmit.ai.clima.jackagt.plans.PFindPath.this,__status);
                        if (__status != CONTINUE || agent.changing_focus) 
                            return __status;
                        continue;
                    }
                    __curstate = __state;
                    switch (__state) {
                        default: 
                        {
                            aos.jack.jak.core.Jak.error("PFindPath.body: Illegal state");
                            return FAILED_STATE;
                        }
                        //* (42)       GridPoint src = new GridPoint(efindpath_h.srcX, efindpath_h.srcY);
                        case 10: 
                        {
                            __breakLevel = 0;
                            __local__22_0 = new rmit.ai.clima.gui.grid.GridPoint(efindpath_h.srcX,efindpath_h.srcY);
                            __state = 11;
                            break;
                        }
                        //* (43)       GridPoint dst = new GridPoint(efindpath_h.dstX, efindpath_h.dstY);
                        case 11: 
                        {
                            __local__22_1 = new rmit.ai.clima.gui.grid.GridPoint(efindpath_h.dstX,efindpath_h.dstY);
                            __state = 12;
                            break;
                        }
                        //* (46) 	   logical String $cachedMoveHint;
                        case 12: 
                        {
                            __local__22_2 = (aos.jack.jak.logic.StringVariable) __logic.new_variable(java.lang.String.class);
                            __state = 13;
                            break;
                        }
                        //* (47) 	   logical int $cachedPathLength;
                        case 13: 
                        {
                            __local__22_3 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __state = 14;
                            break;
                        }
                        //* (48)       if (bel_moveHint_dat.getByEndPoints( src.x, src.y, dst.x, dst.y, $cachedMoveHint, $cachedPathLength )) {
                        case 14: 
                        {
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(0);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 15;
                             else 
                                __state = 19;
                            break;
                        }
                        //* (49)          efindpath_h.moveHint = $cachedMoveHint.as_string();
                        case 15: 
                        {
                            __breakLevel = 2;
                            __state = 16;
                            efindpath_h.moveHint = __local__22_2.as_string();
                            break;
                        }
                        //* (50)          efindpath_h.pathLength = $cachedPathLength.as_int();
                        case 16: 
                        {
                            __state = 17;
                            efindpath_h.pathLength = __local__22_3.as_int();
                            break;
                        }
                        //* (52)          return true;
                        case 17: 
                        {
                            if (true) 
                                __state = 18;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (52)          return true;
                        case 18: 
                        {
                            __breakLevel = 0;
                            __state = 107;
                            break;
                        }
                        //* (57) 	   logical int $width, $height;
                        case 19: 
                        {
                            __local__22_4 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __local__22_5 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __state = 20;
                            break;
                        }
                        //* (58) 	   bel_simulationProp_dat.getGridSize( $width, $height );
                        case 20: 
                        {
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(1);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 21;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (59) 	   int width = $width.as_int();
                        case 21: 
                        {
                            __local__22_6 = __local__22_4.as_int();
                            __state = 22;
                            break;
                        }
                        //* (60)       int height = $height.as_int();
                        case 22: 
                        {
                            __local__22_7 = __local__22_5.as_int();
                            __state = 23;
                            break;
                        }
                        //* (63) 	   logical int $depotX, $depotY;
                        case 23: 
                        {
                            __local__22_8 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __local__22_9 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __state = 24;
                            break;
                        }
                        //* (64) 	   bel_simulationProp_dat.getDepotLoc( $depotX, $depotY );
                        case 24: 
                        {
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(2);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 25;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (65) 	   GridPoint depotPoint = new GridPoint( $depotX.as_int(), $depotY.as_int() );
                        case 25: 
                        {
                            __local__22_10 = new rmit.ai.clima.gui.grid.GridPoint(__local__22_8.as_int(),__local__22_9.as_int());
                            __state = 26;
                            break;
                        }
                        //* (67)       Vector adjacentDir = new Vector();
                        case 26: 
                        {
                            __local__22_11 = new java.util.Vector();
                            __state = 27;
                            break;
                        }
                        //* (68) 	   adjacentDir.add("left");
                        case 27: 
                        {
                            if (__local__22_11.add("left")) 
                                __state = 28;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (69) 	   adjacentDir.add("right");
                        case 28: 
                        {
                            if (__local__22_11.add("right")) 
                                __state = 29;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (70) 	   adjacentDir.add("up");
                        case 29: 
                        {
                            if (__local__22_11.add("up")) 
                                __state = 30;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (71) 	   adjacentDir.add("down");
                        case 30: 
                        {
                            if (__local__22_11.add("down")) 
                                __state = 31;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (74)       if (src.equals(dst)) {
                        case 31: 
                        {
                            if (__local__22_0.equals(__local__22_1)) 
                                __state = 32;
                             else 
                                __state = 35;
                            break;
                        }
                        //* (77)          bel_moveHint_dat.add( src.x, src.y, dst.x, dst.y, "", 0 );
                        case 32: 
                        {
                            __breakLevel = 2;
                            __state = 33;
                            //Cache result

                            bel_moveHint_dat.add(__local__22_0.x,__local__22_0.y,__local__22_1.x,__local__22_1.y,"",0);
                            break;
                        }
                        //* (78)          return true;
                        case 33: 
                        {
                            if (true) 
                                __state = 34;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (78)          return true;
                        case 34: 
                        {
                            __breakLevel = 0;
                            __state = 107;
                            break;
                        }
                        //* (85) 	   PathGrid grid = new PathGrid( width,  height );
                        case 35: 
                        {
                            __local__22_12 = new rmit.ai.clima.jackagt.plans.PFindPath.PathGrid(__local__22_6,__local__22_7);
                            __state = 36;
                            break;
                        }
                        //* (87) 	   for (int x=0; x<width; ++x) {
                        case 36: 
                        {
                            __local__22_13 = 0;
                            __state = 37;
                            break;
                        }
                        //* (87) 	   for (int x=0; x<width; ++x) {
                        case 37: 
                        {
                            if (__local__22_13 < __local__22_6) 
                                __state = 38;
                             else 
                                __state = 51;
                            break;
                        }
                        //* (88) 	      for (int y=0; y<height; ++y) {
                        case 38: 
                        {
                            __breakLevel = 4;
                            __local__22_14 = 0;
                            __state = 39;
                            break;
                        }
                        //* (88) 	      for (int y=0; y<height; ++y) {
                        case 39: 
                        {
                            if (__local__22_14 < __local__22_7) 
                                __state = 40;
                             else 
                                __state = 50;
                            break;
                        }
                        //* (90) 	         PathNode node = grid.getNode( x, y ); 
                        case 40: 
                        {
                            __breakLevel = 8;
                            __local__22_15 = __local__22_12.getNode(__local__22_13,__local__22_14);
                            __state = 41;
                            break;
                        }
                        //* (93) 	         if(bel_obstacleAt_dat.check( x, y ))
                        case 41: 
                        {
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(3);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 42;
                             else 
                                __state = 43;
                            break;
                        }
                        //* (94) 	            node.obstacle = true;
                        case 42: 
                        {
                            __state = 43;
                            __local__22_15.obstacle = true;
                            break;
                        }
                        //* (97) 	         if(node.pos.equals(depotPoint) && !node.pos.equals(src) && !node.pos.equals(dst))
                        case 43: 
                        {
                            if (__local__22_15.pos.equals(__local__22_10) && !__local__22_15.pos.equals(__local__22_0) && !__local__22_15.pos.equals(__local__22_1)) 
                                __state = 44;
                             else 
                                __state = 45;
                            break;
                        }
                        //* (98) 	            node.obstacle = true;
                        case 44: 
                        {
                            __state = 45;
                            __local__22_15.obstacle = true;
                            break;
                        }
                        //* (101) 	         logical String $name;
                        case 45: 
                        {
                            __local__22_16 = (aos.jack.jak.logic.StringVariable) __logic.new_variable(java.lang.String.class);
                            __state = 46;
                            break;
                        }
                        //* (102) 	         if (bel_playerPositions_dat.getByCoord( $name, x, y ))
                        case 46: 
                        {
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(4);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 47;
                             else 
                                __state = 49;
                            break;
                        }
                        //* (103) 	            if (!$name.as_string().equals( efindpath_h.playerName ))
                        case 47: 
                        {
                            if (!__local__22_16.as_string().equals(efindpath_h.playerName)) 
                                __state = 48;
                             else 
                                __state = 49;
                            break;
                        }
                        //* (104) 	               node.obstacle = true;
                        case 48: 
                        {
                            __state = 49;
                            __local__22_15.obstacle = true;
                            break;
                        }
                        //* (88) 	      for (int y=0; y<height; ++y) {
                        case 49: 
                        {
                            __state = 39;
                            ++__local__22_14;
                            break;
                        }
                        //* (87) 	   for (int x=0; x<width; ++x) {
                        case 50: 
                        {
                            __state = 37;
                            ++__local__22_13;
                            break;
                        }
                        //* (109) 	   PathNode root = grid.getNode( src );
                        case 51: 
                        {
                            __local__22_17 = __local__22_12.getNode(__local__22_0);
                            __state = 52;
                            break;
                        }
                        //* (110) 	   root.dir = "";
                        case 52: 
                        {
                            __state = 53;
                            __local__22_17.dir = "";
                            break;
                        }
                        //* (111) 	   root.visited = true;
                        case 53: 
                        {
                            __state = 54;
                            __local__22_17.visited = true;
                            break;
                        }
                        //* (113) 	   Vector open = new Vector();
                        case 54: 
                        {
                            __local__22_18 = new java.util.Vector();
                            __state = 55;
                            break;
                        }
                        //* (114) 	   open.add( root );
                        case 55: 
                        {
                            if (__local__22_18.add(__local__22_17)) 
                                __state = 56;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (118) 	   boolean dstReached = false; 
                        case 56: 
                        {
                            __local__22_19 = false;
                            __state = 57;
                            break;
                        }
                        //* (119) 	   while (!open.isEmpty())
                        case 57: 
                        {
                            if (!__local__22_18.isEmpty()) 
                                __state = 58;
                             else 
                                __state = 89;
                            break;
                        }
                        //* (123) 	      PathNode cur = (PathNode)open.lastElement();
                        case 58: 
                        {
                            __breakLevel = 4;
                            __local__22_20 = (rmit.ai.clima.jackagt.plans.PFindPath.PathNode) __local__22_18.lastElement();
                            __state = 59;
                            break;
                        }
                        //* (124) 	      open.remove( open.size() -1 );
                        case 59: 
                        {
                            __state = 60;
                            __local__22_18.remove(__local__22_18.size() - 1);
                            break;
                        }
                        //* (127) 	      if (cur.pos.x == dst.x && cur.pos.y == dst.y) {
                        case 60: 
                        {
                            if (__local__22_20.pos.x == __local__22_1.x && __local__22_20.pos.y == __local__22_1.y) 
                                __state = 61;
                             else 
                                __state = 63;
                            break;
                        }
                        //* (128) 	         dstReached = true;
                        case 61: 
                        {
                            __breakLevel = 6;
                            __state = 62;
                            __local__22_19 = true;
                            break;
                        }
                        //* (129) 	         break;
                        case 62: 
                        {
                            __breakLevel = 2;
                            __state = 89;
                            break;
                        }
                        //* (134) 	      Collections.shuffle(adjacentDir);
                        case 63: 
                        {
                            __state = 64;
                            //Loop through adjacent nodes

                            java.util.Collections.shuffle(__local__22_11);
                            break;
                        }
                        //* (135)    	   for (int a=0; a<adjacentDir.size(); ++a)
                        case 64: 
                        {
                            __local__22_21 = 0;
                            __state = 65;
                            break;
                        }
                        //* (135)    	   for (int a=0; a<adjacentDir.size(); ++a)
                        case 65: 
                        {
                            if (__local__22_21 < __local__22_11.size()) 
                                __state = 66;
                             else 
                                __state = 88;
                            break;
                        }
                        //* (138)    	      GridPoint adjPos = cur.pos.getFromDir( (String)adjacentDir.get(a) );
                        case 66: 
                        {
                            __breakLevel = 8;
                            __local__22_22 = __local__22_20.pos.getFromDir((java.lang.String) __local__22_11.get(__local__22_21));
                            __state = 67;
                            break;
                        }
                        //* (140)    	      if(adjPos.x < 0 || adjPos.x >= grid.width || adjPos.y < 0 || adjPos.y >= grid.height)
                        case 67: 
                        {
                            if (__local__22_22.x < 0 || __local__22_22.x >= __local__22_12.width || __local__22_22.y < 0 || __local__22_22.y >= __local__22_12.height) 
                                __state = 68;
                             else 
                                __state = 69;
                            break;
                        }
                        //* (141)    	         continue;
                        case 68: 
                        {
                            __breakLevel = 7;
                            __state = 87;
                            break;
                        }
                        //* (143)    	      PathNode adj = grid.getNode( adjPos );
                        case 69: 
                        {
                            __local__22_23 = __local__22_12.getNode(__local__22_22);
                            __state = 70;
                            break;
                        }
                        //* (146)    	      if (adj.obstacle) continue;
                        case 70: 
                        {
                            if (__local__22_23.obstacle) 
                                __state = 71;
                             else 
                                __state = 72;
                            break;
                        }
                        //* (146)    	      if (adj.obstacle) continue;
                        case 71: 
                        {
                            __breakLevel = 7;
                            __state = 87;
                            break;
                        }
                        //* (149)    	      int g = cur.g + 1;
                        case 72: 
                        {
                            __local__22_24 = __local__22_20.g + 1;
                            __state = 73;
                            break;
                        }
                        //* (150)    	      int h = adj.pos.getManhattanDist( dst );
                        case 73: 
                        {
                            __local__22_25 = __local__22_23.pos.getManhattanDist(__local__22_1);
                            __state = 74;
                            break;
                        }
                        //* (151)    	      int f = g + h;
                        case 74: 
                        {
                            __local__22_26 = __local__22_24 + __local__22_25;
                            __state = 75;
                            break;
                        }
                        //* (154)    	      if (adj.visited)
                        case 75: 
                        {
                            if (__local__22_23.visited) 
                                __state = 76;
                             else 
                                __state = 81;
                            break;
                        }
                        //* (158)                if (f < adj.f)
                        case 76: 
                        {
                            __breakLevel = 10;
                            if (__local__22_26 < __local__22_23.f) 
                                __state = 77;
                             else 
                                __state = 87;
                            break;
                        }
                        //* (161)                   adj.dir = (String) (GridPoint.getRelativeDirections( adj.pos, cur.pos )[0]);
                        case 77: 
                        {
                            __breakLevel = 12;
                            __state = 78;
                            //It is so  route from adjacent back to current

                            __local__22_23.dir = (java.lang.String) (rmit.ai.clima.gui.grid.GridPoint.getRelativeDirections(__local__22_23.pos,__local__22_20.pos)[0]);
                            break;
                        }
                        //* (162)                   adj.g = g;
                        case 78: 
                        {
                            __state = 79;
                            __local__22_23.g = __local__22_24;
                            break;
                        }
                        //* (163)                   adj.h = h;
                        case 79: 
                        {
                            __state = 80;
                            __local__22_23.h = __local__22_25;
                            break;
                        }
                        //* (164)                   adj.f = f;
                        case 80: 
                        {
                            __state = 87;
                            __local__22_23.f = __local__22_26;
                            break;
                        }
                        //* (170)                adj.dir = (String) ( GridPoint.getRelativeDirections( adj.pos, cur.pos )[0] );
                        case 81: 
                        {
                            __breakLevel = 10;
                            __state = 82;
                            //Haven't so route from adjacent back to current

                            __local__22_23.dir = (java.lang.String) (rmit.ai.clima.gui.grid.GridPoint.getRelativeDirections(__local__22_23.pos,__local__22_20.pos)[0]);
                            break;
                        }
                        //* (171)                adj.g = g;
                        case 82: 
                        {
                            __state = 83;
                            __local__22_23.g = __local__22_24;
                            break;
                        }
                        //* (172)                adj.h = h;
                        case 83: 
                        {
                            __state = 84;
                            __local__22_23.h = __local__22_25;
                            break;
                        }
                        //* (173)                adj.f = f;
                        case 84: 
                        {
                            __state = 85;
                            __local__22_23.f = __local__22_26;
                            break;
                        }
                        //* (174)                adj.visited = true;
                        case 85: 
                        {
                            __state = 86;
                            __local__22_23.visited = true;
                            break;
                        }
                        //* (175)                open.add( adj );
                        case 86: 
                        {
                            if (__local__22_18.add(__local__22_23)) 
                                __state = 87;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (135)    	   for (int a=0; a<adjacentDir.size(); ++a)
                        case 87: 
                        {
                            __state = 65;
                            ++__local__22_21;
                            break;
                        }
                        //* (180)    	   Collections.sort( open );
                        case 88: 
                        {
                            __state = 57;
                            //adjacent nodes

                            java.util.Collections.sort(__local__22_18);
                            break;
                        }
                        //* (185)       String moveHint = "";
                        case 89: 
                        {
                            __local__22_27 = "";
                            __state = 90;
                            break;
                        }
                        //* (186) 	   int pathLength = 0;
                        case 90: 
                        {
                            __local__22_28 = 0;
                            __state = 91;
                            break;
                        }
                        //* (187) 	   if(dstReached)
                        case 91: 
                        {
                            if (__local__22_19) 
                                __state = 92;
                             else 
                                __state = 104;
                            break;
                        }
                        //* (189)          PathNode dstNode = grid.getNode( dst );
                        case 92: 
                        {
                            __breakLevel = 2;
                            __local__22_29 = __local__22_12.getNode(__local__22_1);
                            __state = 93;
                            break;
                        }
                        //* (190)          PathNode srcNode = grid.getNode( src );
                        case 93: 
                        {
                            __local__22_30 = __local__22_12.getNode(__local__22_0);
                            __state = 94;
                            break;
                        }
                        //* (191)          PathNode prevNode = dstNode;
                        case 94: 
                        {
                            __local__22_31 = __local__22_29;
                            __state = 95;
                            break;
                        }
                        //* (192)          PathNode curNode = dstNode;
                        case 95: 
                        {
                            __local__22_32 = __local__22_29;
                            __state = 96;
                            break;
                        }
                        //* (194)          while (true)
                        case 96: 
                        {
                            if (true) 
                                __state = 97;
                             else 
                                __state = 103;
                            break;
                        }
                        //* (196)             pathLength++;
                        case 97: 
                        {
                            __breakLevel = 6;
                            __state = 98;
                            __local__22_28++ ;
                            break;
                        }
                        //* (197)             GridPoint prevPoint = curNode.pos.getFromDir(curNode.dir);
                        case 98: 
                        {
                            __local__22_33 = __local__22_32.pos.getFromDir(__local__22_32.dir);
                            __state = 99;
                            break;
                        }
                        //* (198)             prevNode = grid.getNode( prevPoint );
                        case 99: 
                        {
                            __state = 100;
                            __local__22_31 = __local__22_12.getNode(__local__22_33);
                            break;
                        }
                        //* (199)             if (prevNode == srcNode) break;
                        case 100: 
                        {
                            if (__local__22_31 == __local__22_30) 
                                __state = 101;
                             else 
                                __state = 102;
                            break;
                        }
                        //* (199)             if (prevNode == srcNode) break;
                        case 101: 
                        {
                            __breakLevel = 4;
                            __state = 103;
                            break;
                        }
                        //* (200)             curNode = prevNode;
                        case 102: 
                        {
                            __state = 96;
                            __local__22_32 = __local__22_31;
                            break;
                        }
                        //* (203)          moveHint = (String) ( prevNode.pos.getRelativeDirections( prevNode.pos, curNode.pos )[0] );
                        case 103: 
                        {
                            __state = 104;
                            __local__22_27 = (java.lang.String) (__local__22_31.pos.getRelativeDirections(__local__22_31.pos,__local__22_32.pos)[0]);
                            break;
                        }
                        //* (207)       bel_moveHint_dat.add( src.x, src.y, dst.x, dst.y, moveHint, pathLength );
                        case 104: 
                        {
                            __state = 105;
                            //Cache result and return via event

                            bel_moveHint_dat.add(__local__22_0.x,__local__22_0.y,__local__22_1.x,__local__22_1.y,__local__22_27,__local__22_28);
                            break;
                        }
                        //* (208)       efindpath_h.moveHint = moveHint;
                        case 105: 
                        {
                            __state = 106;
                            efindpath_h.moveHint = __local__22_27;
                            break;
                        }
                        //* (209)       efindpath_h.pathLength = pathLength;
                        case 106: 
                        {
                            __state = 107;
                            efindpath_h.pathLength = __local__22_28;
                            break;
                        }
                        //* (38) 	body()
                        case 107: 
                        {
                            if (__pending == null) 
                                __state = PASSED_STATE;
                            __tothrow = __pending;
                            break;
                        }
                    }
                }
                catch (java.lang.Throwable e) {
                    handleException(e,__exMap_body);
                }
            }
             while (!agent.changing_focus);
            return CONTINUE;
        }
        
        public java.lang.String methodName()
        {
            return "body";
        }
        
        __bodyFSM()
        {
        }
        
        public java.lang.String stateInfo()
        {
            int n = __curstate;
            java.lang.String file = __tt__body[0];
            java.lang.String method = __tt__body[1];
            if (n < 0) 
                n = -n;
            n -= (10 - 2);
            java.lang.String line = (n < 2)?"??":__tt__body[n];
            return file + ":" + line + " " + method + " [" + __curstate + "]";
        }
        
        public java.lang.Object genObject(int __index)
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Object Construction");
            return null;
        }
        
        public aos.jack.jak.cursor.Cursor genCursor(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
                case 0: 
                {
                    return (bel_moveHint_dat.getByEndPoints(__local__22_0.x,__local__22_0.y,__local__22_1.x,__local__22_1.y,__local__22_2,__local__22_3));
                }
                case 1: 
                {
                    return (bel_simulationProp_dat.getGridSize(__local__22_4,__local__22_5));
                }
                case 2: 
                {
                    return (bel_simulationProp_dat.getDepotLoc(__local__22_8,__local__22_9));
                }
                case 3: 
                {
                    return (bel_obstacleAt_dat.check(__local__22_13,__local__22_14));
                }
                case 4: 
                {
                    return (bel_playerPositions_dat.getByCoord(__local__22_16,__local__22_13,__local__22_14));
                }
            }
            aos.jack.jak.core.Jak.error("illegal Cursor Construction");
            return null;
        }
        
        public aos.jack.jak.fsm.FSM genFSM(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal FSM Construction");
            return null;
        }
        
        public boolean testCondition(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal test Construction");
            return false;
        }
        
        public aos.jack.jak.plan.Plan getPlan()
        {
            return rmit.ai.clima.jackagt.plans.PFindPath.this;
        }
        
        protected aos.jack.jak.fsm.FSM fail()
        {
            return getPlan().fail();
        }
        
        protected aos.jack.jak.fsm.FSM pass()
        {
            return getPlan().pass();
        }
        
        public void enter()
        {
            __trace = agent.trace("rmit.ai.clima.jackagt.plans.PFindPath.body");
        }
        
        public java.lang.Object getVariable(int n)
        {
            switch (n) {
                case 0: 
                {
                    return aos.util.ToObject.box(__local__22_0);
                }
                case 1: 
                {
                    return aos.util.ToObject.box(__local__22_1);
                }
                case 2: 
                {
                    return aos.util.ToObject.box(__local__22_2);
                }
                case 3: 
                {
                    return aos.util.ToObject.box(__local__22_3);
                }
                case 4: 
                {
                    return aos.util.ToObject.box(__local__22_4);
                }
                case 5: 
                {
                    return aos.util.ToObject.box(__local__22_5);
                }
                case 6: 
                {
                    return aos.util.ToObject.box(__local__22_6);
                }
                case 7: 
                {
                    return aos.util.ToObject.box(__local__22_7);
                }
                case 8: 
                {
                    return aos.util.ToObject.box(__local__22_8);
                }
                case 9: 
                {
                    return aos.util.ToObject.box(__local__22_9);
                }
                case 10: 
                {
                    return aos.util.ToObject.box(__local__22_10);
                }
                case 11: 
                {
                    return aos.util.ToObject.box(__local__22_11);
                }
                case 12: 
                {
                    return aos.util.ToObject.box(__local__22_12);
                }
                case 13: 
                {
                    return aos.util.ToObject.box(__local__22_13);
                }
                case 14: 
                {
                    return aos.util.ToObject.box(__local__22_14);
                }
                case 15: 
                {
                    return aos.util.ToObject.box(__local__22_15);
                }
                case 16: 
                {
                    return aos.util.ToObject.box(__local__22_16);
                }
                case 17: 
                {
                    return aos.util.ToObject.box(__local__22_17);
                }
                case 18: 
                {
                    return aos.util.ToObject.box(__local__22_18);
                }
                case 19: 
                {
                    return aos.util.ToObject.box(__local__22_19);
                }
                case 20: 
                {
                    return aos.util.ToObject.box(__local__22_20);
                }
                case 21: 
                {
                    return aos.util.ToObject.box(__local__22_21);
                }
                case 22: 
                {
                    return aos.util.ToObject.box(__local__22_22);
                }
                case 23: 
                {
                    return aos.util.ToObject.box(__local__22_23);
                }
                case 24: 
                {
                    return aos.util.ToObject.box(__local__22_24);
                }
                case 25: 
                {
                    return aos.util.ToObject.box(__local__22_25);
                }
                case 26: 
                {
                    return aos.util.ToObject.box(__local__22_26);
                }
                case 27: 
                {
                    return aos.util.ToObject.box(__local__22_27);
                }
                case 28: 
                {
                    return aos.util.ToObject.box(__local__22_28);
                }
                case 29: 
                {
                    return aos.util.ToObject.box(__local__22_29);
                }
                case 30: 
                {
                    return aos.util.ToObject.box(__local__22_30);
                }
                case 31: 
                {
                    return aos.util.ToObject.box(__local__22_31);
                }
                case 32: 
                {
                    return aos.util.ToObject.box(__local__22_32);
                }
                case 33: 
                {
                    return aos.util.ToObject.box(__local__22_33);
                }
                default: 
                {
                    throw new java.lang.IndexOutOfBoundsException("Reasoning Method " + methodName() + " does not have variable number " + n);
                }
            }
        }
        
        public java.lang.String[] variableNames()
        {
            return __fsmVariableNames_body;
        }
        
        public java.lang.String[] variableTypes()
        {
            return __fsmTypes_body;
        }
        
        public java.lang.String[] variableLocalNames()
        {
            return __fsmLocalNames_body;
        }
        
    }
}
