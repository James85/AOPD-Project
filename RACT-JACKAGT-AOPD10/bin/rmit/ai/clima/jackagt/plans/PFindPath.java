/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
  This code is generated by JAC version 5.4 by
  Agent Oriented Software. http://www.agent-software.com.au

    DO NOT ALTER THIS CODE AND DO NOT REMOVE THIS COMMENT
 *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
package rmit.ai.clima.jackagt.plans;
import aos.jack.jak.plan.Plan;
import aos.jack.jak.plan.PlanFSM;
import aos.jack.jak.plan.ExMap;
import aos.jack.jak.agent.NameSpace;
import aos.jack.jak.agent.Agent;
import aos.jack.jak.event.Event;
import aos.jack.jak.task.Task;
import aos.jack.jak.core.Generator;
import aos.jack.jak.logic.Signature;
import java.lang.Object;
import rmit.ai.clima.jackagt.events.EFindPath;
import rmit.ai.clima.jackagt.data.BMoveHint;
import rmit.ai.clima.jackagt.data.BObstacleAt;
import rmit.ai.clima.gui.grid.GridPoint;
import java.util.Vector;
import java.util.Collections;
import aos.jack.jak.cursor.Cursor;
import aos.jack.jak.fsm.FSM;
import aos.jack.jak.core.Jak;

public class PFindPath extends aos.jack.jak.plan.Plan {
    final static java.lang.String[] adjacentDir = {
            "left",
            "right",
            "up",
            "down"};
    public rmit.ai.clima.jackagt.events.EFindPath efindpath_h;
    public rmit.ai.clima.jackagt.data.BMoveHint bel_moveHint_dat;
    public rmit.ai.clima.jackagt.data.BObstacleAt bel_obstacleAt_dat;
    private static aos.jack.jak.plan.ExMap[] __exMap_body;
    private static java.lang.String[] __tt__body = {
            "rmit/ai/clima/jackagt/plans/PFindPath.plan",
            "body",
            "36",
            "37",
            "42",
            "43",
            "46",
            "47",
            "48",
            "48",
            "51",
            "52",
            "53",
            "55",
            "56",
            "56",
            "57",
            "57",
            "60",
            "62",
            "63",
            "57",
            "56",
            "69",
            "70",
            "71",
            "73",
            "74",
            "75",
            "78",
            "79",
            "83",
            "84",
            "87",
            "88",
            "90",
            "94",
            "94",
            "97",
            "99",
            "100",
            "102",
            "105",
            "105",
            "108",
            "109",
            "110",
            "113",
            "117",
            "120",
            "121",
            "122",
            "123",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "94",
            "139",
            "143",
            "145",
            "146",
            "147",
            "148",
            "150",
            "152",
            "153",
            "154",
            "155",
            "155",
            "156",
            "159",
            "160",
            "161",
            "162",
            "34"};
    private final static java.lang.String[] __planVariableNames = {
            "adjacentDir",
            "efindpath_h",
            "bel_moveHint_dat",
            "bel_obstacleAt_dat"};
    private final static java.lang.String[] __planVariableTypes = {
            "java.lang.String[]",
            "rmit.ai.clima.jackagt.events.EFindPath",
            "rmit.ai.clima.jackagt.data.BMoveHint",
            "rmit.ai.clima.jackagt.data.BObstacleAt"};
    private final static java.lang.String[] __reasoningMethods = {
            "body"};
    private final static java.lang.String[] __fsmVariableNames_body = {
            "width",
            "height",
            "src",
            "dst",
            "grid",
            "x",
            "y",
            "node",
            "root",
            "open",
            "dstReached",
            "cur",
            "a",
            "adjPos",
            "adj",
            "g",
            "h",
            "f",
            "dstNode",
            "srcNode",
            "prevNode",
            "curNode",
            "prevPoint",
            "moveDir"};
    private final static java.lang.String[] __fsmTypes_body = {
            "int",
            "int",
            "GridPoint",
            "GridPoint",
            "PathGrid",
            "int",
            "int",
            "PathNode",
            "PathNode",
            "Vector",
            "boolean",
            "PathNode",
            "int",
            "GridPoint",
            "PathNode",
            "int",
            "int",
            "int",
            "PathNode",
            "PathNode",
            "PathNode",
            "PathNode",
            "GridPoint",
            "String"};
    private final static java.lang.String[] __fsmLocalNames_body = {
            "__local__18_0",
            "__local__18_1",
            "__local__18_2",
            "__local__18_3",
            "__local__18_4",
            "__local__18_5",
            "__local__18_6",
            "__local__18_7",
            "__local__18_8",
            "__local__18_9",
            "__local__18_10",
            "__local__18_11",
            "__local__18_12",
            "__local__18_13",
            "__local__18_14",
            "__local__18_15",
            "__local__18_16",
            "__local__18_17",
            "__local__18_18",
            "__local__18_19",
            "__local__18_20",
            "__local__18_21",
            "__local__18_22",
            "__local__18_23"};
    public PFindPath()
    {
    }
    
    private PFindPath(aos.jack.jak.task.Task __t, rmit.ai.clima.jackagt.plans.PFindPath __env)
    {
        __agent = __env.__agent;
        __ns = __env.__ns;
        __planTask = __t;
        __logic = __t.logic;
        efindpath_h = __env.efindpath_h;
        bel_moveHint_dat = __env.bel_moveHint_dat;
        bel_obstacleAt_dat = __env.bel_obstacleAt_dat;
    }
    
    public boolean init_sentinel(aos.jack.jak.agent.NameSpace __a)
    {
        efindpath_h = (rmit.ai.clima.jackagt.events.EFindPath) __a.findEvent("rmit.ai.clima.jackagt.events.EFindPath");
        if (efindpath_h == null) {
            warning("Failed to find EFindPath efindpath_h");
            return false;
        }
        bel_moveHint_dat = (rmit.ai.clima.jackagt.data.BMoveHint) lookupNamedObject("bel_moveHint_dat","rmit.ai.clima.jackagt.data.BMoveHint",aos.jack.jak.agent.Agent.WRITEABLE);
        if (bel_moveHint_dat == null) {
            warning("Failed to find BMoveHint bel_moveHint_dat");
            return false;
        }
        bel_obstacleAt_dat = (rmit.ai.clima.jackagt.data.BObstacleAt) lookupNamedObject("bel_obstacleAt_dat","rmit.ai.clima.jackagt.data.BObstacleAt",0);
        if (bel_obstacleAt_dat == null) {
            warning("Failed to find BObstacleAt bel_obstacleAt_dat");
            return false;
        }
        return true;
    }
    
    public aos.jack.jak.plan.Plan freeze()
    {
        return this;
    }
    
    public aos.jack.jak.plan.Plan unfreeze()
    {
        return this;
    }
    
    public java.lang.Object genObject(int __index)
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Object Construction");
        return null;
    }
    
    public aos.jack.jak.cursor.Cursor genCursor(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Cursor Construction");
        return null;
    }
    
    public aos.jack.jak.fsm.FSM genFSM(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal FSM Construction");
        return null;
    }
    
    public boolean testCondition(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal test Construction");
        return false;
    }
    
    public aos.jack.jak.plan.PlanFSM body()
    {
        return new rmit.ai.clima.jackagt.plans.PFindPath.__bodyFSM();
    }
    
    private PFindPath(rmit.ai.clima.jackagt.events.EFindPath __ev, aos.jack.jak.task.Task __t, rmit.ai.clima.jackagt.plans.PFindPath __env)
    {
        this(__t,__env);
        this.efindpath_h = __ev;
    }
    
    protected aos.jack.jak.logic.Signature eventSignature(int __log)
    {
        return efindpath_h.getSignature(__log);
    }
    
    public java.lang.String handledEvent()
    {
        return "rmit.ai.clima.jackagt.events.EFindPath";
    }
    
    public boolean __relevant(aos.jack.jak.event.Event __e)
    {
        return __ns.isEnabled();
    }
    
    public aos.jack.jak.plan.Plan createPlan(aos.jack.jak.event.Event __e, aos.jack.jak.task.Task __t)
    {
        if (!(__e instanceof rmit.ai.clima.jackagt.events.EFindPath)) 
            return null;
        rmit.ai.clima.jackagt.events.EFindPath __e1 = (rmit.ai.clima.jackagt.events.EFindPath) __e;
        return new rmit.ai.clima.jackagt.plans.PFindPath(__e1,__t,this);
    }
    
    public java.lang.String[] variableNames()
    {
        return __planVariableNames;
    }
    
    public java.lang.String[] variableTypes()
    {
        return __planVariableTypes;
    }
    
    public java.lang.Object getVariable(int n)
    {
        switch (n) {
            case 0: 
            {
                return aos.util.ToObject.box(adjacentDir);
            }
            case 1: 
            {
                return aos.util.ToObject.box(efindpath_h);
            }
            case 2: 
            {
                return aos.util.ToObject.box(bel_moveHint_dat);
            }
            case 3: 
            {
                return aos.util.ToObject.box(bel_obstacleAt_dat);
            }
            default: 
            {
                throw new java.lang.IndexOutOfBoundsException("Plan " + this + " does not have variable number " + n);
            }
        }
    }
    
    public java.lang.String[] reasoningMethods()
    {
        return mergeReasoningMethods(__reasoningMethods,super.reasoningMethods());
    }
    
    public aos.jack.jak.cursor.Cursor context()
    {
        try {
            return (((true)?aos.jack.jak.cursor.Cursor.trueCursor:aos.jack.jak.cursor.Cursor.falseCursor));
        }
        catch (java.lang.Exception e) {
            e.printStackTrace();
            return aos.jack.jak.cursor.Cursor.falseCursor;
        }
    }
    
    class PathGrid extends java.lang.Object {
        public int width;
        public int height;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode[] grid;
        public PathGrid(int width, int height)
        {
            this.width = width;
            this.height = height;
            grid = new rmit.ai.clima.jackagt.plans.PFindPath.PathNode[width * height];
            for (int x = 0; x < width; ++x) {
                for (int y = 0; y < height; ++y) {
                    rmit.ai.clima.jackagt.plans.PFindPath.PathNode node = new rmit.ai.clima.jackagt.plans.PFindPath.PathNode();
                    node.pos.x = x;
                    node.pos.y = y;
                    grid[y * width + x] = node;
                }
            }
        }
        
        public rmit.ai.clima.jackagt.plans.PFindPath.PathNode getNode(int x, int y)
        {
            return grid[y * width + x];
        }
        
        public rmit.ai.clima.jackagt.plans.PFindPath.PathNode getNode(rmit.ai.clima.gui.grid.GridPoint pt)
        {
            return getNode(pt.x,pt.y);
        }
        
    }
    class PathNode extends java.lang.Object implements java.lang.Comparable {
        public boolean obstacle;
        public boolean visited;
        public rmit.ai.clima.gui.grid.GridPoint pos;
        public java.lang.String dir;
        public int g;
        public int h;
        public int f;
        public PathNode()
        {
            visited = false;
            obstacle = false;
            pos = new rmit.ai.clima.gui.grid.GridPoint();
            dir = "";
            g = 0;
            h = 0;
            f = 0;
        }
        
        public boolean equals(java.lang.Object o)
        {
            rmit.ai.clima.jackagt.plans.PFindPath.PathNode other = (rmit.ai.clima.jackagt.plans.PFindPath.PathNode) o;
            return (f == other.f);
        }
        
        public int compareTo(java.lang.Object o)
        {
            rmit.ai.clima.jackagt.plans.PFindPath.PathNode other = (rmit.ai.clima.jackagt.plans.PFindPath.PathNode) o;
            return other.f - f;
        }
        
    }
    class __bodyFSM extends aos.jack.jak.plan.PlanFSM implements aos.jack.jak.core.Generator {
        int __local__18_0;
        int __local__18_1;
        rmit.ai.clima.gui.grid.GridPoint __local__18_2;
        rmit.ai.clima.gui.grid.GridPoint __local__18_3;
        rmit.ai.clima.jackagt.plans.PFindPath.PathGrid __local__18_4;
        int __local__18_5;
        int __local__18_6;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__18_7;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__18_8;
        java.util.Vector __local__18_9;
        boolean __local__18_10;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__18_11;
        int __local__18_12;
        rmit.ai.clima.gui.grid.GridPoint __local__18_13;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__18_14;
        int __local__18_15;
        int __local__18_16;
        int __local__18_17;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__18_18;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__18_19;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__18_20;
        rmit.ai.clima.jackagt.plans.PFindPath.PathNode __local__18_21;
        rmit.ai.clima.gui.grid.GridPoint __local__18_22;
        java.lang.String __local__18_23;
        private int __breakLevel = 0;
        public int run(int __status)
            throws java.lang.Throwable
        {
            do {
                try {
                    if (__tothrow != null) 
                        throw __tothrow;
                    if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_PLANS) != 0) 
                        aos.util.logging.LogMsg.log(this,aos.jack.jak.core.Jak.LOG_PLANS,__task + "-PFindPath.body:" + java.lang.Integer.toString(__state));
                    if (__task.nsteps > 0) {
                        __task.nsteps-- ;
                        if (__task.nsteps == 0) 
                            agent.changeFocus();
                    }
                    if (__state < 10) {
                        __status = super.stdrun(rmit.ai.clima.jackagt.plans.PFindPath.this,__status);
                        if (__status != CONTINUE || agent.changing_focus) 
                            return __status;
                        continue;
                    }
                    __curstate = __state;
                    switch (__state) {
                        default: 
                        {
                            aos.jack.jak.core.Jak.error("PFindPath.body: Illegal state");
                            return FAILED_STATE;
                        }
                        //* (36) 	   int width = 51;
                        case 10: 
                        {
                            __breakLevel = 0;
                            __local__18_0 = 51;
                            __state = 11;
                            break;
                        }
                        //* (37) 	   int height = 51;
                        case 11: 
                        {
                            __local__18_1 = 51;
                            __state = 12;
                            break;
                        }
                        //* (42) 	   src = new GridPoint(efindpath_h.srcX, efindpath_h.srcY);
                        case 12: 
                        {
                            __state = 13;
                            __local__18_2 = new rmit.ai.clima.gui.grid.GridPoint(efindpath_h.srcX,efindpath_h.srcY);
                            break;
                        }
                        //* (43) 	   dst = new GridPoint(efindpath_h.dstX, efindpath_h.dstY);
                        case 13: 
                        {
                            __state = 14;
                            __local__18_3 = new rmit.ai.clima.gui.grid.GridPoint(efindpath_h.dstX,efindpath_h.dstY);
                            break;
                        }
                        //* (46)       if (src.equals(dst)) {
                        case 14: 
                        {
                            if (__local__18_2.equals(__local__18_3)) 
                                __state = 15;
                             else 
                                __state = 18;
                            break;
                        }
                        //* (47)          bel_moveHint_dat.add( src.x, src.y, dst.x, dst.y, "cur" );
                        case 15: 
                        {
                            __breakLevel = 2;
                            __state = 16;
                            bel_moveHint_dat.add(__local__18_2.x,__local__18_2.y,__local__18_3.x,__local__18_3.y,"cur");
                            break;
                        }
                        //* (48)          return true;
                        case 16: 
                        {
                            if (true) 
                                __state = 17;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (48)          return true;
                        case 17: 
                        {
                            __breakLevel = 0;
                            __state = 85;
                            break;
                        }
                        //* (51) 	  System.out.println("STARTING PATHFINDING");
                        case 18: 
                        {
                            __state = 19;
                            java.lang.System.out.println("STARTING PATHFINDING");
                            break;
                        }
                        //* (52)      System.out.println("Src " + src.x + ", "+ src.y);
                        case 19: 
                        {
                            __state = 20;
                            java.lang.System.out.println("Src " + __local__18_2.x + ", " + __local__18_2.y);
                            break;
                        }
                        //* (53)      System.out.println("Dst " + dst.x + ", "+ dst.y);
                        case 20: 
                        {
                            __state = 21;
                            java.lang.System.out.println("Dst " + __local__18_3.x + ", " + __local__18_3.y);
                            break;
                        }
                        //* (55) 	   PathGrid grid = new PathGrid( width,  height );
                        case 21: 
                        {
                            __local__18_4 = new rmit.ai.clima.jackagt.plans.PFindPath.PathGrid(__local__18_0,__local__18_1);
                            __state = 22;
                            break;
                        }
                        //* (56) 	   for (int x=0; x<width; ++x) {
                        case 22: 
                        {
                            __local__18_5 = 0;
                            __state = 23;
                            break;
                        }
                        //* (56) 	   for (int x=0; x<width; ++x) {
                        case 23: 
                        {
                            if (__local__18_5 < __local__18_0) 
                                __state = 24;
                             else 
                                __state = 31;
                            break;
                        }
                        //* (57) 	      for (int y=0; y<height; ++y) {
                        case 24: 
                        {
                            __breakLevel = 4;
                            __local__18_6 = 0;
                            __state = 25;
                            break;
                        }
                        //* (57) 	      for (int y=0; y<height; ++y) {
                        case 25: 
                        {
                            if (__local__18_6 < __local__18_1) 
                                __state = 26;
                             else 
                                __state = 30;
                            break;
                        }
                        //* (60) 	         if(bel_obstacleAt_dat.check( x, y ))
                        case 26: 
                        {
                            __breakLevel = 8;
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(0);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 27;
                             else 
                                __state = 29;
                            break;
                        }
                        //* (62) 	            PathNode node = grid.getNode( x, y ); 
                        case 27: 
                        {
                            __breakLevel = 10;
                            __local__18_7 = __local__18_4.getNode(__local__18_5,__local__18_6);
                            __state = 28;
                            break;
                        }
                        //* (63) 	            node.obstacle = true;
                        case 28: 
                        {
                            __state = 29;
                            __local__18_7.obstacle = true;
                            break;
                        }
                        //* (57) 	      for (int y=0; y<height; ++y) {
                        case 29: 
                        {
                            __state = 25;
                            ++__local__18_6;
                            break;
                        }
                        //* (56) 	   for (int x=0; x<width; ++x) {
                        case 30: 
                        {
                            __state = 23;
                            ++__local__18_5;
                            break;
                        }
                        //* (69) 	   PathNode root = grid.getNode( src );
                        case 31: 
                        {
                            __local__18_8 = __local__18_4.getNode(__local__18_2);
                            __state = 32;
                            break;
                        }
                        //* (70) 	   root.dir = "";
                        case 32: 
                        {
                            __state = 33;
                            __local__18_8.dir = "";
                            break;
                        }
                        //* (71) 	   root.visited = true;
                        case 33: 
                        {
                            __state = 34;
                            __local__18_8.visited = true;
                            break;
                        }
                        //* (73) 	   Vector open = new Vector();
                        case 34: 
                        {
                            __local__18_9 = new java.util.Vector();
                            __state = 35;
                            break;
                        }
                        //* (74) 	   open.add( root );
                        case 35: 
                        {
                            if (__local__18_9.add(__local__18_8)) 
                                __state = 36;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (75)       System.out.println("Root " + root.pos.x + ", "+ root.pos.y);
                        case 36: 
                        {
                            __state = 37;
                            java.lang.System.out.println("Root " + __local__18_8.pos.x + ", " + __local__18_8.pos.y);
                            break;
                        }
                        //* (78) 	   boolean dstReached = false; 
                        case 37: 
                        {
                            __local__18_10 = false;
                            __state = 38;
                            break;
                        }
                        //* (79) 	   while (!open.isEmpty())
                        case 38: 
                        {
                            if (!__local__18_9.isEmpty()) 
                                __state = 39;
                             else 
                                __state = 69;
                            break;
                        }
                        //* (83) 	      PathNode cur = (PathNode)open.lastElement();
                        case 39: 
                        {
                            __breakLevel = 4;
                            __local__18_11 = (rmit.ai.clima.jackagt.plans.PFindPath.PathNode) __local__18_9.lastElement();
                            __state = 40;
                            break;
                        }
                        //* (84) 	      open.remove( open.size() -1 );
                        case 40: 
                        {
                            __state = 41;
                            __local__18_9.remove(__local__18_9.size() - 1);
                            break;
                        }
                        //* (87) 	      if (cur.pos.x == dst.x && cur.pos.y == dst.y) {
                        case 41: 
                        {
                            if (__local__18_11.pos.x == __local__18_3.x && __local__18_11.pos.y == __local__18_3.y) 
                                __state = 42;
                             else 
                                __state = 44;
                            break;
                        }
                        //* (88) 	         dstReached = true;
                        case 42: 
                        {
                            __breakLevel = 6;
                            __state = 43;
                            __local__18_10 = true;
                            break;
                        }
                        //* (90) 	         break;
                        case 43: 
                        {
                            __breakLevel = 2;
                            __state = 69;
                            break;
                        }
                        //* (94)    	   for (int a=0; a<adjacentDir.length; ++a)
                        case 44: 
                        {
                            __local__18_12 = 0;
                            __state = 45;
                            break;
                        }
                        //* (94)    	   for (int a=0; a<adjacentDir.length; ++a)
                        case 45: 
                        {
                            if (__local__18_12 < adjacentDir.length) 
                                __state = 46;
                             else 
                                __state = 68;
                            break;
                        }
                        //* (97)    	      GridPoint adjPos = cur.pos.getFromDir( adjacentDir[a] );
                        case 46: 
                        {
                            __breakLevel = 8;
                            __local__18_13 = __local__18_11.pos.getFromDir(adjacentDir[__local__18_12]);
                            __state = 47;
                            break;
                        }
                        //* (99)    	      if(adjPos.x < 0 || adjPos.x >= grid.width || adjPos.y < 0 || adjPos.y >= grid.height)
                        case 47: 
                        {
                            if (__local__18_13.x < 0 || __local__18_13.x >= __local__18_4.width || __local__18_13.y < 0 || __local__18_13.y >= __local__18_4.height) 
                                __state = 48;
                             else 
                                __state = 49;
                            break;
                        }
                        //* (100)    	         continue;
                        case 48: 
                        {
                            __breakLevel = 7;
                            __state = 67;
                            break;
                        }
                        //* (102)    	      PathNode adj = grid.getNode( adjPos );
                        case 49: 
                        {
                            __local__18_14 = __local__18_4.getNode(__local__18_13);
                            __state = 50;
                            break;
                        }
                        //* (105)    	      if (adj.obstacle) continue;
                        case 50: 
                        {
                            if (__local__18_14.obstacle) 
                                __state = 51;
                             else 
                                __state = 52;
                            break;
                        }
                        //* (105)    	      if (adj.obstacle) continue;
                        case 51: 
                        {
                            __breakLevel = 7;
                            __state = 67;
                            break;
                        }
                        //* (108)    	      int g = cur.g + 1;
                        case 52: 
                        {
                            __local__18_15 = __local__18_11.g + 1;
                            __state = 53;
                            break;
                        }
                        //* (109)    	      int h = adj.pos.getManhattanDist( dst );
                        case 53: 
                        {
                            __local__18_16 = __local__18_14.pos.getManhattanDist(__local__18_3);
                            __state = 54;
                            break;
                        }
                        //* (110)    	      int f = g + h;
                        case 54: 
                        {
                            __local__18_17 = __local__18_15 + __local__18_16;
                            __state = 55;
                            break;
                        }
                        //* (113)    	      if (adj.visited)
                        case 55: 
                        {
                            if (__local__18_14.visited) 
                                __state = 56;
                             else 
                                __state = 61;
                            break;
                        }
                        //* (117)                if (f < adj.f)
                        case 56: 
                        {
                            __breakLevel = 10;
                            if (__local__18_17 < __local__18_14.f) 
                                __state = 57;
                             else 
                                __state = 67;
                            break;
                        }
                        //* (120)                   adj.dir = (String) (GridPoint.getRelativeDirections( adj.pos, cur.pos )[0]);
                        case 57: 
                        {
                            __breakLevel = 12;
                            __state = 58;
                            //It is so  route from adjacent back to current

                            __local__18_14.dir = (java.lang.String) (rmit.ai.clima.gui.grid.GridPoint.getRelativeDirections(__local__18_14.pos,__local__18_11.pos)[0]);
                            break;
                        }
                        //* (121)                   adj.g = g;
                        case 58: 
                        {
                            __state = 59;
                            __local__18_14.g = __local__18_15;
                            break;
                        }
                        //* (122)                   adj.h = h;
                        case 59: 
                        {
                            __state = 60;
                            __local__18_14.h = __local__18_16;
                            break;
                        }
                        //* (123)                   adj.f = f;
                        case 60: 
                        {
                            __state = 67;
                            __local__18_14.f = __local__18_17;
                            break;
                        }
                        //* (129)                adj.dir = (String) ( GridPoint.getRelativeDirections( adj.pos, cur.pos )[0] );
                        case 61: 
                        {
                            __breakLevel = 10;
                            __state = 62;
                            //Haven't so route from adjacent back to current

                            __local__18_14.dir = (java.lang.String) (rmit.ai.clima.gui.grid.GridPoint.getRelativeDirections(__local__18_14.pos,__local__18_11.pos)[0]);
                            break;
                        }
                        //* (130)                adj.g = g;
                        case 62: 
                        {
                            __state = 63;
                            __local__18_14.g = __local__18_15;
                            break;
                        }
                        //* (131)                adj.h = h;
                        case 63: 
                        {
                            __state = 64;
                            __local__18_14.h = __local__18_16;
                            break;
                        }
                        //* (132)                adj.f = f;
                        case 64: 
                        {
                            __state = 65;
                            __local__18_14.f = __local__18_17;
                            break;
                        }
                        //* (133)                adj.visited = true;
                        case 65: 
                        {
                            __state = 66;
                            __local__18_14.visited = true;
                            break;
                        }
                        //* (134)                open.add( adj );
                        case 66: 
                        {
                            if (__local__18_9.add(__local__18_14)) 
                                __state = 67;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (94)    	   for (int a=0; a<adjacentDir.length; ++a)
                        case 67: 
                        {
                            __state = 45;
                            ++__local__18_12;
                            break;
                        }
                        //* (139)    	   Collections.sort( open );
                        case 68: 
                        {
                            __state = 38;
                            //adjacent nodes

                            java.util.Collections.sort(__local__18_9);
                            break;
                        }
                        //* (143)       if(dstReached)
                        case 69: 
                        {
                            if (__local__18_10) 
                                __state = 70;
                             else 
                                __state = 85;
                            break;
                        }
                        //* (145)          PathNode dstNode = grid.getNode( dst );
                        case 70: 
                        {
                            __breakLevel = 2;
                            __local__18_18 = __local__18_4.getNode(__local__18_3);
                            __state = 71;
                            break;
                        }
                        //* (146)          PathNode srcNode = grid.getNode( src );
                        case 71: 
                        {
                            __local__18_19 = __local__18_4.getNode(__local__18_2);
                            __state = 72;
                            break;
                        }
                        //* (147)          PathNode prevNode = dstNode;
                        case 72: 
                        {
                            __local__18_20 = __local__18_18;
                            __state = 73;
                            break;
                        }
                        //* (148)          PathNode curNode = dstNode;
                        case 73: 
                        {
                            __local__18_21 = __local__18_18;
                            __state = 74;
                            break;
                        }
                        //* (150)          while (true)
                        case 74: 
                        {
                            if (true) 
                                __state = 75;
                             else 
                                __state = 81;
                            break;
                        }
                        //* (152)             System.out.println( "Backtrack " + curNode.pos.x + "," + curNode.pos.y );
                        case 75: 
                        {
                            __breakLevel = 6;
                            __state = 76;
                            java.lang.System.out.println("Backtrack " + __local__18_21.pos.x + "," + __local__18_21.pos.y);
                            break;
                        }
                        //* (153)             GridPoint prevPoint = curNode.pos.getFromDir(curNode.dir);
                        case 76: 
                        {
                            __local__18_22 = __local__18_21.pos.getFromDir(__local__18_21.dir);
                            __state = 77;
                            break;
                        }
                        //* (154)             prevNode = grid.getNode( prevPoint );
                        case 77: 
                        {
                            __state = 78;
                            __local__18_20 = __local__18_4.getNode(__local__18_22);
                            break;
                        }
                        //* (155)             if (prevNode == srcNode) break;
                        case 78: 
                        {
                            if (__local__18_20 == __local__18_19) 
                                __state = 79;
                             else 
                                __state = 80;
                            break;
                        }
                        //* (155)             if (prevNode == srcNode) break;
                        case 79: 
                        {
                            __breakLevel = 4;
                            __state = 81;
                            break;
                        }
                        //* (156)             curNode = prevNode;
                        case 80: 
                        {
                            __state = 74;
                            __local__18_21 = __local__18_20;
                            break;
                        }
                        //* (159)          System.out.println( "Cur " + curNode.pos.x + "," + curNode.pos.y );
                        case 81: 
                        {
                            __state = 82;
                            java.lang.System.out.println("Cur " + __local__18_21.pos.x + "," + __local__18_21.pos.y);
                            break;
                        }
                        //* (160)          System.out.println( "Prev " + prevNode.pos.x + "," + prevNode.pos.y );
                        case 82: 
                        {
                            __state = 83;
                            java.lang.System.out.println("Prev " + __local__18_20.pos.x + "," + __local__18_20.pos.y);
                            break;
                        }
                        //* (161)          String moveDir = (String) ( prevNode.pos.getRelativeDirections( prevNode.pos, curNode.pos )[0] );
                        case 83: 
                        {
                            __local__18_23 = (java.lang.String) (__local__18_20.pos.getRelativeDirections(__local__18_20.pos,__local__18_21.pos)[0]);
                            __state = 84;
                            break;
                        }
                        //* (162)          bel_moveHint_dat.add( src.x, src.y, dst.x, dst.y, moveDir );
                        case 84: 
                        {
                            __state = 85;
                            bel_moveHint_dat.add(__local__18_2.x,__local__18_2.y,__local__18_3.x,__local__18_3.y,__local__18_23);
                            break;
                        }
                        //* (34) 	body()
                        case 85: 
                        {
                            if (__pending == null) 
                                __state = PASSED_STATE;
                            __tothrow = __pending;
                            break;
                        }
                    }
                }
                catch (java.lang.Throwable e) {
                    handleException(e,__exMap_body);
                }
            }
             while (!agent.changing_focus);
            return CONTINUE;
        }
        
        public java.lang.String methodName()
        {
            return "body";
        }
        
        __bodyFSM()
        {
        }
        
        public java.lang.String stateInfo()
        {
            int n = __curstate;
            java.lang.String file = __tt__body[0];
            java.lang.String method = __tt__body[1];
            if (n < 0) 
                n = -n;
            n -= (10 - 2);
            java.lang.String line = (n < 2)?"??":__tt__body[n];
            return file + ":" + line + " " + method + " [" + __curstate + "]";
        }
        
        public java.lang.Object genObject(int __index)
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Object Construction");
            return null;
        }
        
        public aos.jack.jak.cursor.Cursor genCursor(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
                case 0: 
                {
                    return (bel_obstacleAt_dat.check(__local__18_5,__local__18_6));
                }
            }
            aos.jack.jak.core.Jak.error("illegal Cursor Construction");
            return null;
        }
        
        public aos.jack.jak.fsm.FSM genFSM(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal FSM Construction");
            return null;
        }
        
        public boolean testCondition(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal test Construction");
            return false;
        }
        
        public aos.jack.jak.plan.Plan getPlan()
        {
            return rmit.ai.clima.jackagt.plans.PFindPath.this;
        }
        
        protected aos.jack.jak.fsm.FSM fail()
        {
            return getPlan().fail();
        }
        
        protected aos.jack.jak.fsm.FSM pass()
        {
            return getPlan().pass();
        }
        
        public void enter()
        {
            __trace = agent.trace("rmit.ai.clima.jackagt.plans.PFindPath.body");
        }
        
        public java.lang.Object getVariable(int n)
        {
            switch (n) {
                case 0: 
                {
                    return aos.util.ToObject.box(__local__18_0);
                }
                case 1: 
                {
                    return aos.util.ToObject.box(__local__18_1);
                }
                case 2: 
                {
                    return aos.util.ToObject.box(__local__18_2);
                }
                case 3: 
                {
                    return aos.util.ToObject.box(__local__18_3);
                }
                case 4: 
                {
                    return aos.util.ToObject.box(__local__18_4);
                }
                case 5: 
                {
                    return aos.util.ToObject.box(__local__18_5);
                }
                case 6: 
                {
                    return aos.util.ToObject.box(__local__18_6);
                }
                case 7: 
                {
                    return aos.util.ToObject.box(__local__18_7);
                }
                case 8: 
                {
                    return aos.util.ToObject.box(__local__18_8);
                }
                case 9: 
                {
                    return aos.util.ToObject.box(__local__18_9);
                }
                case 10: 
                {
                    return aos.util.ToObject.box(__local__18_10);
                }
                case 11: 
                {
                    return aos.util.ToObject.box(__local__18_11);
                }
                case 12: 
                {
                    return aos.util.ToObject.box(__local__18_12);
                }
                case 13: 
                {
                    return aos.util.ToObject.box(__local__18_13);
                }
                case 14: 
                {
                    return aos.util.ToObject.box(__local__18_14);
                }
                case 15: 
                {
                    return aos.util.ToObject.box(__local__18_15);
                }
                case 16: 
                {
                    return aos.util.ToObject.box(__local__18_16);
                }
                case 17: 
                {
                    return aos.util.ToObject.box(__local__18_17);
                }
                case 18: 
                {
                    return aos.util.ToObject.box(__local__18_18);
                }
                case 19: 
                {
                    return aos.util.ToObject.box(__local__18_19);
                }
                case 20: 
                {
                    return aos.util.ToObject.box(__local__18_20);
                }
                case 21: 
                {
                    return aos.util.ToObject.box(__local__18_21);
                }
                case 22: 
                {
                    return aos.util.ToObject.box(__local__18_22);
                }
                case 23: 
                {
                    return aos.util.ToObject.box(__local__18_23);
                }
                default: 
                {
                    throw new java.lang.IndexOutOfBoundsException("Reasoning Method " + methodName() + " does not have variable number " + n);
                }
            }
        }
        
        public java.lang.String[] variableNames()
        {
            return __fsmVariableNames_body;
        }
        
        public java.lang.String[] variableTypes()
        {
            return __fsmTypes_body;
        }
        
        public java.lang.String[] variableLocalNames()
        {
            return __fsmLocalNames_body;
        }
        
    }
}
