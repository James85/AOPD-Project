package rmit.ai.clima.jackagt.plans;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;

import rmit.ai.clima.gui.grid.*;
import rmit.ai.clima.planinstanceinfo.ActType;

import rmit.ai.clima.interfaces.*;

import java.util.Random;
import aos.jack.jak.plan.PlanInstanceInfo;

public plan MoveRandomly extends Plan
{
   /******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: MoveRandomly
Description: Move to any cell arround that is known not to be obstructed
*/
	//Events handled by the plan are declared here.
	#sends event EGUIDebugMessage eguidebugmessage_s;

	#posts event EExecuteCLIMAaction eexecuteclimaaction_p;

	#handles event EAct eact_h;


	// Declarations of any beliefset/data that the plan accesses.
	#reads data ObstacleAt bel_obstacleAt_dat;

	#reads data CurrentPosition bel_currentPosition_dat;

	#reads data NumCarryingGold bel_numCarryingGold_dat;

	#reads data GoldAt bel_goldAt_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/

   final static String [] actions = { "left", "right", "up", "down" };
   Random random = new Random();

   // The enclosing agent or capability has to implement these interfaces
   #uses interface DebugInterface consoleIface;

   logical int $posX, $posY, $noGold;

   static boolean relevant(EAct ev)
   {
      return true;
   }

   context()
   {
      true;
   }

   #reasoning method
   body()
   {

      String dir = actions[ random.nextInt(4) ];	// pick a random direction

      eexecuteclimaaction_p.post(dir);	// Post an ExecuteClimaAction event to execute the action in the server

   }
}
