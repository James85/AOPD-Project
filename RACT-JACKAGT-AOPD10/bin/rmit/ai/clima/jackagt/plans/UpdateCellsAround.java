/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
  This code is generated by JAC version 5.4 by
  Agent Oriented Software. http://www.agent-software.com.au

    DO NOT ALTER THIS CODE AND DO NOT REMOVE THIS COMMENT
 *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
package rmit.ai.clima.jackagt.plans;
import aos.jack.jak.plan.Plan;
import aos.jack.jak.plan.PlanFSM;
import aos.jack.jak.plan.ExMap;
import aos.jack.jak.agent.NameSpace;
import aos.jack.jak.agent.Agent;
import aos.jack.jak.event.Event;
import aos.jack.jak.task.Task;
import aos.jack.jak.core.Generator;
import aos.jack.jak.logic.Signature;
import rmit.ai.clima.jackagt.events.EUpdateBel;
import rmit.ai.clima.jackagt.data.BGoldAt;
import rmit.ai.clima.jackagt.data.BObstacleAt;
import rmit.ai.clima.interfaces.DebugInterface;
import rmit.ai.clima.comms.Cell;
import rmit.ai.clima.gui.grid.GridPoint;
import aos.jack.jak.cursor.Cursor;
import java.lang.Object;
import aos.jack.jak.fsm.FSM;
import aos.jack.jak.core.Jak;

public class UpdateCellsAround extends aos.jack.jak.plan.Plan {
    public rmit.ai.clima.jackagt.events.EUpdateBel eupdatebel_h;
    public rmit.ai.clima.jackagt.data.BGoldAt bel_goldAt_dat;
    public rmit.ai.clima.jackagt.data.BObstacleAt bel_obstacleAt_dat;
    public rmit.ai.clima.interfaces.DebugInterface consoleIface;
    private static aos.jack.jak.plan.ExMap[] __exMap_body;
    private static java.lang.String[] __tt__body = {
            "rmit/ai/clima/jackagt/plans/UpdateCellsAround.plan",
            "body",
            "50",
            "51",
            "52",
            "53",
            "62",
            "64",
            "65",
            "65",
            "69",
            "70",
            "72",
            "73",
            "75",
            "75",
            "79",
            "83",
            "85",
            "90",
            "91",
            "93",
            "94",
            "103",
            "75",
            "106",
            "108",
            "65",
            "44"};
    private final static java.lang.String[] __planVariableNames = {
            "eupdatebel_h",
            "bel_goldAt_dat",
            "bel_obstacleAt_dat",
            "consoleIface"};
    private final static java.lang.String[] __planVariableTypes = {
            "rmit.ai.clima.jackagt.events.EUpdateBel",
            "rmit.ai.clima.jackagt.data.BGoldAt",
            "rmit.ai.clima.jackagt.data.BObstacleAt",
            "DebugInterface"};
    private final static java.lang.String[] __reasoningMethods = {
            "body"};
    private final static java.lang.String[] __fsmVariableNames_body = {
            "step",
            "posX",
            "posY",
            "cells",
            "locDir",
            "bFoundGold",
            "bUnknown",
            "$noGold",
            "i",
            "loc",
            "j"};
    private final static java.lang.String[] __fsmTypes_body = {
            "int",
            "int",
            "int",
            "Cell[]",
            "String",
            "boolean",
            "boolean",
            "logical int",
            "int",
            "GridPoint",
            "int"};
    private final static java.lang.String[] __fsmLocalNames_body = {
            "__local__28_0",
            "__local__28_1",
            "__local__28_2",
            "__local__28_3",
            "__local__28_4",
            "__local__28_5",
            "__local__28_6",
            "__local__28_7",
            "__local__28_8",
            "__local__28_9",
            "__local__28_10"};
    static boolean relevant(rmit.ai.clima.jackagt.events.EUpdateBel ev)
    {
        return true;
    }
    
    public UpdateCellsAround()
    {
    }
    
    private UpdateCellsAround(aos.jack.jak.task.Task __t, rmit.ai.clima.jackagt.plans.UpdateCellsAround __env)
    {
        __agent = __env.__agent;
        __ns = __env.__ns;
        __planTask = __t;
        __logic = __t.logic;
        eupdatebel_h = __env.eupdatebel_h;
        bel_goldAt_dat = __env.bel_goldAt_dat;
        bel_obstacleAt_dat = __env.bel_obstacleAt_dat;
        consoleIface = (rmit.ai.clima.interfaces.DebugInterface) __ns.getIF(rmit.ai.clima.interfaces.DebugInterface.class);
    }
    
    public boolean init_sentinel(aos.jack.jak.agent.NameSpace __a)
    {
        eupdatebel_h = (rmit.ai.clima.jackagt.events.EUpdateBel) __a.findEvent("rmit.ai.clima.jackagt.events.EUpdateBel");
        if (eupdatebel_h == null) {
            warning("Failed to find EUpdateBel eupdatebel_h");
            return false;
        }
        bel_goldAt_dat = (rmit.ai.clima.jackagt.data.BGoldAt) lookupNamedObject("bel_goldAt_dat","rmit.ai.clima.jackagt.data.BGoldAt",aos.jack.jak.agent.Agent.WRITEABLE);
        if (bel_goldAt_dat == null) {
            warning("Failed to find BGoldAt bel_goldAt_dat");
            return false;
        }
        bel_obstacleAt_dat = (rmit.ai.clima.jackagt.data.BObstacleAt) lookupNamedObject("bel_obstacleAt_dat","rmit.ai.clima.jackagt.data.BObstacleAt",aos.jack.jak.agent.Agent.WRITEABLE);
        if (bel_obstacleAt_dat == null) {
            warning("Failed to find BObstacleAt bel_obstacleAt_dat");
            return false;
        }
        return true;
    }
    
    public aos.jack.jak.plan.Plan freeze()
    {
        return this;
    }
    
    public aos.jack.jak.plan.Plan unfreeze()
    {
        return this;
    }
    
    public java.lang.Object genObject(int __index)
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Object Construction");
        return null;
    }
    
    public aos.jack.jak.cursor.Cursor genCursor(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Cursor Construction");
        return null;
    }
    
    public aos.jack.jak.fsm.FSM genFSM(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal FSM Construction");
        return null;
    }
    
    public boolean testCondition(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal test Construction");
        return false;
    }
    
    public aos.jack.jak.plan.PlanFSM body()
    {
        return new rmit.ai.clima.jackagt.plans.UpdateCellsAround.__bodyFSM();
    }
    
    private UpdateCellsAround(rmit.ai.clima.jackagt.events.EUpdateBel __ev, aos.jack.jak.task.Task __t, rmit.ai.clima.jackagt.plans.UpdateCellsAround __env)
    {
        this(__t,__env);
        this.eupdatebel_h = __ev;
    }
    
    protected aos.jack.jak.logic.Signature eventSignature(int __log)
    {
        return eupdatebel_h.getSignature(__log);
    }
    
    public java.lang.String handledEvent()
    {
        return "rmit.ai.clima.jackagt.events.EUpdateBel";
    }
    
    public boolean __relevant(aos.jack.jak.event.Event __e)
    {
        return __ns.isEnabled() && relevant(((rmit.ai.clima.jackagt.events.EUpdateBel) __e));
    }
    
    public aos.jack.jak.plan.Plan createPlan(aos.jack.jak.event.Event __e, aos.jack.jak.task.Task __t)
    {
        if (!(__e instanceof rmit.ai.clima.jackagt.events.EUpdateBel)) 
            return null;
        rmit.ai.clima.jackagt.events.EUpdateBel __e1 = (rmit.ai.clima.jackagt.events.EUpdateBel) __e;
        return new rmit.ai.clima.jackagt.plans.UpdateCellsAround(__e1,__t,this);
    }
    
    public java.lang.String[] variableNames()
    {
        return __planVariableNames;
    }
    
    public java.lang.String[] variableTypes()
    {
        return __planVariableTypes;
    }
    
    public java.lang.Object getVariable(int n)
    {
        switch (n) {
            case 0: 
            {
                return aos.util.ToObject.box(eupdatebel_h);
            }
            case 1: 
            {
                return aos.util.ToObject.box(bel_goldAt_dat);
            }
            case 2: 
            {
                return aos.util.ToObject.box(bel_obstacleAt_dat);
            }
            case 3: 
            {
                return aos.util.ToObject.box(consoleIface);
            }
            default: 
            {
                throw new java.lang.IndexOutOfBoundsException("Plan " + this + " does not have variable number " + n);
            }
        }
    }
    
    public java.lang.String[] reasoningMethods()
    {
        return mergeReasoningMethods(__reasoningMethods,super.reasoningMethods());
    }
    
    public aos.jack.jak.cursor.Cursor context()
    {
        try {
            return (((true)?aos.jack.jak.cursor.Cursor.trueCursor:aos.jack.jak.cursor.Cursor.falseCursor));
        }
        catch (java.lang.Exception e) {
            e.printStackTrace();
            return aos.jack.jak.cursor.Cursor.falseCursor;
        }
    }
    
    class __bodyFSM extends aos.jack.jak.plan.PlanFSM implements aos.jack.jak.core.Generator {
        int __local__28_0;
        int __local__28_1;
        int __local__28_2;
        rmit.ai.clima.comms.Cell[] __local__28_3;
        java.lang.String __local__28_4;
        boolean __local__28_5;
        boolean __local__28_6;
        aos.jack.jak.logic.IntegerVariable __local__28_7;
        int __local__28_8;
        rmit.ai.clima.gui.grid.GridPoint __local__28_9;
        int __local__28_10;
        private int __breakLevel = 0;
        public int run(int __status)
            throws java.lang.Throwable
        {
            do {
                try {
                    if (__tothrow != null) 
                        throw __tothrow;
                    if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_PLANS) != 0) 
                        aos.util.logging.LogMsg.log(this,aos.jack.jak.core.Jak.LOG_PLANS,__task + "-UpdateCellsAround.body:" + java.lang.Integer.toString(__state));
                    if (__task.nsteps > 0) {
                        __task.nsteps-- ;
                        if (__task.nsteps == 0) 
                            agent.changeFocus();
                    }
                    if (__state < 10) {
                        __status = super.stdrun(rmit.ai.clima.jackagt.plans.UpdateCellsAround.this,__status);
                        if (__status != CONTINUE || agent.changing_focus) 
                            return __status;
                        continue;
                    }
                    __curstate = __state;
                    switch (__state) {
                        default: 
                        {
                            aos.jack.jak.core.Jak.error("UpdateCellsAround.body: Illegal state");
                            return FAILED_STATE;
                        }
                        //* (50)       int step = eupdatebel_h.step;
                        case 10: 
                        {
                            __breakLevel = 0;
                            __local__28_0 = eupdatebel_h.step;
                            __state = 11;
                            break;
                        }
                        //* (51)       int posX = eupdatebel_h.currentPos.x;
                        case 11: 
                        {
                            __local__28_1 = eupdatebel_h.currentPos.x;
                            __state = 12;
                            break;
                        }
                        //* (52)       int posY = eupdatebel_h.currentPos.y;
                        case 12: 
                        {
                            __local__28_2 = eupdatebel_h.currentPos.y;
                            __state = 13;
                            break;
                        }
                        //* (53)       Cell[] cells = eupdatebel_h.cells;	// the array of adjacent cells
                        case 13: 
                        {
                            __local__28_3 = eupdatebel_h.cells;
                            __state = 14;
                            break;
                        }
                        //* (62)       logical int $noGold; 	//  logical int to retrieve the amount of gold this agent is carrying
                        case 14: 
                        {
                            __local__28_7 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __state = 15;
                            break;
                        }
                        //* (64)       System.out.println(getAgent().name() + "*&(#U&*(#$)#*$()#*$)(*#$&#)*$#)*$()#*(#)$" );
                        case 15: 
                        {
                            __state = 16;
                            //  logical int to retrieve the amount of gold this agent is carrying

                            java.lang.System.out.println(getAgent().name() + "*&(#U&*(#$)#*$()#*$)(*#$&#)*$#)*$()#*(#)$");
                            break;
                        }
                        //* (65)       for(int i=0; i < cells.length; i++) 
                        case 16: 
                        {
                            __local__28_8 = 0;
                            __state = 17;
                            break;
                        }
                        //* (65)       for(int i=0; i < cells.length; i++) 
                        case 17: 
                        {
                            if (__local__28_8 < __local__28_3.length) 
                                __state = 18;
                             else 
                                __state = 36;
                            break;
                        }
                        //* (69)          locDir = cells[i].id;	// first, get its direction (e.g., n, nw, s, se, etc.)
                        case 18: 
                        {
                            __breakLevel = 4;
                            __state = 19;
                            // interate on each cell
// Calculate the exact point of cells[i]: store it in GridPoint loc

                            __local__28_4 = __local__28_3[__local__28_8].id;
                            break;
                        }
                        //* (70)          GridPoint loc = GridPoint.getFromDir(posX, posY, locDir);
                        case 19: 
                        {
                            __local__28_9 = rmit.ai.clima.gui.grid.GridPoint.getFromDir(__local__28_1,__local__28_2,__local__28_4);
                            __state = 20;
                            break;
                        }
                        //* (72)          bFoundGold = false;	// Initially, assume the cell does not contain gold
                        case 20: 
                        {
                            __state = 21;
                            __local__28_5 = false;
                            break;
                        }
                        //* (73)          bUnknown = false;
                        case 21: 
                        {
                            __state = 22;
                            // Initially, assume the cell does not contain gold

                            __local__28_6 = false;
                            break;
                        }
                        //* (75)          for(int j = 0; j < cells[i].marks.length; j++) 
                        case 22: 
                        {
                            __local__28_10 = 0;
                            __state = 23;
                            break;
                        }
                        //* (75)          for(int j = 0; j < cells[i].marks.length; j++) 
                        case 23: 
                        {
                            if (__local__28_10 < __local__28_3[__local__28_8].marks.length) 
                                __state = 24;
                             else 
                                __state = 33;
                            break;
                        }
                        //* (79)             if( !(cells[i].marks[j].type.equalsIgnoreCase("unknown")) )
                        case 24: 
                        {
                            __breakLevel = 8;
                            if (!(__local__28_3[__local__28_8].marks[__local__28_10].type.equalsIgnoreCase("unknown"))) 
                                __state = 25;
                             else 
                                __state = 31;
                            break;
                        }
                        //* (83)                if( cells[i].marks[j].type.equalsIgnoreCase("obstacle") ) 
                        case 25: 
                        {
                            __breakLevel = 10;
                            if (__local__28_3[__local__28_8].marks[__local__28_10].type.equalsIgnoreCase("obstacle")) 
                                __state = 26;
                             else 
                                __state = 27;
                            break;
                        }
                        //* (85)                   bel_obstacleAt_dat.add(loc.x, loc.y, Cursor.TRUE);
                        case 26: 
                        {
                            __breakLevel = 12;
                            __state = 32;
                            bel_obstacleAt_dat.add(__local__28_9.x,__local__28_9.y,aos.jack.jak.cursor.Cursor.TRUE);
                            break;
                        }
                        //* (90)                   bel_obstacleAt_dat.add(loc.x, loc.y, Cursor.FALSE);
                        case 27: 
                        {
                            __breakLevel = 12;
                            __state = 28;
                            //if there is no obstacle then this will always be empty

                            bel_obstacleAt_dat.add(__local__28_9.x,__local__28_9.y,aos.jack.jak.cursor.Cursor.FALSE);
                            break;
                        }
                        //* (91)                   if( cells[i].marks[j].type.equalsIgnoreCase("gold"))
                        case 28: 
                        {
                            if (__local__28_3[__local__28_8].marks[__local__28_10].type.equalsIgnoreCase("gold")) 
                                __state = 29;
                             else 
                                __state = 32;
                            break;
                        }
                        //* (93)                      bFoundGold = true;
                        case 29: 
                        {
                            __breakLevel = 14;
                            __state = 30;
                            __local__28_5 = true;
                            break;
                        }
                        //* (94)                      bel_goldAt_dat.add(loc.x, loc.y, Cursor.TRUE);
                        case 30: 
                        {
                            __state = 32;
                            bel_goldAt_dat.add(__local__28_9.x,__local__28_9.y,aos.jack.jak.cursor.Cursor.TRUE);
                            break;
                        }
                        //* (103)                bUnknown = true;
                        case 31: 
                        {
                            __breakLevel = 10;
                            __state = 32;
                            // sensor returned "unknown" for this cell (noise in sensor)

                            __local__28_6 = true;
                            break;
                        }
                        //* (75)          for(int j = 0; j < cells[i].marks.length; j++) 
                        case 32: 
                        {
                            __state = 23;
                            __local__28_10++ ;
                            break;
                        }
                        //* (106)          if(!bFoundGold && !bUnknown )
                        case 33: 
                        {
                            if (!__local__28_5 && !__local__28_6) 
                                __state = 34;
                             else 
                                __state = 35;
                            break;
                        }
                        //* (108)             bel_goldAt_dat.add(loc.x,loc.y, Cursor.FALSE);
                        case 34: 
                        {
                            __breakLevel = 6;
                            __state = 35;
                            bel_goldAt_dat.add(__local__28_9.x,__local__28_9.y,aos.jack.jak.cursor.Cursor.FALSE);
                            break;
                        }
                        //* (65)       for(int i=0; i < cells.length; i++) 
                        case 35: 
                        {
                            __state = 17;
                            __local__28_8++ ;
                            break;
                        }
                        //* (44)    #reasoning method
                        case 36: 
                        {
                            if (__pending == null) 
                                __state = PASSED_STATE;
                            __tothrow = __pending;
                            break;
                        }
                    }
                }
                catch (java.lang.Throwable e) {
                    handleException(e,__exMap_body);
                }
            }
             while (!agent.changing_focus);
            return CONTINUE;
        }
        
        public java.lang.String methodName()
        {
            return "body";
        }
        
        __bodyFSM()
        {
        }
        
        public java.lang.String stateInfo()
        {
            int n = __curstate;
            java.lang.String file = __tt__body[0];
            java.lang.String method = __tt__body[1];
            if (n < 0) 
                n = -n;
            n -= (10 - 2);
            java.lang.String line = (n < 2)?"??":__tt__body[n];
            return file + ":" + line + " " + method + " [" + __curstate + "]";
        }
        
        public java.lang.Object genObject(int __index)
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Object Construction");
            return null;
        }
        
        public aos.jack.jak.cursor.Cursor genCursor(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Cursor Construction");
            return null;
        }
        
        public aos.jack.jak.fsm.FSM genFSM(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal FSM Construction");
            return null;
        }
        
        public boolean testCondition(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal test Construction");
            return false;
        }
        
        public aos.jack.jak.plan.Plan getPlan()
        {
            return rmit.ai.clima.jackagt.plans.UpdateCellsAround.this;
        }
        
        protected aos.jack.jak.fsm.FSM fail()
        {
            return getPlan().fail();
        }
        
        protected aos.jack.jak.fsm.FSM pass()
        {
            return getPlan().pass();
        }
        
        public void enter()
        {
            __trace = agent.trace("rmit.ai.clima.jackagt.plans.UpdateCellsAround.body");
        }
        
        public java.lang.Object getVariable(int n)
        {
            switch (n) {
                case 0: 
                {
                    return aos.util.ToObject.box(__local__28_0);
                }
                case 1: 
                {
                    return aos.util.ToObject.box(__local__28_1);
                }
                case 2: 
                {
                    return aos.util.ToObject.box(__local__28_2);
                }
                case 3: 
                {
                    return aos.util.ToObject.box(__local__28_3);
                }
                case 4: 
                {
                    return aos.util.ToObject.box(__local__28_4);
                }
                case 5: 
                {
                    return aos.util.ToObject.box(__local__28_5);
                }
                case 6: 
                {
                    return aos.util.ToObject.box(__local__28_6);
                }
                case 7: 
                {
                    return aos.util.ToObject.box(__local__28_7);
                }
                case 8: 
                {
                    return aos.util.ToObject.box(__local__28_8);
                }
                case 9: 
                {
                    return aos.util.ToObject.box(__local__28_9);
                }
                case 10: 
                {
                    return aos.util.ToObject.box(__local__28_10);
                }
                default: 
                {
                    throw new java.lang.IndexOutOfBoundsException("Reasoning Method " + methodName() + " does not have variable number " + n);
                }
            }
        }
        
        public java.lang.String[] variableNames()
        {
            return __fsmVariableNames_body;
        }
        
        public java.lang.String[] variableTypes()
        {
            return __fsmTypes_body;
        }
        
        public java.lang.String[] variableLocalNames()
        {
            return __fsmLocalNames_body;
        }
        
    }
}
