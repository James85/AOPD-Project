package rmit.ai.clima.jackagt.plans;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;
import rmit.ai.clima.gui.grid.GridPoint;
import rmit.ai.clima.jackagt.PlayerGold;
import java.util.*;

public plan PUpdateState extends Plan
{
/******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: PUpdateState
*/
	//Events handled by the plan are declared here.
	#sends event MERequestCellInfo merequestcellinfo_s;

	#sends event MEReportPlayerState mereportplayerstate_s;

	#posts event EExecuteAction eexecuteaction_p;

	#sends event MERequestPathfinding merequestpathfinding_s;

	#handles event MEPlayerPerceptsAssimilated meplayerperceptsassimilated_h;


	// Declarations of any beliefset/data that the plan accesses.
	#modifies data BCurrentState bel_currentState_dat;

	#modifies data BCurrentPosition bel_currentTarget_dat;

	#reads data BNumCarryingGold bel_numCarryingGold_dat;

	#reads data SimulationProp bel_simulationProp_dat;

	#reads data BCurrentPath bel_currentPath_dat;

	#reads data BCurrentPosition bel_currentPosition_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/

	static boolean relevant(MEPlayerPerceptsAssimilated e)
	{
	   return true;
	}
	
	context()
	{
		true;
	}
	
	  #reasoning method fail()
	   {
	       System.out.println("OMGZORS ===========DickZilla : PUpdateState");
	   }

	//#reasoning method
	body()
	{
		logical String $state;
		logical int $posX, $posY, $targetX, $targetY;
		logical int $numGold;

		bel_currentState_dat.get( $state );
	   bel_currentPosition_dat.get( $posX, $posY );
	   bel_currentTarget_dat.get( $targetX, $targetY );
	   bel_numCarryingGold_dat.get( $numGold );
	   Vector path = bel_currentPath_dat.getPath();
	   boolean reachable = bel_currentPath_dat.getReachable();
      
      String state = $state.as_string();
	   GridPoint pos = new GridPoint( $posX.as_int(), $posY.as_int() );
	   GridPoint target = new GridPoint( $targetX.as_int(), $targetY.as_int() );
	   
      System.out.println( getAgent().name() + " My pos: " + pos.x + "," + pos.y );
	   System.out.println( getAgent().name() + " My target: " + target.x + "," + target.y );
	   System.out.println( getAgent().name() + " My path length: " + path.size() );
      System.out.println( getAgent().name() + " My initial state: " + state);
	   
	   
	   //Check if last move was successful and remove point
	   if (path.size() > 0) {
	      if (pos.equals( (GridPoint) path.lastElement() )) {
	         path.remove( path.size()-1 );
	         bel_currentPath_dat.add( path, reachable );
	      }
	   }
	   
      //Check if our position adjacent to next point (otherwise somethings wrong)
      if (path.size() > 0) {
         if (pos.getManhattanDist( (GridPoint) path.lastElement() ) > 1) {
            System.out.println( getAgent().name() + " Next point in path NOT ADJACENT!!!");
            bel_currentState_dat.add("idle");
            state = "idle";
         }
      }
	   
	   
	   MEReturnCellInfo cellInfoReply;
	   if (! state.equals("idle"))
	   {
   	   //Request fresh info about target cell from the coordinator
         MERequestCellInfo cellInfoRequest = merequestcellinfo_s.send( target );
         @send( "boss", cellInfoRequest );
         @wait_for( cellInfoRequest.replied() );
         cellInfoReply = (MEReturnCellInfo) cellInfoRequest.getReply();
	   }
      
      //Check current state
      if(state.equals("gold") )
		{
		   //If we have MAX_GOLD set state to depot
		   if($numGold.as_int() >= 2)
		   {
		      logical int $depotX, $depotY;
		      bel_simulationProp_dat.getDepotLoc( $depotX, $depotY );
		      
		      bel_currentTarget_dat.add( $depotX.as_int(), $depotY.as_int() );
		      target = new GridPoint( $depotX.as_int(), $depotY.as_int() );
		      
            bel_currentState_dat.add("depot");
            state = "depot";
		   }
		   
         //If gold removed set state to idle
		   else if (!cellInfoReply.hasGold)
		   {
		      bel_currentState_dat.add("idle");
		      state = "idle";
		   }
		}
		else if(state.equals("depot") )
		{
   	   //If gold dropped set state to idle
		   if ($numGold.as_int() == 0) {
            bel_currentState_dat.add( "idle" );
            state = "idle";
		   }
		}
		else if(state.equals("explore") )
		{
		   //If target became explored set state to idle
		   if (cellInfoReply.isExplored) {
            bel_currentState_dat.add("idle");
            state = "idle";
		   }
		}
      
      MEReturnPathfinding findPathReply;
      if (! state.equals("idle"))
      //if (state.equals("depot"))
      {
         //Request fresh info about path from the coordinator
         MERequestPathfinding findPathRequest = merequestpathfinding_s.send( pos, target );
         @send( "boss", findPathRequest );
         @wait_for( findPathRequest.replied() );
         findPathReply = (MEReturnPathfinding) findPathRequest.getReply();
         
         //Update path info with fresh data if reachable
         if (findPathReply.reachable) {
            bel_currentPath_dat.add( findPathReply.path, findPathReply.reachable );
            path = findPathReply.path;
            reachable = findPathReply.reachable;
         }
      }
		
		//Send our state to coordinator
		@send("boss", mereportplayerstate_s.send( getAgent().name(), state, target ));
	}
}
