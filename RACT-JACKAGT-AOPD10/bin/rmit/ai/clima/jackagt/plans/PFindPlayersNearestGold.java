/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
  This code is generated by JAC version 5.4 by
  Agent Oriented Software. http://www.agent-software.com.au

    DO NOT ALTER THIS CODE AND DO NOT REMOVE THIS COMMENT
 *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
package rmit.ai.clima.jackagt.plans;
import aos.jack.jak.plan.Plan;
import aos.jack.jak.plan.PlanFSM;
import aos.jack.jak.plan.ExMap;
import aos.jack.jak.agent.NameSpace;
import aos.jack.jak.agent.Agent;
import aos.jack.jak.event.Event;
import aos.jack.jak.task.Task;
import aos.jack.jak.core.Generator;
import aos.jack.jak.cursor.Cursor;
import aos.jack.jak.logic.Signature;
import java.lang.Object;
import rmit.ai.clima.jackagt.events.EFindPath;
import rmit.ai.clima.jackagt.events.EFindClosestGold;
import rmit.ai.clima.jackagt.data.BPlayerClosestGold;
import rmit.ai.clima.jackagt.data.BGoldAt;
import rmit.ai.clima.jackagt.data.BPlayer;
import rmit.ai.clima.jackagt.data.BPlayerState;
import rmit.ai.clima.jackagt.data.BMoveHint;
import rmit.ai.clima.jackagt.data.BPlayerPosition;
import java.util.Vector;
import rmit.ai.clima.gui.grid.GridPoint;
import java.util.Collections;
import aos.jack.jak.fsm.FSM;
import aos.jack.jak.core.Jak;

public class PFindPlayersNearestGold extends aos.jack.jak.plan.Plan {
    public rmit.ai.clima.jackagt.events.EFindPath efindpath_p;
    public rmit.ai.clima.jackagt.events.EFindClosestGold efindclosestgold_h;
    public rmit.ai.clima.jackagt.data.BPlayerClosestGold bel_playerClosestGold_dat;
    public rmit.ai.clima.jackagt.data.BGoldAt bel_goldAt_dat;
    public rmit.ai.clima.jackagt.data.BPlayer bel_players_dat;
    public rmit.ai.clima.jackagt.data.BPlayerState bel_playerState_dat;
    public rmit.ai.clima.jackagt.data.BMoveHint bel_moveHint_dat;
    public rmit.ai.clima.jackagt.data.BPlayerPosition bel_playerPositions_dat;
    private static aos.jack.jak.plan.ExMap[] __exMap_body;
    private static java.lang.String[] __tt__body = {
            "rmit/ai/clima/jackagt/plans/PFindPlayersNearestGold.plan",
            "body",
            "45",
            "46",
            "47",
            "49",
            "50",
            "53",
            "54",
            "56",
            "57",
            "59",
            "60",
            "63",
            "64",
            "65",
            "68",
            "69",
            "71",
            "74",
            "75",
            "76",
            "77",
            "78",
            "78",
            "81",
            "82",
            "83",
            "84",
            "85",
            "89",
            "92",
            "93",
            "97",
            "100",
            "100",
            "103",
            "104",
            "105",
            "105",
            "107",
            "108",
            "109",
            "105",
            "111",
            "112",
            "114",
            "115",
            "100",
            "42"};
    private final static java.lang.String[] __planVariableNames = {
            "efindpath_p",
            "efindclosestgold_h",
            "bel_playerClosestGold_dat",
            "bel_goldAt_dat",
            "bel_players_dat",
            "bel_playerState_dat",
            "bel_moveHint_dat",
            "bel_playerPositions_dat"};
    private final static java.lang.String[] __planVariableTypes = {
            "rmit.ai.clima.jackagt.events.EFindPath",
            "EFindClosestGold",
            "rmit.ai.clima.jackagt.data.BPlayerClosestGold",
            "rmit.ai.clima.jackagt.data.BGoldAt",
            "rmit.ai.clima.jackagt.data.BPlayer",
            "rmit.ai.clima.jackagt.data.BPlayerState",
            "rmit.ai.clima.jackagt.data.BMoveHint",
            "rmit.ai.clima.jackagt.data.BPlayerPosition"};
    private final static java.lang.String[] __reasoningMethods = {
            "body"};
    private final static java.lang.String[] __fsmVariableNames_body = {
            "distances",
            "playerAssigned",
            "usedDistances",
            "$name",
            "c_player",
            "playerId",
            "$state",
            "$playerX",
            "$playerY",
            "playerPos",
            "$goldX",
            "$goldY",
            "c_gold",
            "$pathLength",
            "$moveHint",
            "pg",
            "i",
            "b_discard",
            "pg",
            "j",
            "pg2"};
    private final static java.lang.String[] __fsmTypes_body = {
            "Vector",
            "boolean[]",
            "Vector",
            "logical String",
            "Cursor",
            "int",
            "logical String",
            "logical int",
            "logical int",
            "GridPoint",
            "logical int",
            "logical int",
            "Cursor",
            "logical int",
            "logical String",
            "PlayerGold",
            "int",
            "boolean",
            "PlayerGold",
            "int",
            "PlayerGold"};
    private final static java.lang.String[] __fsmLocalNames_body = {
            "__local__23_0",
            "__local__23_1",
            "__local__23_2",
            "__local__23_3",
            "__local__23_4",
            "__local__23_5",
            "__local__23_6",
            "__local__23_7",
            "__local__23_8",
            "__local__23_9",
            "__local__23_10",
            "__local__23_11",
            "__local__23_12",
            "__local__23_13",
            "__local__23_14",
            "__local__23_15",
            "__local__23_16",
            "__local__23_17",
            "__local__23_18",
            "__local__23_19",
            "__local__23_20"};
    public PFindPlayersNearestGold()
    {
    }
    
    private PFindPlayersNearestGold(aos.jack.jak.task.Task __t, rmit.ai.clima.jackagt.plans.PFindPlayersNearestGold __env)
    {
        __agent = __env.__agent;
        __ns = __env.__ns;
        __planTask = __t;
        __logic = __t.logic;
        efindpath_p = __env.efindpath_p;
        efindclosestgold_h = __env.efindclosestgold_h;
        bel_playerClosestGold_dat = __env.bel_playerClosestGold_dat;
        bel_goldAt_dat = __env.bel_goldAt_dat;
        bel_players_dat = __env.bel_players_dat;
        bel_playerState_dat = __env.bel_playerState_dat;
        bel_moveHint_dat = __env.bel_moveHint_dat;
        bel_playerPositions_dat = __env.bel_playerPositions_dat;
    }
    
    public boolean init_sentinel(aos.jack.jak.agent.NameSpace __a)
    {
        efindpath_p = (rmit.ai.clima.jackagt.events.EFindPath) __a.findEvent("rmit.ai.clima.jackagt.events.EFindPath");
        if (efindpath_p == null) {
            warning("Failed to find EFindPath efindpath_p");
            return false;
        }
        efindclosestgold_h = (rmit.ai.clima.jackagt.events.EFindClosestGold) __a.findEvent("rmit.ai.clima.jackagt.events.EFindClosestGold");
        if (efindclosestgold_h == null) {
            warning("Failed to find EFindClosestGold efindclosestgold_h");
            return false;
        }
        bel_playerClosestGold_dat = (rmit.ai.clima.jackagt.data.BPlayerClosestGold) lookupNamedObject("bel_playerClosestGold_dat","rmit.ai.clima.jackagt.data.BPlayerClosestGold",aos.jack.jak.agent.Agent.WRITEABLE);
        if (bel_playerClosestGold_dat == null) {
            warning("Failed to find BPlayerClosestGold bel_playerClosestGold_dat");
            return false;
        }
        bel_goldAt_dat = (rmit.ai.clima.jackagt.data.BGoldAt) lookupNamedObject("bel_goldAt_dat","rmit.ai.clima.jackagt.data.BGoldAt",0);
        if (bel_goldAt_dat == null) {
            warning("Failed to find BGoldAt bel_goldAt_dat");
            return false;
        }
        bel_players_dat = (rmit.ai.clima.jackagt.data.BPlayer) lookupNamedObject("bel_players_dat","rmit.ai.clima.jackagt.data.BPlayer",0);
        if (bel_players_dat == null) {
            warning("Failed to find BPlayer bel_players_dat");
            return false;
        }
        bel_playerState_dat = (rmit.ai.clima.jackagt.data.BPlayerState) lookupNamedObject("bel_playerState_dat","rmit.ai.clima.jackagt.data.BPlayerState",0);
        if (bel_playerState_dat == null) {
            warning("Failed to find BPlayerState bel_playerState_dat");
            return false;
        }
        bel_moveHint_dat = (rmit.ai.clima.jackagt.data.BMoveHint) lookupNamedObject("bel_moveHint_dat","rmit.ai.clima.jackagt.data.BMoveHint",0);
        if (bel_moveHint_dat == null) {
            warning("Failed to find BMoveHint bel_moveHint_dat");
            return false;
        }
        bel_playerPositions_dat = (rmit.ai.clima.jackagt.data.BPlayerPosition) lookupNamedObject("bel_playerPositions_dat","rmit.ai.clima.jackagt.data.BPlayerPosition",0);
        if (bel_playerPositions_dat == null) {
            warning("Failed to find BPlayerPosition bel_playerPositions_dat");
            return false;
        }
        return true;
    }
    
    public aos.jack.jak.plan.Plan freeze()
    {
        return this;
    }
    
    public aos.jack.jak.plan.Plan unfreeze()
    {
        return this;
    }
    
    public java.lang.Object genObject(int __index)
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Object Construction");
        return null;
    }
    
    public aos.jack.jak.cursor.Cursor genCursor(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Cursor Construction");
        return null;
    }
    
    public aos.jack.jak.fsm.FSM genFSM(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal FSM Construction");
        return null;
    }
    
    public boolean testCondition(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal test Construction");
        return false;
    }
    
    public aos.jack.jak.plan.PlanFSM body()
    {
        return new rmit.ai.clima.jackagt.plans.PFindPlayersNearestGold.__bodyFSM();
    }
    
    private PFindPlayersNearestGold(rmit.ai.clima.jackagt.events.EFindClosestGold __ev, aos.jack.jak.task.Task __t, rmit.ai.clima.jackagt.plans.PFindPlayersNearestGold __env)
    {
        this(__t,__env);
        this.efindclosestgold_h = __ev;
    }
    
    protected aos.jack.jak.logic.Signature eventSignature(int __log)
    {
        return efindclosestgold_h.getSignature(__log);
    }
    
    public java.lang.String handledEvent()
    {
        return "rmit.ai.clima.jackagt.events.EFindClosestGold";
    }
    
    public boolean __relevant(aos.jack.jak.event.Event __e)
    {
        return __ns.isEnabled();
    }
    
    public aos.jack.jak.plan.Plan createPlan(aos.jack.jak.event.Event __e, aos.jack.jak.task.Task __t)
    {
        if (!(__e instanceof rmit.ai.clima.jackagt.events.EFindClosestGold)) 
            return null;
        rmit.ai.clima.jackagt.events.EFindClosestGold __e1 = (rmit.ai.clima.jackagt.events.EFindClosestGold) __e;
        return new rmit.ai.clima.jackagt.plans.PFindPlayersNearestGold(__e1,__t,this);
    }
    
    public java.lang.String[] variableNames()
    {
        return __planVariableNames;
    }
    
    public java.lang.String[] variableTypes()
    {
        return __planVariableTypes;
    }
    
    public java.lang.Object getVariable(int n)
    {
        switch (n) {
            case 0: 
            {
                return aos.util.ToObject.box(efindpath_p);
            }
            case 1: 
            {
                return aos.util.ToObject.box(efindclosestgold_h);
            }
            case 2: 
            {
                return aos.util.ToObject.box(bel_playerClosestGold_dat);
            }
            case 3: 
            {
                return aos.util.ToObject.box(bel_goldAt_dat);
            }
            case 4: 
            {
                return aos.util.ToObject.box(bel_players_dat);
            }
            case 5: 
            {
                return aos.util.ToObject.box(bel_playerState_dat);
            }
            case 6: 
            {
                return aos.util.ToObject.box(bel_moveHint_dat);
            }
            case 7: 
            {
                return aos.util.ToObject.box(bel_playerPositions_dat);
            }
            default: 
            {
                throw new java.lang.IndexOutOfBoundsException("Plan " + this + " does not have variable number " + n);
            }
        }
    }
    
    public java.lang.String[] reasoningMethods()
    {
        return mergeReasoningMethods(__reasoningMethods,super.reasoningMethods());
    }
    
    public aos.jack.jak.cursor.Cursor context()
    {
        try {
            return (((true)?aos.jack.jak.cursor.Cursor.trueCursor:aos.jack.jak.cursor.Cursor.falseCursor));
        }
        catch (java.lang.Exception e) {
            e.printStackTrace();
            return aos.jack.jak.cursor.Cursor.falseCursor;
        }
    }
    
    class PlayerGold extends java.lang.Object implements java.lang.Comparable {
        public int playerId;
        public java.lang.String name;
        public rmit.ai.clima.gui.grid.GridPoint pos;
        public int dist;
        public boolean equals(java.lang.Object obj)
        {
            rmit.ai.clima.jackagt.plans.PFindPlayersNearestGold.PlayerGold pg = (rmit.ai.clima.jackagt.plans.PFindPlayersNearestGold.PlayerGold) obj;
            return pg.dist == this.dist;
        }
        
        public int compareTo(java.lang.Object obj)
        {
            rmit.ai.clima.jackagt.plans.PFindPlayersNearestGold.PlayerGold pg = (rmit.ai.clima.jackagt.plans.PFindPlayersNearestGold.PlayerGold) obj;
            return (this.dist - pg.dist);
        }
        
    }
    class __bodyFSM extends aos.jack.jak.plan.PlanFSM implements aos.jack.jak.core.Generator {
        java.util.Vector __local__23_0;
        boolean[] __local__23_1;
        java.util.Vector __local__23_2;
        aos.jack.jak.logic.StringVariable __local__23_3;
        aos.jack.jak.cursor.Cursor __local__23_4;
        int __local__23_5;
        aos.jack.jak.logic.StringVariable __local__23_6;
        aos.jack.jak.logic.IntegerVariable __local__23_7;
        aos.jack.jak.logic.IntegerVariable __local__23_8;
        rmit.ai.clima.gui.grid.GridPoint __local__23_9;
        aos.jack.jak.logic.IntegerVariable __local__23_10;
        aos.jack.jak.logic.IntegerVariable __local__23_11;
        aos.jack.jak.cursor.Cursor __local__23_12;
        aos.jack.jak.logic.IntegerVariable __local__23_13;
        aos.jack.jak.logic.StringVariable __local__23_14;
        rmit.ai.clima.jackagt.plans.PFindPlayersNearestGold.PlayerGold __local__23_15;
        int __local__23_16;
        boolean __local__23_17;
        rmit.ai.clima.jackagt.plans.PFindPlayersNearestGold.PlayerGold __local__23_18;
        int __local__23_19;
        rmit.ai.clima.jackagt.plans.PFindPlayersNearestGold.PlayerGold __local__23_20;
        private int __breakLevel = 0;
        public int run(int __status)
            throws java.lang.Throwable
        {
            do {
                try {
                    if (__tothrow != null) 
                        throw __tothrow;
                    if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_PLANS) != 0) 
                        aos.util.logging.LogMsg.log(this,aos.jack.jak.core.Jak.LOG_PLANS,__task + "-PFindPlayersNearestGold.body:" + java.lang.Integer.toString(__state));
                    if (__task.nsteps > 0) {
                        __task.nsteps-- ;
                        if (__task.nsteps == 0) 
                            agent.changeFocus();
                    }
                    if (__state < 10) {
                        __status = super.stdrun(rmit.ai.clima.jackagt.plans.PFindPlayersNearestGold.this,__status);
                        if (__status != CONTINUE || agent.changing_focus) 
                            return __status;
                        continue;
                    }
                    __curstate = __state;
                    switch (__state) {
                        default: 
                        {
                            aos.jack.jak.core.Jak.error("PFindPlayersNearestGold.body: Illegal state");
                            return FAILED_STATE;
                        }
                        //* (45) 	   Vector distances = new Vector();
                        case 10: 
                        {
                            __breakLevel = 0;
                            __local__23_0 = new java.util.Vector();
                            __state = 11;
                            break;
                        }
                        //* (46) 	   boolean[] playerAssigned = new boolean[ bel_playerPositions_dat.nFacts() ]; 
                        case 11: 
                        {
                            __local__23_1 = new boolean[bel_playerPositions_dat.nFacts()];
                            __state = 12;
                            break;
                        }
                        //* (47) 	   Vector usedDistances = new Vector();
                        case 12: 
                        {
                            __local__23_2 = new java.util.Vector();
                            __state = 13;
                            break;
                        }
                        //* (49) 	   logical String $name;
                        case 13: 
                        {
                            __local__23_3 = (aos.jack.jak.logic.StringVariable) __logic.new_variable(java.lang.String.class);
                            __state = 14;
                            break;
                        }
                        //* (50) 	   Cursor c_player = bel_players_dat.get( $name );
                        case 14: 
                        {
                            __local__23_4 = (aos.jack.jak.cursor.Cursor) genCursor(0);
                            __state = 15;
                            break;
                        }
                        //* (53) 	   int playerId = 0;
                        case 15: 
                        {
                            __local__23_5 = 0;
                            __state = 16;
                            break;
                        }
                        //* (54) 	   while( c_player.next()  )
                        case 16: 
                        {
                            if (__local__23_4.next()) 
                                __state = 17;
                             else 
                                __state = 41;
                            break;
                        }
                        //* (56) 	      logical String $state;
                        case 17: 
                        {
                            __breakLevel = 4;
                            __local__23_6 = (aos.jack.jak.logic.StringVariable) __logic.new_variable(java.lang.String.class);
                            __state = 18;
                            break;
                        }
                        //* (57) 	      bel_playerState_dat.getByName( $name.as_string(), $state );
                        case 18: 
                        {
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(1);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 19;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (59) 	      if( $state.as_string().equals("pick") || $state.as_string().equals("drop") || $state.as_string().equals( "depot") )
                        case 19: 
                        {
                            if (__local__23_6.as_string().equals("pick") || __local__23_6.as_string().equals("drop") || __local__23_6.as_string().equals("depot")) 
                                __state = 20;
                             else 
                                __state = 21;
                            break;
                        }
                        //* (60) 	         continue;
                        case 20: 
                        {
                            __breakLevel = 3;
                            __state = 16;
                            break;
                        }
                        //* (63) 	      logical int $playerX, $playerY;
                        case 21: 
                        {
                            __local__23_7 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __local__23_8 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __state = 22;
                            break;
                        }
                        //* (64) 	      bel_playerPositions_dat.getByName( $name.as_string(), $playerX, $playerY );
                        case 22: 
                        {
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(2);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 23;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (65) 	      GridPoint playerPos = new GridPoint( $playerX.as_int(), $playerY.as_int() );
                        case 23: 
                        {
                            __local__23_9 = new rmit.ai.clima.gui.grid.GridPoint(__local__23_7.as_int(),__local__23_8.as_int());
                            __state = 24;
                            break;
                        }
                        //* (68) 	      logical int $goldX, $goldY;
                        case 24: 
                        {
                            __local__23_10 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __local__23_11 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __state = 25;
                            break;
                        }
                        //* (69) 	      Cursor c_gold = bel_goldAt_dat.get( $goldX, $goldY );
                        case 25: 
                        {
                            __local__23_12 = (aos.jack.jak.cursor.Cursor) genCursor(3);
                            __state = 26;
                            break;
                        }
                        //* (71) 	      while ( c_gold.next() )
                        case 26: 
                        {
                            if (__local__23_12.next()) 
                                __state = 27;
                             else 
                                __state = 39;
                            break;
                        }
                        //* (74)             logical int $pathLength;
                        case 27: 
                        {
                            __breakLevel = 8;
                            __local__23_13 = (aos.jack.jak.logic.IntegerVariable) __logic.new_variable(java.lang.Integer.TYPE);
                            __state = 28;
                            break;
                        }
                        //* (75)             logical String $moveHint;
                        case 28: 
                        {
                            __local__23_14 = (aos.jack.jak.logic.StringVariable) __logic.new_variable(java.lang.String.class);
                            __state = 29;
                            break;
                        }
                        //* (76)             @subtask( efindpath_p.post( $name.as_string(), $playerX.as_int(), $playerY.as_int(), $goldX.as_int(), $goldY.as_int()) );
                        case 29: 
                        {
                            __task.push(efindpath_p.post(__local__23_3.as_string(),__local__23_7.as_int(),__local__23_8.as_int(),__local__23_10.as_int(),__local__23_11.as_int()));
                            __state = -__state;
                            __subtask_pass = 30;
                            __subtask_fail = 4;
                            return SUBTASK;
                        }
                        //* (77)             bel_moveHint_dat.getByEndPoints( $playerX.as_int(), $playerY.as_int(), $goldX.as_int(), $goldY.as_int(), $moveHint, $pathLength );
                        case 30: 
                        {
                            boolean __b;
                            aos.jack.jak.cursor.Cursor __c = null;
                            try {
                                __c = genCursor(4);
                                __b = __c.next();
                            }
                            finally {
                                if (__c != null) 
                                    __c.finished();
                            }
                            if (__b) 
                                __state = 31;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (78)             if ($moveHint.as_string().equals("")) continue;
                        case 31: 
                        {
                            if (__local__23_14.as_string().equals("")) 
                                __state = 32;
                             else 
                                __state = 33;
                            break;
                        }
                        //* (78)             if ($moveHint.as_string().equals("")) continue;
                        case 32: 
                        {
                            __breakLevel = 7;
                            __state = 26;
                            break;
                        }
                        //* (81) 	         PlayerGold pg = new PlayerGold();
                        case 33: 
                        {
                            __local__23_15 = new rmit.ai.clima.jackagt.plans.PFindPlayersNearestGold.PlayerGold();
                            __state = 34;
                            break;
                        }
                        //* (82) 	         pg.pos = new GridPoint( $goldX.as_int(), $goldY.as_int() );
                        case 34: 
                        {
                            __state = 35;
                            __local__23_15.pos = new rmit.ai.clima.gui.grid.GridPoint(__local__23_10.as_int(),__local__23_11.as_int());
                            break;
                        }
                        //* (83) 	         pg.playerId = playerId;
                        case 35: 
                        {
                            __state = 36;
                            __local__23_15.playerId = __local__23_5;
                            break;
                        }
                        //* (84) 	         pg.name = $name.as_string();
                        case 36: 
                        {
                            __state = 37;
                            __local__23_15.name = __local__23_3.as_string();
                            break;
                        }
                        //* (85) 	         pg.dist = $pathLength.as_int();
                        case 37: 
                        {
                            __state = 38;
                            __local__23_15.dist = __local__23_13.as_int();
                            break;
                        }
                        //* (89) 	         distances.add(pg);
                        case 38: 
                        {
                            if (__local__23_0.add(__local__23_15)) 
                                __state = 26;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (92) 	      playerAssigned[playerId] = false;
                        case 39: 
                        {
                            __state = 40;
                            __local__23_1[__local__23_5] = false;
                            break;
                        }
                        //* (93) 	      playerId++;
                        case 40: 
                        {
                            __state = 16;
                            __local__23_5++ ;
                            break;
                        }
                        //* (97) 	   Collections.sort(distances);
                        case 41: 
                        {
                            __state = 42;
                            java.util.Collections.sort(__local__23_0);
                            break;
                        }
                        //* (100) 	   for ( int i = 0; i < distances.size(); ++i )
                        case 42: 
                        {
                            __local__23_16 = 0;
                            __state = 43;
                            break;
                        }
                        //* (100) 	   for ( int i = 0; i < distances.size(); ++i )
                        case 43: 
                        {
                            if (__local__23_16 < __local__23_0.size()) 
                                __state = 44;
                             else 
                                __state = 57;
                            break;
                        }
                        //* (103) 	      boolean b_discard = false;
                        case 44: 
                        {
                            __breakLevel = 4;
                            __local__23_17 = false;
                            __state = 45;
                            break;
                        }
                        //* (104) 	      PlayerGold pg = (PlayerGold)distances.get(i);
                        case 45: 
                        {
                            __local__23_18 = (rmit.ai.clima.jackagt.plans.PFindPlayersNearestGold.PlayerGold) __local__23_0.get(__local__23_16);
                            __state = 46;
                            break;
                        }
                        //* (105) 	      for( int j = 0 ; j < usedDistances.size() ; ++ j)
                        case 46: 
                        {
                            __local__23_19 = 0;
                            __state = 47;
                            break;
                        }
                        //* (105) 	      for( int j = 0 ; j < usedDistances.size() ; ++ j)
                        case 47: 
                        {
                            if (__local__23_19 < __local__23_2.size()) 
                                __state = 48;
                             else 
                                __state = 52;
                            break;
                        }
                        //* (107) 	         PlayerGold pg2 = (PlayerGold)usedDistances.get(j);
                        case 48: 
                        {
                            __breakLevel = 8;
                            __local__23_20 = (rmit.ai.clima.jackagt.plans.PFindPlayersNearestGold.PlayerGold) __local__23_2.get(__local__23_19);
                            __state = 49;
                            break;
                        }
                        //* (108) 	         if(pg.name == pg2.name || pg.pos.x == pg2.pos.x && pg.pos.y == pg2.pos.y)
                        case 49: 
                        {
                            if (__local__23_18.name == __local__23_20.name || __local__23_18.pos.x == __local__23_20.pos.x && __local__23_18.pos.y == __local__23_20.pos.y) 
                                __state = 50;
                             else 
                                __state = 51;
                            break;
                        }
                        //* (109) 	            b_discard = true;
                        case 50: 
                        {
                            __state = 51;
                            __local__23_17 = true;
                            break;
                        }
                        //* (105) 	      for( int j = 0 ; j < usedDistances.size() ; ++ j)
                        case 51: 
                        {
                            __state = 47;
                            ++__local__23_19;
                            break;
                        }
                        //* (111) 	      if(b_discard)
                        case 52: 
                        {
                            if (__local__23_17) 
                                __state = 53;
                             else 
                                __state = 54;
                            break;
                        }
                        //* (112) 	         continue;
                        case 53: 
                        {
                            __breakLevel = 3;
                            __state = 56;
                            break;
                        }
                        //* (114) 	      usedDistances.add(pg);
                        case 54: 
                        {
                            if (__local__23_2.add(__local__23_18)) 
                                __state = 55;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (115) 	      bel_playerClosestGold_dat.add( pg.name, pg.pos.x, pg.pos.y );
                        case 55: 
                        {
                            __state = 56;
                            bel_playerClosestGold_dat.add(__local__23_18.name,__local__23_18.pos.x,__local__23_18.pos.y);
                            break;
                        }
                        //* (100) 	   for ( int i = 0; i < distances.size(); ++i )
                        case 56: 
                        {
                            __state = 43;
                            ++__local__23_16;
                            break;
                        }
                        //* (42) 	body()
                        case 57: 
                        {
                            if (__pending == null) 
                                __state = PASSED_STATE;
                            __tothrow = __pending;
                            break;
                        }
                    }
                }
                catch (java.lang.Throwable e) {
                    handleException(e,__exMap_body);
                }
            }
             while (!agent.changing_focus);
            return CONTINUE;
        }
        
        public java.lang.String methodName()
        {
            return "body";
        }
        
        __bodyFSM()
        {
        }
        
        public java.lang.String stateInfo()
        {
            int n = __curstate;
            java.lang.String file = __tt__body[0];
            java.lang.String method = __tt__body[1];
            if (n < 0) 
                n = -n;
            n -= (10 - 2);
            java.lang.String line = (n < 2)?"??":__tt__body[n];
            return file + ":" + line + " " + method + " [" + __curstate + "]";
        }
        
        public java.lang.Object genObject(int __index)
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Object Construction");
            return null;
        }
        
        public aos.jack.jak.cursor.Cursor genCursor(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
                case 0: 
                {
                    return (bel_players_dat.get(__local__23_3));
                }
                case 1: 
                {
                    return (bel_playerState_dat.getByName(__local__23_3.as_string(),__local__23_6));
                }
                case 2: 
                {
                    return (bel_playerPositions_dat.getByName(__local__23_3.as_string(),__local__23_7,__local__23_8));
                }
                case 3: 
                {
                    return (bel_goldAt_dat.get(__local__23_10,__local__23_11));
                }
                case 4: 
                {
                    return (bel_moveHint_dat.getByEndPoints(__local__23_7.as_int(),__local__23_8.as_int(),__local__23_10.as_int(),__local__23_11.as_int(),__local__23_14,__local__23_13));
                }
            }
            aos.jack.jak.core.Jak.error("illegal Cursor Construction");
            return null;
        }
        
        public aos.jack.jak.fsm.FSM genFSM(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal FSM Construction");
            return null;
        }
        
        public boolean testCondition(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal test Construction");
            return false;
        }
        
        public aos.jack.jak.plan.Plan getPlan()
        {
            return rmit.ai.clima.jackagt.plans.PFindPlayersNearestGold.this;
        }
        
        protected aos.jack.jak.fsm.FSM fail()
        {
            return getPlan().fail();
        }
        
        protected aos.jack.jak.fsm.FSM pass()
        {
            return getPlan().pass();
        }
        
        public void enter()
        {
            __trace = agent.trace("rmit.ai.clima.jackagt.plans.PFindPlayersNearestGold.body");
        }
        
        public java.lang.Object getVariable(int n)
        {
            switch (n) {
                case 0: 
                {
                    return aos.util.ToObject.box(__local__23_0);
                }
                case 1: 
                {
                    return aos.util.ToObject.box(__local__23_1);
                }
                case 2: 
                {
                    return aos.util.ToObject.box(__local__23_2);
                }
                case 3: 
                {
                    return aos.util.ToObject.box(__local__23_3);
                }
                case 4: 
                {
                    return aos.util.ToObject.box(__local__23_4);
                }
                case 5: 
                {
                    return aos.util.ToObject.box(__local__23_5);
                }
                case 6: 
                {
                    return aos.util.ToObject.box(__local__23_6);
                }
                case 7: 
                {
                    return aos.util.ToObject.box(__local__23_7);
                }
                case 8: 
                {
                    return aos.util.ToObject.box(__local__23_8);
                }
                case 9: 
                {
                    return aos.util.ToObject.box(__local__23_9);
                }
                case 10: 
                {
                    return aos.util.ToObject.box(__local__23_10);
                }
                case 11: 
                {
                    return aos.util.ToObject.box(__local__23_11);
                }
                case 12: 
                {
                    return aos.util.ToObject.box(__local__23_12);
                }
                case 13: 
                {
                    return aos.util.ToObject.box(__local__23_13);
                }
                case 14: 
                {
                    return aos.util.ToObject.box(__local__23_14);
                }
                case 15: 
                {
                    return aos.util.ToObject.box(__local__23_15);
                }
                case 16: 
                {
                    return aos.util.ToObject.box(__local__23_16);
                }
                case 17: 
                {
                    return aos.util.ToObject.box(__local__23_17);
                }
                case 18: 
                {
                    return aos.util.ToObject.box(__local__23_18);
                }
                case 19: 
                {
                    return aos.util.ToObject.box(__local__23_19);
                }
                case 20: 
                {
                    return aos.util.ToObject.box(__local__23_20);
                }
                default: 
                {
                    throw new java.lang.IndexOutOfBoundsException("Reasoning Method " + methodName() + " does not have variable number " + n);
                }
            }
        }
        
        public java.lang.String[] variableNames()
        {
            return __fsmVariableNames_body;
        }
        
        public java.lang.String[] variableTypes()
        {
            return __fsmTypes_body;
        }
        
        public java.lang.String[] variableLocalNames()
        {
            return __fsmLocalNames_body;
        }
        
    }
}
