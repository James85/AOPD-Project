/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
  This code is generated by JAC version 5.4 by
  Agent Oriented Software. http://www.agent-software.com.au

    DO NOT ALTER THIS CODE AND DO NOT REMOVE THIS COMMENT
 *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
package rmit.ai.clima.jackagt.data;
import aos.jack.jak.core.Jak;
import aos.jack.jak.event.EventRecipient;
import aos.jack.jak.beliefset.ClosedWorld;
import aos.jack.jak.beliefset.ClosedWorldCursor;
import aos.jack.jak.beliefset.BeliefSetCursor;
import aos.jack.jak.beliefset.BeliefSetException;
import aos.jack.jak.beliefset.Tuple;
import aos.jack.jak.beliefset.BeliefSet;
import aos.jack.jak.logic.ChoicePoint;
import aos.jack.jak.logic.Variable;
import aos.jack.jak.cursor.Cursor;
import aos.jack.jak.cursor.BeliefState;
import aos.jack.plugin.view.rt.CleanupCursor;
import java.lang.Object;

public class SimulationProp extends aos.jack.jak.beliefset.ClosedWorld {
    static public rmit.ai.clima.jackagt.data.SimulationProp__Tuple __hole = new rmit.ai.clima.jackagt.data.SimulationProp__Tuple(true);
    public rmit.ai.clima.jackagt.data.SimulationProp__Tuple[][] __tables;
    public boolean attach(aos.jack.jak.event.EventRecipient __h)
    {
        java.lang.Object __o = __h;
        if (!super.attach(__h)) 
            return false;
        return true;
    }
    
    public aos.jack.jak.beliefset.BeliefSetCursor get(aos.jack.jak.logic.IntegerVariable __v0, aos.jack.jak.logic.IntegerVariable __v1, aos.jack.jak.logic.IntegerVariable __v2, aos.jack.jak.logic.IntegerVariable __v3, aos.jack.jak.logic.IntegerVariable __v4)
        throws aos.jack.jak.beliefset.BeliefSetException
    {
        rmit.ai.clima.jackagt.data.SimulationProp__Tuple __t = new rmit.ai.clima.jackagt.data.SimulationProp__Tuple();
        rmit.ai.clima.jackagt.data.SimulationProp.__Cursor __c = new rmit.ai.clima.jackagt.data.SimulationProp.__Cursor(__t);
        if (!__v0.check_unifiable(java.lang.Integer.TYPE)) 
            throw new aos.jack.jak.beliefset.BeliefSetException("SimulationProp:get:OOOOO: arg 0 gridX Incorrect Variable type");
        if (__v0.isGround()) {
            try {
                __t.gridX = __v0.as_int();
            }
            catch (java.lang.Exception e) {
                throw new aos.jack.jak.beliefset.BeliefSetException("SimulationProp:get:OOOOO: got " + e.toString());
            }
        }
         else 
            __c.gridX = __v0;
        if (!__v1.check_unifiable(java.lang.Integer.TYPE)) 
            throw new aos.jack.jak.beliefset.BeliefSetException("SimulationProp:get:OOOOO: arg 1 gridY Incorrect Variable type");
        if (__v1.isGround()) {
            try {
                __t.gridY = __v1.as_int();
            }
            catch (java.lang.Exception e) {
                throw new aos.jack.jak.beliefset.BeliefSetException("SimulationProp:get:OOOOO: got " + e.toString());
            }
        }
         else 
            __c.gridY = __v1;
        if (!__v2.check_unifiable(java.lang.Integer.TYPE)) 
            throw new aos.jack.jak.beliefset.BeliefSetException("SimulationProp:get:OOOOO: arg 2 depotX Incorrect Variable type");
        if (__v2.isGround()) {
            try {
                __t.depotX = __v2.as_int();
            }
            catch (java.lang.Exception e) {
                throw new aos.jack.jak.beliefset.BeliefSetException("SimulationProp:get:OOOOO: got " + e.toString());
            }
        }
         else 
            __c.depotX = __v2;
        if (!__v3.check_unifiable(java.lang.Integer.TYPE)) 
            throw new aos.jack.jak.beliefset.BeliefSetException("SimulationProp:get:OOOOO: arg 3 depotY Incorrect Variable type");
        if (__v3.isGround()) {
            try {
                __t.depotY = __v3.as_int();
            }
            catch (java.lang.Exception e) {
                throw new aos.jack.jak.beliefset.BeliefSetException("SimulationProp:get:OOOOO: got " + e.toString());
            }
        }
         else 
            __c.depotY = __v3;
        if (!__v4.check_unifiable(java.lang.Integer.TYPE)) 
            throw new aos.jack.jak.beliefset.BeliefSetException("SimulationProp:get:OOOOO: arg 4 noSteps Incorrect Variable type");
        if (__v4.isGround()) {
            try {
                __t.noSteps = __v4.as_int();
            }
            catch (java.lang.Exception e) {
                throw new aos.jack.jak.beliefset.BeliefSetException("SimulationProp:get:OOOOO: got " + e.toString());
            }
        }
         else 
            __c.noSteps = __v4;
        __c.init(-1,this);
        return __c;
    }
    
    public aos.jack.jak.beliefset.BeliefSetCursor check(int __v0, int __v1, int __v2, int __v3, int __v4)
        throws aos.jack.jak.beliefset.BeliefSetException
    {
        rmit.ai.clima.jackagt.data.SimulationProp__Tuple __t = new rmit.ai.clima.jackagt.data.SimulationProp__Tuple();
        rmit.ai.clima.jackagt.data.SimulationProp.__Cursor __c = new rmit.ai.clima.jackagt.data.SimulationProp.__Cursor(__t);
        __t.gridX = __v0;
        __t.gridY = __v1;
        __t.depotX = __v2;
        __t.depotY = __v3;
        __t.noSteps = __v4;
        __c.init(0,this);
        return __c;
    }
    
    public aos.jack.jak.cursor.Cursor getDepotLoc(aos.jack.jak.logic.IntegerVariable $depotX, aos.jack.jak.logic.IntegerVariable $depotY)
        throws aos.jack.jak.beliefset.BeliefSetException
    {
        rmit.ai.clima.jackagt.data.SimulationProp.__complex_16 __c = new rmit.ai.clima.jackagt.data.SimulationProp.__complex_16($depotX,$depotY);
        try {
            return __c.setCursor(__c.__complex_16_getDepotLoc());
        }
        catch (java.lang.Exception __e) {
            throw new aos.jack.jak.beliefset.BeliefSetException("getDepotLoc got exception " + __e);
        }
    }
    
    public aos.jack.jak.cursor.Cursor getGridSize(aos.jack.jak.logic.IntegerVariable $gridX, aos.jack.jak.logic.IntegerVariable $gridY)
        throws aos.jack.jak.beliefset.BeliefSetException
    {
        rmit.ai.clima.jackagt.data.SimulationProp.__complex_17 __c = new rmit.ai.clima.jackagt.data.SimulationProp.__complex_17($gridX,$gridY);
        try {
            return __c.setCursor(__c.__complex_17_getGridSize());
        }
        catch (java.lang.Exception __e) {
            throw new aos.jack.jak.beliefset.BeliefSetException("getGridSize got exception " + __e);
        }
    }
    
    public int keyIndex()
    {
        return 0;
    }
    
    public int fullIndex()
    {
        return 0;
    }
    
    public int nIndexes()
    {
        return 2;
    }
    
    public aos.jack.jak.beliefset.Tuple newTuple()
    {
        return new rmit.ai.clima.jackagt.data.SimulationProp__Tuple();
    }
    
    public aos.jack.jak.beliefset.Tuple getTuple(int t, int l)
    {
        return __tables[t][l];
    }
    
    public aos.jack.jak.beliefset.Tuple[] newTable(int t)
    {
        return new rmit.ai.clima.jackagt.data.SimulationProp__Tuple[t];
    }
    
    public aos.jack.jak.beliefset.Tuple[][] newTables(int t)
    {
        return new rmit.ai.clima.jackagt.data.SimulationProp__Tuple[t][];
    }
    
    public aos.jack.jak.beliefset.Tuple[] getTable(int t)
    {
        return __tables[t];
    }
    
    public aos.jack.jak.beliefset.Tuple[][] getTables()
    {
        return __tables;
    }
    
    public void setTables(aos.jack.jak.beliefset.Tuple[][] t)
    {
        __tables = (rmit.ai.clima.jackagt.data.SimulationProp__Tuple[][]) t;
    }
    
    public aos.jack.jak.beliefset.BeliefSetCursor newCursor(aos.jack.jak.beliefset.Tuple __t)
    {
        if (__t instanceof rmit.ai.clima.jackagt.data.SimulationProp__Tuple) 
            return new rmit.ai.clima.jackagt.data.SimulationProp.__Cursor((rmit.ai.clima.jackagt.data.SimulationProp__Tuple) __t);
        return null;
    }
    
    public void add(int __v0, int __v1, int __v2, int __v3, int __v4)
        throws aos.jack.jak.beliefset.BeliefSetException
    {
        add(__v0,__v1,__v2,__v3,__v4,aos.jack.jak.cursor.Cursor.TRUE);
    }
    
    public void add(int __v0, int __v1, int __v2, int __v3, int __v4, aos.jack.jak.cursor.BeliefState __d)
        throws aos.jack.jak.beliefset.BeliefSetException
    {
        rmit.ai.clima.jackagt.data.SimulationProp__Tuple __t = new rmit.ai.clima.jackagt.data.SimulationProp__Tuple();
        __t.gridX = __v0;
        __t.gridY = __v1;
        __t.depotX = __v2;
        __t.depotY = __v3;
        __t.noSteps = __v4;
        super.assertTuple(__t,__d);
    }
    
    public void remove(int __v0, int __v1, int __v2, int __v3, int __v4)
        throws aos.jack.jak.beliefset.BeliefSetException
    {
        remove(__v0,__v1,__v2,__v3,__v4,aos.jack.jak.cursor.Cursor.TRUE);
    }
    
    public void remove(int __v0, int __v1, int __v2, int __v3, int __v4, aos.jack.jak.cursor.BeliefState __d)
        throws aos.jack.jak.beliefset.BeliefSetException
    {
        rmit.ai.clima.jackagt.data.SimulationProp__Tuple __t = new rmit.ai.clima.jackagt.data.SimulationProp__Tuple();
        __t.gridX = __v0;
        __t.gridY = __v1;
        __t.depotX = __v2;
        __t.depotY = __v3;
        __t.noSteps = __v4;
        super.retractTuple(__t,__d);
    }
    
    public SimulationProp()
    {
    }
    
    public SimulationProp(java.lang.String n)
    {
        super();
        read(n);
    }
    
    class __Cursor extends aos.jack.jak.beliefset.ClosedWorldCursor {
        public rmit.ai.clima.jackagt.data.SimulationProp__Tuple __tuple = null;
        public aos.jack.jak.logic.Variable gridX;
        public aos.jack.jak.logic.Variable gridY;
        public aos.jack.jak.logic.Variable depotX;
        public aos.jack.jak.logic.Variable depotY;
        public aos.jack.jak.logic.Variable noSteps;
        public __Cursor()
        {
            __tuple = __hole;
        }
        
        public __Cursor(rmit.ai.clima.jackagt.data.SimulationProp__Tuple __t)
        {
            super();
            __tuple = __t;
        }
        
        public int match(int __ti, int __st, int __c, boolean __k, int __ind)
        {
            rmit.ai.clima.jackagt.data.SimulationProp__Tuple[] __tab = __tables[__ti];
            rmit.ai.clima.jackagt.data.SimulationProp__Tuple __t;
            int __sz = __tab.length;
            int __i;
            if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_DB) != 0) {
                aos.jack.jak.core.Jak.log.log("SimulationProp__Tuple:match:" + __ti + ":" + __st + ":" + __c + ":" + __k + ":" + __ind);
                aos.jack.jak.core.Jak.log.log("Tuple=" + __tuple);
                aos.jack.jak.core.Jak.log.log("Outputs are");
                aos.jack.jak.core.Jak.log.log("  gridX:" + gridX);
                aos.jack.jak.core.Jak.log.log("  gridY:" + gridY);
                aos.jack.jak.core.Jak.log.log("  depotX:" + depotX);
                aos.jack.jak.core.Jak.log.log("  depotY:" + depotY);
                aos.jack.jak.core.Jak.log.log("  noSteps:" + noSteps);
            }
            for (__i = __st; __c > 0; __i = (__i + 1) % __sz, __c-- ) {
                __t = __tab[__i];
                if (__t == null) {
                    if (__ind < 0) 
                        continue;
                    return -1;
                }
                if (__t == __hole) 
                    continue;
                if (__t.isFree) {
                    __tab[__i] = __hole;
                    continue;
                }
                if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_DB) != 0) 
                    aos.jack.jak.core.Jak.log.log("t" + __i + ":" + __t);
                try {
                    if (cp != null) 
                        cp.backtrack();
                    if (gridX == null) {
                        if (__tuple.gridX != __t.gridX) 
                            continue;
                    }
                     else {
                        if (!gridX.unify(__t.gridX)) 
                            continue;
                    }
                    if (gridY == null) {
                        if (__tuple.gridY != __t.gridY) 
                            continue;
                    }
                     else {
                        if (!gridY.unify(__t.gridY)) 
                            continue;
                    }
                    if (depotX == null) {
                        if (__tuple.depotX != __t.depotX) 
                            continue;
                    }
                     else {
                        if (!depotX.unify(__t.depotX)) 
                            continue;
                    }
                    if (depotY == null) {
                        if (__tuple.depotY != __t.depotY) 
                            continue;
                    }
                     else {
                        if (!depotY.unify(__t.depotY)) 
                            continue;
                    }
                    if (noSteps == null) {
                        if (__tuple.noSteps != __t.noSteps) 
                            continue;
                    }
                     else {
                        if (!noSteps.unify(__t.noSteps)) 
                            continue;
                    }
                    if (__k) 
                        return __i;
                }
                catch (java.lang.Exception e) {
                    continue;
                }
                return __i;
            }
            return -1;
        }
        
        public int hash(int __i)
        {
            return (__tuple == null?0:__tuple.hash(__i));
        }
        
        public aos.jack.jak.logic.ChoicePoint getChoicePoint()
        {
            if (gridX != null) 
                return gridX.getEnv().newChoicePoint();
            if (gridY != null) 
                return gridY.getEnv().newChoicePoint();
            if (depotX != null) 
                return depotX.getEnv().newChoicePoint();
            if (depotY != null) 
                return depotY.getEnv().newChoicePoint();
            if (noSteps != null) 
                return noSteps.getEnv().newChoicePoint();
            return null;
        }
        
        public boolean isKeyGround()
        {
            if (gridX != null) 
                return false;
            if (gridY != null) 
                return false;
            if (depotX != null) 
                return false;
            if (depotY != null) 
                return false;
            if (noSteps != null) 
                return false;
            return true;
        }
        
    }
    class __complex_16 extends aos.jack.plugin.view.rt.CleanupCursor {
        aos.jack.jak.logic.IntegerVariable $depotX;
        aos.jack.jak.logic.IntegerVariable $depotY;
        aos.jack.jak.logic.IntegerVariable __local_2;
        aos.jack.jak.logic.IntegerVariable __local_3;
        aos.jack.jak.logic.IntegerVariable __local_4;
        public java.lang.Object genObject(int __index)
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Object Construction");
            return null;
        }
        
        public aos.jack.jak.cursor.Cursor genCursor(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
                case 0: 
                {
                    return (get(__local_2,__local_3,$depotX,$depotY,__local_4));
                }
            }
            aos.jack.jak.core.Jak.error("illegal Cursor Construction");
            return null;
        }
        
        public aos.jack.jak.fsm.FSM genFSM(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal FSM Construction");
            return null;
        }
        
        public boolean testCondition(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal test Construction");
            return false;
        }
        
        public __complex_16(aos.jack.jak.logic.IntegerVariable $depotX, aos.jack.jak.logic.IntegerVariable $depotY)
        {
            super($depotX);
            this.$depotX = $depotX;
            this.$depotY = $depotY;
        }
        
        aos.jack.jak.cursor.Cursor __complex_16_getDepotLoc()
            throws java.lang.Exception
        {
            {
                __local_2 = (aos.jack.jak.logic.IntegerVariable) new_variable(java.lang.Integer.TYPE);
                __local_3 = (aos.jack.jak.logic.IntegerVariable) new_variable(java.lang.Integer.TYPE);
                __local_4 = (aos.jack.jak.logic.IntegerVariable) new_variable(java.lang.Integer.TYPE);
            }
            return genCursor(0);
        }
        
    }
    class __complex_17 extends aos.jack.plugin.view.rt.CleanupCursor {
        aos.jack.jak.logic.IntegerVariable $gridX;
        aos.jack.jak.logic.IntegerVariable $gridY;
        aos.jack.jak.logic.IntegerVariable __local_2;
        aos.jack.jak.logic.IntegerVariable __local_3;
        aos.jack.jak.logic.IntegerVariable __local_4;
        public java.lang.Object genObject(int __index)
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Object Construction");
            return null;
        }
        
        public aos.jack.jak.cursor.Cursor genCursor(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
                case 0: 
                {
                    return (get($gridX,$gridY,__local_2,__local_3,__local_4));
                }
            }
            aos.jack.jak.core.Jak.error("illegal Cursor Construction");
            return null;
        }
        
        public aos.jack.jak.fsm.FSM genFSM(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal FSM Construction");
            return null;
        }
        
        public boolean testCondition(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal test Construction");
            return false;
        }
        
        public __complex_17(aos.jack.jak.logic.IntegerVariable $gridX, aos.jack.jak.logic.IntegerVariable $gridY)
        {
            super($gridX);
            this.$gridX = $gridX;
            this.$gridY = $gridY;
        }
        
        aos.jack.jak.cursor.Cursor __complex_17_getGridSize()
            throws java.lang.Exception
        {
            {
                __local_2 = (aos.jack.jak.logic.IntegerVariable) new_variable(java.lang.Integer.TYPE);
                __local_3 = (aos.jack.jak.logic.IntegerVariable) new_variable(java.lang.Integer.TYPE);
                __local_4 = (aos.jack.jak.logic.IntegerVariable) new_variable(java.lang.Integer.TYPE);
            }
            return genCursor(0);
        }
        
    }
}
