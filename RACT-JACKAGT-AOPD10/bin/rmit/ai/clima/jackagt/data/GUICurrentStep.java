/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
  This code is generated by JAC version 5.4 by
  Agent Oriented Software. http://www.agent-software.com.au

    DO NOT ALTER THIS CODE AND DO NOT REMOVE THIS COMMENT
 *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
package rmit.ai.clima.jackagt.data;
import aos.jack.jak.core.Jak;
import aos.jack.jak.event.EventRecipient;
import aos.jack.jak.beliefset.ClosedWorld;
import aos.jack.jak.beliefset.ClosedWorldCursor;
import aos.jack.jak.beliefset.BeliefSetCursor;
import aos.jack.jak.beliefset.BeliefSetException;
import aos.jack.jak.beliefset.Tuple;
import aos.jack.jak.beliefset.BeliefSet;
import aos.jack.jak.logic.ChoicePoint;
import aos.jack.jak.logic.Variable;
import aos.jack.jak.cursor.Cursor;
import aos.jack.jak.cursor.BeliefState;
import aos.jack.plugin.view.rt.CleanupCursor;
import java.lang.Object;

public class GUICurrentStep extends aos.jack.jak.beliefset.ClosedWorld {
    static public rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple __hole = new rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple(true);
    public rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple[][] __tables;
    public boolean attach(aos.jack.jak.event.EventRecipient __h)
    {
        java.lang.Object __o = __h;
        if (!super.attach(__h)) 
            return false;
        return true;
    }
    
    public aos.jack.jak.beliefset.BeliefSetCursor check(int __v0, int __v1)
        throws aos.jack.jak.beliefset.BeliefSetException
    {
        rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple __t = new rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple();
        rmit.ai.clima.jackagt.data.GUICurrentStep.__Cursor __c = new rmit.ai.clima.jackagt.data.GUICurrentStep.__Cursor(__t);
        __t.agentNum = __v0;
        __t.step = __v1;
        __c.init(1,this);
        return __c;
    }
    
    public aos.jack.jak.beliefset.BeliefSetCursor get(int __v0, aos.jack.jak.logic.IntegerVariable __v1)
        throws aos.jack.jak.beliefset.BeliefSetException
    {
        rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple __t = new rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple();
        rmit.ai.clima.jackagt.data.GUICurrentStep.__Cursor __c = new rmit.ai.clima.jackagt.data.GUICurrentStep.__Cursor(__t);
        __t.agentNum = __v0;
        if (!__v1.check_unifiable(java.lang.Integer.TYPE)) 
            throw new aos.jack.jak.beliefset.BeliefSetException("GUICurrentStep:get:IO: arg 1 step Incorrect Variable type");
        if (__v1.isGround()) {
            try {
                __t.step = __v1.as_int();
            }
            catch (java.lang.Exception e) {
                throw new aos.jack.jak.beliefset.BeliefSetException("GUICurrentStep:get:IO: got " + e.toString());
            }
        }
         else 
            __c.step = __v1;
        __c.init(0,this);
        return __c;
    }
    
    public int getStep(int agentNum)
        throws aos.jack.jak.beliefset.BeliefSetException
    {
        rmit.ai.clima.jackagt.data.GUICurrentStep.__complex_15 __c = new rmit.ai.clima.jackagt.data.GUICurrentStep.__complex_15(agentNum);
        try {
            return __c.__complex_15_getStep();
        }
        catch (java.lang.Exception __e) {
            throw new aos.jack.jak.beliefset.BeliefSetException("getStep got exception " + __e);
        }
    }
    
    public int keyIndex()
    {
        return 0;
    }
    
    public int fullIndex()
    {
        return 1;
    }
    
    public int nIndexes()
    {
        return 2;
    }
    
    public aos.jack.jak.beliefset.Tuple newTuple()
    {
        return new rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple();
    }
    
    public aos.jack.jak.beliefset.Tuple getTuple(int t, int l)
    {
        return __tables[t][l];
    }
    
    public aos.jack.jak.beliefset.Tuple[] newTable(int t)
    {
        return new rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple[t];
    }
    
    public aos.jack.jak.beliefset.Tuple[][] newTables(int t)
    {
        return new rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple[t][];
    }
    
    public aos.jack.jak.beliefset.Tuple[] getTable(int t)
    {
        return __tables[t];
    }
    
    public aos.jack.jak.beliefset.Tuple[][] getTables()
    {
        return __tables;
    }
    
    public void setTables(aos.jack.jak.beliefset.Tuple[][] t)
    {
        __tables = (rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple[][]) t;
    }
    
    public aos.jack.jak.beliefset.BeliefSetCursor newCursor(aos.jack.jak.beliefset.Tuple __t)
    {
        if (__t instanceof rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple) 
            return new rmit.ai.clima.jackagt.data.GUICurrentStep.__Cursor((rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple) __t);
        return null;
    }
    
    public void add(int __v0, int __v1)
        throws aos.jack.jak.beliefset.BeliefSetException
    {
        add(__v0,__v1,aos.jack.jak.cursor.Cursor.TRUE);
    }
    
    public void add(int __v0, int __v1, aos.jack.jak.cursor.BeliefState __d)
        throws aos.jack.jak.beliefset.BeliefSetException
    {
        rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple __t = new rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple();
        __t.agentNum = __v0;
        __t.step = __v1;
        super.assertTuple(__t,__d);
    }
    
    public void remove(int __v0, int __v1)
        throws aos.jack.jak.beliefset.BeliefSetException
    {
        remove(__v0,__v1,aos.jack.jak.cursor.Cursor.TRUE);
    }
    
    public void remove(int __v0, int __v1, aos.jack.jak.cursor.BeliefState __d)
        throws aos.jack.jak.beliefset.BeliefSetException
    {
        rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple __t = new rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple();
        __t.agentNum = __v0;
        __t.step = __v1;
        super.retractTuple(__t,__d);
    }
    
    public GUICurrentStep()
    {
    }
    
    public GUICurrentStep(java.lang.String n)
    {
        super();
        read(n);
    }
    
    class __Cursor extends aos.jack.jak.beliefset.ClosedWorldCursor {
        public rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple __tuple = null;
        public aos.jack.jak.logic.Variable agentNum;
        public aos.jack.jak.logic.Variable step;
        public __Cursor()
        {
            __tuple = __hole;
        }
        
        public __Cursor(rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple __t)
        {
            super();
            __tuple = __t;
        }
        
        public int match(int __ti, int __st, int __c, boolean __k, int __ind)
        {
            rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple[] __tab = __tables[__ti];
            rmit.ai.clima.jackagt.data.GUICurrentStep__Tuple __t;
            int __sz = __tab.length;
            int __i;
            if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_DB) != 0) {
                aos.jack.jak.core.Jak.log.log("GUICurrentStep__Tuple:match:" + __ti + ":" + __st + ":" + __c + ":" + __k + ":" + __ind);
                aos.jack.jak.core.Jak.log.log("Tuple=" + __tuple);
                aos.jack.jak.core.Jak.log.log("Outputs are");
                aos.jack.jak.core.Jak.log.log("  agentNum:" + agentNum);
                aos.jack.jak.core.Jak.log.log("  step:" + step);
            }
            for (__i = __st; __c > 0; __i = (__i + 1) % __sz, __c-- ) {
                __t = __tab[__i];
                if (__t == null) {
                    if (__ind < 0) 
                        continue;
                    return -1;
                }
                if (__t == __hole) 
                    continue;
                if (__t.isFree) {
                    __tab[__i] = __hole;
                    continue;
                }
                if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_DB) != 0) 
                    aos.jack.jak.core.Jak.log.log("t" + __i + ":" + __t);
                try {
                    if (cp != null) 
                        cp.backtrack();
                    if (agentNum == null) {
                        if (__tuple.agentNum != __t.agentNum) 
                            continue;
                    }
                     else {
                        if (!agentNum.unify(__t.agentNum)) 
                            continue;
                    }
                    if (__k) 
                        return __i;
                    if (step == null) {
                        if (__tuple.step != __t.step) 
                            continue;
                    }
                     else {
                        if (!step.unify(__t.step)) 
                            continue;
                    }
                }
                catch (java.lang.Exception e) {
                    continue;
                }
                return __i;
            }
            return -1;
        }
        
        public int hash(int __i)
        {
            return (__tuple == null?0:__tuple.hash(__i));
        }
        
        public aos.jack.jak.logic.ChoicePoint getChoicePoint()
        {
            if (agentNum != null) 
                return agentNum.getEnv().newChoicePoint();
            if (step != null) 
                return step.getEnv().newChoicePoint();
            return null;
        }
        
        public boolean isKeyGround()
        {
            if (agentNum != null) 
                return false;
            return true;
        }
        
    }
    class __complex_15 extends aos.jack.plugin.view.rt.CleanupCursor {
        int agentNum;
        aos.jack.jak.logic.IntegerVariable __local_2;
        aos.jack.jak.cursor.Cursor __local_3;
        public java.lang.Object genObject(int __index)
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Object Construction");
            return null;
        }
        
        public aos.jack.jak.cursor.Cursor genCursor(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
                case 0: 
                {
                    return (get(agentNum,__local_2));
                }
                case 1: 
                {
                    return (__local_3 = (aos.jack.jak.beliefset.BeliefSetCursor) (genCursor(0)));
                }
            }
            aos.jack.jak.core.Jak.error("illegal Cursor Construction");
            return null;
        }
        
        public aos.jack.jak.fsm.FSM genFSM(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal FSM Construction");
            return null;
        }
        
        public boolean testCondition(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal test Construction");
            return false;
        }
        
        public __complex_15(int agentNum)
        {
            super();
            this.agentNum = agentNum;
        }
        
        public int __complex_15_getStep()
            throws java.lang.Exception
        {
            __local_2 = (aos.jack.jak.logic.IntegerVariable) new_variable(java.lang.Integer.TYPE);
            genCursor(1);
            if (__local_3.next()) 
                return __local_2.as_int();
             else 
                return -1;
        }
        
    }
}
