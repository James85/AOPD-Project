package rmit.ai.clima.jackagt.plans;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;
import rmit.ai.clima.gui.grid.GridPoint;

public plan PCoord_HandleCellInfoRequest extends Plan
{
/******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: PCoord_HandleCellInfoRequest
*/
	//Events handled by the plan are declared here.
	#sends event MEReturnCellInfo mereturncellinfo_s;

	#handles event MERequestCellInfo merequestcellinfo_h;


	// Declarations of any beliefset/data that the plan accesses.
	#reads data BPlayerAt bel_playerAt_dat;

	#reads data BPlayerPosition bel_playerPositions_dat;

	#reads data BObstacleAt bel_obstacleAt_dat;

	#reads data BUnexplored bel_unexplored_dat;

	#reads data BGoldAt bel_goldAt_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/

	static boolean relevant (MERequestCellInfo e)
	{
	   return true;
	}
	
	context()
	{
		true;
	}
	  #reasoning method fail()
	   {
	       System.out.println("OMGZORS ===========DickZilla : HandleCellInfoRequest");
	   }

	body()
	{
	   GridPoint cellPos = merequestcellinfo_h.cellPos;
	   boolean hasGold = bel_goldAt_dat.check( cellPos.x, cellPos.y ).next();
	   boolean hasObstacle = bel_obstacleAt_dat.check( cellPos.x, cellPos.y ).next();
	   boolean isExplored = ! bel_unexplored_dat.check( cellPos.x, cellPos.y ).next();
	   boolean hasPlayer = bel_playerAt_dat.check( cellPos.x, cellPos.y ).next();
	   boolean hasEnemy =  hasPlayer &&  (! bel_playerPositions_dat.checkByCoord( cellPos.x, cellPos.y )); 
	   @reply( merequestcellinfo_h, mereturncellinfo_s.reply( cellPos, hasGold, hasObstacle, isExplored, hasPlayer, hasEnemy ));
	}
}
