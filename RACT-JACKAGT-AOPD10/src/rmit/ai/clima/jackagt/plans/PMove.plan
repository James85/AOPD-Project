package rmit.ai.clima.jackagt.plans;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;
import rmit.ai.clima.gui.grid.GridPoint;
import java.util.*;

public plan PMove extends Plan
{
   /******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: PMove
*/
	//Events handled by the plan are declared here.
	#sends event MERequestCellInfo merequestcellinfo_s;

	#posts event EExecuteCLIMAaction eexecuteclimaaction_p;

	#handles event EExecuteAction eexecuteaction_h;


	// Declarations of any beliefset/data that the plan accesses.
	#reads data BCurrentState bel_currentState_dat;

	#reads data BCurrentPosition bel_currentPosition_dat;

	#reads data BCurrentPosition bel_currentTarget_dat;

	#reads data BCurrentPath bel_currentPath_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/

   logical String $state;
   logical Object $path;
   logical boolean $reachable;
   logical int $unreachableCount;

   #reasoning method fail()
   {
      System.out.println("OMGZORS ===========DickZilla : PMove");
   }

   static boolean relevant (EExecuteAction e)
   {
      return true;
   }

   context()
   {
      //Need to be in any of moving states
      bel_currentState_dat.get( $state ) &&
      (!$state.as_string().equals("idle"))
      &&
      //Path needs to be valid
      bel_currentPath_dat.get( $path, $reachable, $unreachableCount )
      && (((Vector)$path.as_object()).size() > 0)
      && ($reachable.as_boolean() == true);
   }

   body()
   {
      //Get current position
      logical int $posX, $posY;
      bel_currentPosition_dat.get( $posX, $posY );
      GridPoint pos = new GridPoint( $posX.as_int(), $posY.as_int() );

      //Get next position from the path
      Vector path = (Vector) $path.as_object();
      GridPoint nextPos = (GridPoint) path.get( path.size()-1 );
      GridPoint lastPos = (GridPoint) path.get(0);

      //Check if more than two squares away from target
      if (path.size() > 2)
      {
         //Request fresh info about next cell from the coordinator
         MERequestCellInfo nextCellRequest = merequestcellinfo_s.send( nextPos );
         @send( "boss", nextCellRequest );
         @wait_for( nextCellRequest.replied() );
         MEReturnCellInfo nextCellReply = (MEReturnCellInfo) nextCellRequest.getReply();
   
         //Don't move if there's an enemy or friendly player in the next cell
         //(bumping into players makes them fail and both moves might never resolve)
         if (nextCellReply.hasPlayer) {
            System.out.println( getAgent().name() + " WAITING FOR PLAYER IN NEXT CELL!");
            eexecuteclimaaction_p.post( "skip" );
            return true;
         }
      }
      else //We must be near the target
      {
         //Request fresh info about target cell from the coordinator
         MERequestCellInfo lastCellRequest = merequestcellinfo_s.send( lastPos );
         @send( "boss", lastCellRequest );
         @wait_for( lastCellRequest.replied() );
         MEReturnCellInfo lastCellReply = (MEReturnCellInfo) lastCellRequest.getReply();

         //Don't move if there's a friendly player on the target, but try to bump enemies
         //(bumping into players makes them fail to pick or drop)
         if (lastCellReply.hasPlayer && !lastCellReply.hasEnemy) {
            System.out.println( getAgent().name() + " WAITING FOR FRIENDLY PLAYER IN TARGET CELL!");
            eexecuteclimaaction_p.post( "skip" );
            return true;
         }
      }

      /*
      for (int p=path.size()-1; p>=0; --p) {
         GridPoint point = (GridPoint) path.get(p);
         System.out.println( "Path point " + point.x + "," + point.y );
      }*/

      System.out.println( getAgent().name() + " Moving from " + pos.x + "," + pos.y + " to " + nextPos.x + "," + nextPos.y );
      Object[] dirs = GridPoint.getRelativeDirections( pos, nextPos );
      if (dirs.length > 0)
      {
         String dir = (String) dirs[0];
         System.out.println( getAgent().name() + " Moving direction: " + dir );
         eexecuteclimaaction_p.post( dir );
      }
      else
      {
         //This really shouldn't happen
         System.out.println( getAgent().name() + " INVALID PATH NODE!!!!!");
      }
   }
}
