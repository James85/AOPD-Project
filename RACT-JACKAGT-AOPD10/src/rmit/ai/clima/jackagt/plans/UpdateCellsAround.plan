package rmit.ai.clima.jackagt.plans;
import aos.jack.jak.cursor.Cursor;
import aos.jack.util.cursor.Again;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;

import rmit.ai.clima.comms.Cell;
import rmit.ai.clima.gui.grid.*;
import rmit.ai.clima.interfaces.*;

public plan UpdateCellsAround extends Plan
{
   /******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: UpdateCellsAround
Description: Update the beliefs about the cells around a location
*/
	//Events handled by the plan are declared here.
	#handles event EUpdateBel eupdatebel_h;


	// Declarations of any beliefset/data that the plan accesses.
	#modifies data BObstacleAt bel_obstacleAt_dat;

	#modifies data BGoldAt bel_goldAt_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/

   // The enclosing agent or capability has to implement these interfaces
   #uses interface DebugInterface consoleIface;

   static boolean relevant(EUpdateBel ev)
   {
      return true;
   }

   context()
   {
      true;
   }


   #reasoning method
   body()
   {


      // Extract the data from the event eupdatebel_h
      int step = eupdatebel_h.step;
      int posX = eupdatebel_h.currentPos.x;
      int posY = eupdatebel_h.currentPos.y;
      Cell[] cells = eupdatebel_h.cells;	// the array of adjacent cells


      /* Assimilate all the information stored in cells[] wrt 
       * central location (posX,posY)
       */
      String locDir;
      boolean bFoundGold;	//	should a cell be set to have no gold?
      boolean bUnknown;
      logical int $noGold; 	//  logical int to retrieve the amount of gold this agent is carrying
      
      for(int i=0; i < cells.length; i++) 
      {	// interate on each cell

         // Calculate the exact point of cells[i]: store it in GridPoint loc
         locDir = cells[i].id;	// first, get its direction (e.g., n, nw, s, se, etc.)
         GridPoint loc = GridPoint.getFromDir(posX, posY, locDir);

         bFoundGold = false;	// Initially, assume the cell does not contain gold
         bUnknown = false;
         // Iterate on all the marks/labels for cells[i] (which is location loc)
         for(int j = 0; j < cells[i].marks.length; j++) 
         {

            // if mark is "unknown" then do not process the cell at all
            if( !(cells[i].marks[j].type.equalsIgnoreCase("unknown")) )
            {

               // First, update beliefset bel_obstacleAt
               if( cells[i].marks[j].type.equalsIgnoreCase("obstacle") ) 
               {
                  bel_obstacleAt_dat.add(loc.x, loc.y, Cursor.TRUE);
               }
               else
               {
                  //if there is no obstacle then this will always be empty
                  bel_obstacleAt_dat.add(loc.x, loc.y, Cursor.FALSE);
                  if( cells[i].marks[j].type.equalsIgnoreCase("gold"))
                  {
                     bFoundGold = true;
                     bel_goldAt_dat.add(loc.x, loc.y, Cursor.TRUE);

                  }
               }

            } 
            else 
            {
               // sensor returned "unknown" for this cell (noise in sensor)
               bUnknown = true;
            } // end if
         } // end for j 
         if(!bFoundGold && !bUnknown )
         {
            bel_goldAt_dat.add(loc.x,loc.y, Cursor.FALSE);
         }


      } // end for i 

   } // end of @body



}