package rmit.ai.clima.jackagt.plans;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;

import rmit.ai.clima.gui.grid.*;
import rmit.ai.clima.planinstanceinfo.ActType;

import rmit.ai.clima.interfaces.*;

import java.util.Random;
import aos.jack.jak.plan.PlanInstanceInfo;

public plan PickGold extends Plan
{
	/******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: PickGold
Description: Attempt to pick up a piece of gold in the current square
*/
	//Events handled by the plan are declared here.
	#posts event EExecuteCLIMAaction eexecuteclimaaction_p;

	#sends event EGUIDebugMessage eguidebugmessage_s;

	#handles event EAct eact_h;


	// Declarations of any beliefset/data that the plan accesses.
	#reads data BGoldAt bel_goldAt_dat;

	#reads data BCurrentPosition bel_currentPosition_dat;

	#reads data NumCarryingGold bel_numCarryingGold_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/
	#uses interface DebugInterface consoleIface;
	logical int $posX, $posY, $noGold;
	static boolean relevant(EAct ev)
	{


		return true;


	}

	context()
	{
		//Trigger: Event "EAct"	
		bel_numCarryingGold_dat.get( $noGold ) && $noGold.as_int() <3
		&& bel_currentPosition_dat.get( $posX, $posY ) && bel_goldAt_dat.check( $posX.as_int(), $posY.as_int() );
		//true;
	}

	body()
	{
		// The plan body. This describes the actual steps
		// an agent performs when it executes this plan.


		consoleIface.showConsoleDebug("Agent "+getAgent().name()+" tries to pick up gold");
		eexecuteclimaaction_p.post("pick");	// Post an ExecuteClimaAction event to execute the action in the server




	}
}
