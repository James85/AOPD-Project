package rmit.ai.clima.jackagt.plans;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;
import rmit.ai.clima.gui.grid.GridPoint;

public plan PDrop extends Plan
{
/******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: PDrop
*/
	//Events handled by the plan are declared here.
	#sends event MEHarassPos meharasspos_s;

	#posts event EExecuteCLIMAaction eexecuteclimaaction_p;

	#handles event EExecuteAction eexecuteaction_h;


	// Declarations of any beliefset/data that the plan accesses.
	#reads data BCurrentPosition bel_currentTarget_dat;

	#reads data SimulationProp bel_simulationProp_dat;

	#reads data BCurrentPosition bel_currentPosition_dat;

	#reads data BCurrentPath bel_currentPath_dat;

	#reads data BCurrentState bel_currentState_dat;

	#reads data BObstacleAt bel_obstacleAt_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/

   logical String $state;
   logical int $posX, $posY, $targetX, $targetY;
   static final String dirs[] = { "left", "right", "up", "down" };
   
   
   #reasoning method fail()
   {
      System.out.println("OMGZORS ===========DickZilla : PDrop");
   }
   
   context()
   {
      //Need to be in depot state and at the depot
      bel_currentState_dat.get( $state )
      && bel_currentPosition_dat.get( $posX, $posY )
      && bel_currentTarget_dat.get( $targetX, $targetY )
      && $state.as_string().equals( "depot")
      && $posX.as_int() == $targetX.as_int()
      && $posY.as_int() == $targetY.as_int();
   }

   body()
   {
      //Get grid size and depot location 
      logical int $gridW, $gridH;
      bel_simulationProp_dat.getGridSize( $gridW, $gridH );
      GridPoint pos = new GridPoint($posX.as_int(), $posY.as_int());

      //Check how many points around has obstacles
      int numObstacles = 0;
      GridPoint harassPos = pos;
      for (int i = 0; i < dirs.length; ++i)
      {
         //Check if the point is out of the grid
         GridPoint adjPos = pos.getFromDir(dirs[i]);
         if (pos.x < 1 || pos.x > $gridW.as_int() &&
             pos.y < 1 || pos.y > $gridH.as_int())
            numObstacles++;
         
         //Check if there is an obstacle at this point
         else if(bel_obstacleAt_dat.check( adjPos.x, adjPos.y))
            numObstacles++;
         
         //Assign free point as harass position
         else harassPos = adjPos;
      }

      //Send the harasser his perch if fairly clear of obstacles
      if (numObstacles <= 1)
         @send("player1", meharasspos_s.send(harassPos));
      
      System.out.println( "Dropping gold" );
      eexecuteclimaaction_p.post("drop");
   }
}
