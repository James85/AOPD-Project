package rmit.ai.clima.jackagt.plans;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;
import rmit.ai.clima.gui.grid.GridPoint;
import java.util.*;

public plan PUpdateState extends Plan
{
   /******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: PUpdateState
*/
	//Events handled by the plan are declared here.
	#sends event MEReportPlayerState mereportplayerstate_s;

	#sends event MERequestCellInfo merequestcellinfo_s;

	#sends event MERequestPathfinding merequestpathfinding_s;

	#handles event MEPlayerPerceptsAssimilated meplayerperceptsassimilated_h;


	// Declarations of any beliefset/data that the plan accesses.
	#modifies data BCurrentPosition bel_currentTarget_dat;

	#modifies data BHarass bel_harass_dat;

	#modifies data BCurrentState bel_currentState_dat;

	#reads data BCurrentPosition bel_currentPosition_dat;

	#reads data SimulationProp bel_simulationProp_dat;

	#reads data BCurrentPath bel_currentPath_dat;

	#reads data BNumCarryingGold bel_numCarryingGold_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/

   static boolean relevant(MEPlayerPerceptsAssimilated e)
   {
      return true;
   }

   context()
   {
      true;
   }

   #reasoning method fail()
   {
      System.out.println("OMGZORS ===========DickZilla : PUpdateState");
   }

   //#reasoning method
   body()
   {
      logical String $state;
      logical int $posX, $posY, $targetX, $targetY;
      logical int $numGold;
      logical int $depotX, $depotY;

      bel_currentState_dat.get( $state );
      bel_currentPosition_dat.get( $posX, $posY );
      bel_currentTarget_dat.get( $targetX, $targetY );
      bel_numCarryingGold_dat.get( $numGold );
      bel_simulationProp_dat.getDepotLoc( $depotX, $depotY );      
      
      String state = $state.as_string();
      Vector path = bel_currentPath_dat.getPath();
      boolean reachable = bel_currentPath_dat.getReachable();
      int unreachableCount = bel_currentPath_dat.getUnreachableCount();
      GridPoint pos = new GridPoint( $posX.as_int(), $posY.as_int() );
      GridPoint target = new GridPoint( $targetX.as_int(), $targetY.as_int() );
      GridPoint depotPos = new GridPoint( $depotX.as_int(), $depotY.as_int() );
      int numStepsLeft = bel_simulationProp_dat.getNumStepsLeft();
      int numGold = $numGold.as_int();
      

      System.out.println( getAgent().name() + " My initial state:'" + state +
            "' pos:" + pos.x + "," + pos.y +" target:" + target.x + "," + target.y +
            " length:" + path.size() + " reachable:" + (reachable ? "true" : "false") );

      
      //If we have a valid harass point and have some gold set our state to "harass"
      logical int $hX, $hY; logical boolean $pushed;
      if (bel_harass_dat.get($hX, $hY, $pushed) && numGold > 0)
      {
         System.out.println( "LET THE HARASSMENT BEGIN !!!!!! ====================================");
         
         //Move into harass state
         state = "harass";
         bel_currentState_dat.add( state );
         
         //Check if we are standing on the harass position
         GridPoint harassPos = new GridPoint( $hX.as_int(), $hY.as_int() );
         if(pos.equals(harassPos))
         {
            MERequestCellInfo cellInfoRequest = merequestcellinfo_s.send( depotPos );
            @send( "boss", cellInfoRequest );
            @wait_for( cellInfoRequest.replied() );
            MEReturnCellInfo cellInfoReply = (MEReturnCellInfo) cellInfoRequest.getReply(); 

            //Check if enemy in the depot and we haven't pushed last turn
            if(cellInfoReply.hasEnemy && ($pushed.as_boolean() == false))
            {
               //Set target to depot and mark we pushed this turn
               target = depotPos;
               bel_currentTarget_dat.add( target.x, target.y );
               bel_harass_dat.add( harassPos.x, harassPos.y, true );
            }
            else
            {
               //Set target to harass point and mark we haven't pushed this turn
               target = harassPos;
               bel_currentTarget_dat.add( target.x, target.y );
               bel_harass_dat.add( harassPos.x, harassPos.y, false );
            }
         }
         else
         {
            //Set target to harass point to move there
            target = harassPos;
            bel_currentTarget_dat.add( target.x, target.y );
         }
      }
      
      
      //Check if last move was successful and remove point
      if (path.size() > 0) {
         if (pos.equals( (GridPoint) path.lastElement() )) {
            path.remove( path.size()-1 );
            bel_currentPath_dat.add( path, reachable, unreachableCount );
         }
      }

      //Check if our position adjacent to next point (otherwise somethings wrong)
      if (path.size() > 0) {
         if (pos.getManhattanDist( (GridPoint) path.lastElement() ) > 1) {
            System.out.println( getAgent().name() + " Next point in path NOT ADJACENT!!!");
            state = "idle";
            bel_currentState_dat.add( state );
         }
      }
      
      //Find out how long path to the depot is at this point
      MERequestPathfinding depotPathRequest = merequestpathfinding_s.send( pos, depotPos );
      @send( "boss", depotPathRequest );
      @wait_for( depotPathRequest.replied() );
      MEReturnPathfinding depotPathReply = (MEReturnPathfinding) depotPathRequest.getReply();
      int depotPathLength = depotPathReply.path.size();
      int safeReturnBuffer = (int) Math.ceil( depotPathLength * 1.5f );
      
      //Head to depot if we have max gold or running out of steps
      if(($numGold.as_int() >= 3 && !state.equals( "harass" )) ||
         ($numGold.as_int() > 0 && numStepsLeft <= safeReturnBuffer ))
      {
         //Set target and state to depot
         target = new GridPoint( $depotX.as_int(), $depotY.as_int() );
         bel_currentTarget_dat.add( target.x, target.y );
         
         state = "depot";
         bel_currentState_dat.add( state );
         
         //Always accept path to depot, even if unreachable
         //(worthless exploring as we would be failing a lot with gold)
         path = depotPathReply.path;
         reachable = depotPathReply.reachable;
         unreachableCount = 0;
         bel_currentPath_dat.add( path, reachable, unreachableCount );
      }
      
      
      //Request fresh info about target cell from the coordinator
      MEReturnCellInfo cellInfoReply;
      if (! state.equals("idle"))
      {
         MERequestCellInfo cellInfoRequest = merequestcellinfo_s.send( target );
         @send( "boss", cellInfoRequest );
         @wait_for( cellInfoRequest.replied() );
         cellInfoReply = (MEReturnCellInfo) cellInfoRequest.getReply();
      }

      
      //Check for state changes
      if(state.equals("gold") )
      {
         //If gold removed set state to idle
         if (!cellInfoReply.hasGold) {
            state = "idle";
            bel_currentState_dat.add( state );
         }
      }
      else if(state.equals("depot") )
      {
         //If gold dropped set state to idle
         if ($numGold.as_int() == 0) {
            state = "idle";
            bel_currentState_dat.add( state );
         }
      }
      else if(state.equals("explore") )
      {
         //If target became explored set state to idle
         if (cellInfoReply.isExplored) {
            state = "idle";
            bel_currentState_dat.add( state );
         }
      }
      

      if (! state.equals("idle"))
      {
         //Request fresh info about path from the coordinator
         MERequestPathfinding findPathRequest = merequestpathfinding_s.send( pos, target );
         @send( "boss", findPathRequest );
         @wait_for( findPathRequest.replied() );
         MEReturnPathfinding findPathReply = (MEReturnPathfinding) findPathRequest.getReply();

         //Update path info with fresh data if reachable
         if (findPathReply.reachable) {
            path = findPathReply.path;
            reachable = findPathReply.reachable;
            bel_currentPath_dat.add( path, reachable, 0 );
         }else{
            
            //Increase unreachable counter
            unreachableCount++;
            bel_currentPath_dat.add( path, reachable, unreachableCount );
            
            //Check if unreachable for too long and go idle
            if (unreachableCount >= 3 && !state.equals("depot")) {
               state = "idle";
               bel_currentState_dat.add( state );
               System.out.println( getAgent().name() + " DROPPING UNREACHABLE TARGET!!!" );
            }
         }
      }

      //Send our state to coordinator
      System.out.println( getAgent().name() + "Sending state '" + state + "' to boss" );
      @send("boss", mereportplayerstate_s.send( getAgent().name(), state, target ));
   }
}
