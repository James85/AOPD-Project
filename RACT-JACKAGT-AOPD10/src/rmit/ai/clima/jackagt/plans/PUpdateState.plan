package rmit.ai.clima.jackagt.plans;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;
import rmit.ai.clima.gui.grid.GridPoint;

public plan PUpdateState extends Plan
{
/******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: PUpdateState
*/
	//Events handled by the plan are declared here.
	#sends event MERequestPathfinding merequestpathfinding_s;

	#sends event MEReportPlayerState mereportplayerstate_s;

	#sends event MERequestCellInfo merequestcellinfo_s;

	#posts event EExecuteAction eexecuteaction_p;

	#handles event MEPlayerPerceptsAssimilated meplayerperceptsassimilated_h;


	// Declarations of any beliefset/data that the plan accesses.
	#modifies data BCurrentPosition bel_currentTarget_dat;

	#modifies data BCurrentState bel_currentState_dat;

	#reads data BGoldAt bel_goldAt_dat;

	#reads data BCurrentPosition bel_currentPosition_dat;

	#reads data BCurrentPath bel_currentPath_dat;

	#reads data BNumCarryingGold bel_numCarryingGold_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/

	static boolean relevant(MEPlayerPerceptsAssimilated e)
	{
	   
	   return true;
	}
	
	context()
	{
		// Trigger: Event "MEPlayerPerceptsAssimilated"


		true;
	}

	//#reasoning method
	body()
	{
		logical String $state;
		logical int $posX, $posY, $targetX, $targetY;
		logical int $numGold;
		
		bel_currentState_dat.get( $state );
	   bel_currentPosition_dat.get( $posX, $posY );
	   bel_currentTarget_dat.get( $targetX, $targetY );
	   bel_numCarryingGold_dat.get( $numGold );
	   
      System.out.println( "My pos: " + $posX.as_int() + "," + $posY.as_int() );
	   System.out.println( "My target: " + $targetX.as_int() + "," + $targetY.as_int() );
	   //Update state
	   //TODO: need to request target cell info to check for invalid target
	   //TODO: need to request pathfinding to check reachability and update next move

		if($state.as_string().equals( "gold") )
		{
		   
		   //If we have MAX_GOLD move set our state to depot
		   if($numGold.as_int() >= 2)
		      bel_currentState_dat.add("depot");
		   else
		   {
		   //TODO: Check if gold still at target
		   //Check if target reached or there's no gold
		      if ($posX.as_int() == $targetX.as_int() && $posY.as_int() == $targetY.as_int() ||
		            ! bel_goldAt_dat.check( $posX.as_int(), $posY.as_int())) {
		         bel_currentState_dat.add("idle");
		      }
		   }
		}
		else if($state.as_string().equals("depot") )
		{
   	   //Check if target reached and we don't have gold
         if ($posX.as_int() == $targetX.as_int() && $posY.as_int() == $targetY.as_int())
         {
            if ($numGold.as_int() == 0)
               bel_currentState_dat.add( "idle" );  
         }
		}
		else if($state.as_string().equals("explore") )
		{
		   //TODO: Check if target still unexplored
		   //Check if target reached
         if ($posX.as_int() == $targetX.as_int() && $posY.as_int() == $targetY.as_int())
            bel_currentState_dat.add("idle");
		}
		
		logical String $newState;
		//Send the updated state to coordinator
		bel_currentState_dat.get( $newState );
		
		@send("boss", mereportplayerstate_s.send( getAgent().name(), $newState.as_string(), new GridPoint( $targetX.as_int(), $targetY.as_int() )));
		
		//Execute actions that don't need coordination
//      if ($state.as_string().equals("pick") ||
//          $state.as_string().equals("drop") ||
//          $state.as_string().equals("depot"))
//         @post( eexecuteaction_p.post() );
	}
}
