package rmit.ai.clima.jackagt.plans;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;
import rmit.ai.clima.gui.grid.*;
import java.util.*;
import rmit.ai.clima.jackagt.*;

public plan PFindPlayersNearestGold extends Plan
{
/******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: PFindPlayersNearestGold
*/
	//Events handled by the plan are declared here.
	#posts event EFindPath efindpath_p;

	#handles event EFindClosestGold efindclosestgold_h;


	// Declarations of any beliefset/data that the plan accesses.
	#reads data BGoldAt bel_goldAt_dat;

	#reads data BPlayerPosition bel_playerPositions_dat;

	#reads data BPlayerState bel_playerState_dat;

	#reads data BPlayer bel_players_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/

	context()
	{
		true;
	}
	
	#reasoning method fail()
   {
       System.out.println("OMGZORS ===========DickZilla : PFindPlayersNearestGold");
   }

	body()
	{
	   Vector relevantPlayers = efindclosestgold_h.relevantPlayers;
	   Vector relevantTargets = efindclosestgold_h.relevantTargets;
	   Vector targets = new Vector(); 
	   Vector usedTargets = new Vector();
	   
	   for (int p=0; p<relevantPlayers.size(); ++p)
	   {
	      String name = (String) relevantPlayers.get(p);
	      
	      //Get player position
	      logical int $playerX, $playerY;
	      bel_playerPositions_dat.getByName( name, $playerX, $playerY );
	      GridPoint playerPos = new GridPoint( $playerX.as_int(), $playerY.as_int() );

	      for (int t=0; t<relevantTargets.size(); ++t)
	      {
	         Target target = (Target) relevantTargets.get(t);
	         //if (target.type == Target.Type.EXPLORE)
	           // continue;

            //TODO: this turned out to be to slow, so we check actual distance
            //only when accepting the new path
	         
	         //Find distance from player to target, skip if unreachable
            EFindPath pathRequest = efindpath_p.post( name, playerPos.x, playerPos.y, target.pos.x, target.pos.y);
            @subtask( pathRequest);  
            if (!pathRequest.reachable) continue;
            
	         //Calculate distance and store a new player-target pair
	         PlayerTarget pt = new PlayerTarget();
	         pt.name = name;
	         pt.target = target;
	         //pt.dist = target.weight + target.pos.getManhattanDist(playerPos);
	         pt.dist = target.weight + pathRequest.path.size();
	         
	         //if (target.type == Target.Type.EXPLORE)
	         targets.add(pt);
	      }
	   }
	   
	   //Sort player-target pairs by distance
	   //(as defined in their compareTo function)
	   Collections.sort(targets);
	   
	   //Iterate all the targets
	   for ( int i = 0; i < targets.size(); ++i )
	   {
//	      PlayerTarget pt = (PlayerTarget) targets.get(i);
//       System.out.println( "Assigning target " +
//       (pt.target.type == Target.Type.GOLD ? "GOLD" : "EXPLORE") +
//       " weight " + pt.dist);
	      
	      //Compare to other targets assigned so far
	      boolean b_discard = false;
	      PlayerTarget pt = (PlayerTarget) targets.get(i);	      
         for( int j = 0 ; j < usedTargets.size() ; ++ j)
	      {
	         //Skip if either the player or the target has already been assigned
	         PlayerTarget ptUsed = (PlayerTarget) usedTargets.get(j);
	         if(pt.name.equals( ptUsed.name ) || pt.target.pos.equals( ptUsed.target.pos ))
	            b_discard = true;
	      }
	      if(b_discard)
	         continue;
	     
	      //Assign target to player
	      efindclosestgold_h.playerTargets.add( pt );
         usedTargets.add(pt);
	   }
	}
}
