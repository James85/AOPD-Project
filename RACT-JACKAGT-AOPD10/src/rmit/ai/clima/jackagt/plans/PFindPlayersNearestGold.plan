package rmit.ai.clima.jackagt.plans;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;
import rmit.ai.clima.gui.grid.*;
import java.util.*;
import rmit.ai.clima.jackagt.PlayerGold;

public plan PFindPlayersNearestGold extends Plan
{
/******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: PFindPlayersNearestGold
*/
	//Events handled by the plan are declared here.
	#posts event EFindPath efindpath_p;

	#handles event EFindClosestGold efindclosestgold_h;


	// Declarations of any beliefset/data that the plan accesses.
	#reads data BGoldAt bel_goldAt_dat;

	#reads data BPlayerState bel_playerState_dat;

	#reads data BPlayer bel_players_dat;

	#reads data BPathCache bel_moveHint_dat;

	#reads data BPlayerPosition bel_playerPositions_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/

	context()
	{
		true;
	}
	
	  #reasoning method fail()
	   {
	       System.out.println("OMGZORS ===========DickZilla : PFindPlayersNearestGold");
	   }

	body()
	{
	   Vector relevantPlayers = efindclosestgold_h.relevantPlayers;
	   Vector relevantTargets = efindclosestgold_h.relevantTargets;
	   Vector distances = new Vector(); 
	   Vector usedDistances = new Vector();
	   
	   //Calculate the distance between all players with all known gold positions
	   for (int p=0; p<relevantPlayers.size(); ++p)
	   {
	      String name = (String) relevantPlayers.get(p);
	      
	      //Get player position
	      logical int $playerX, $playerY;
	      bel_playerPositions_dat.getByName( name, $playerX, $playerY );
	      GridPoint playerPos = new GridPoint( $playerX.as_int(), $playerY.as_int() );
	      
	      //Get positions of all gold pieces
	      for (int t=0; t<relevantTargets.size(); ++t)
	      {
	    	//TODO: this turned out to be to slow, so we check actual distance
	    	//only when accepting the new path
	         GridPoint goldPos = (GridPoint) relevantTargets.get(t);
	        //Find distance from player to gold, skip if unreachable
//            EFindPath pathRequest = efindpath_p.post( name, $playerX.as_int(), $playerY.as_int(), goldPos.x, goldPos.y);
//            @subtask( pathRequest);  
//            if (!pathRequest.reachable) continue;
	         
	         
	         
            
            //Calculate distance and store a new player-gold pair
	         PlayerGold pg = new PlayerGold();
            pg.name = name;
	         pg.pos = goldPos;
	         pg.dist = goldPos.getManhattanDist(playerPos);
	         //pg.dist = pathRequest.path.size();
	         distances.add(pg);
	      }
	   }
	   

	   Collections.sort(distances);
	   
	   
	   for ( int i = 0; i < distances.size(); ++i )
	   {
	      //Compare to all the distances assigned so far
	      boolean b_discard = false;
	      PlayerGold pg = (PlayerGold)distances.get(i);
	      for( int j = 0 ; j < usedDistances.size() ; ++ j)
	      {
	         //Skip if either the player or the gold piece has already been assigned
	         PlayerGold pg2 = (PlayerGold)usedDistances.get(j);
	         if(pg.name == pg2.name || pg.pos.x == pg2.pos.x && pg.pos.y == pg2.pos.y)
	            b_discard = true;
	      }
	      if(b_discard)
	         continue;
	     
	      //Assign gold piece to player
	      usedDistances.add(pg);
	      efindclosestgold_h.playerGold.add( pg );
	      //bel_playerClosestGold_dat.add( pg.name, pg.pos.x, pg.pos.y );
	   }	   
	}
	
//	class PlayerGold implements Comparable
//	{
//	   public String name;
//	   public GridPoint pos;
//	   public int dist;
//	   
//	   public boolean equals(Object obj)
//	   {
//	      PlayerGold pg = (PlayerGold) obj;
//	      return pg.dist == this.dist;
//	   }
//	   public int compareTo(Object obj)
//	   {
//	      PlayerGold pg = (PlayerGold) obj;
//	      return ( this.dist - pg.dist );
//	   }
//	
//	}
}
