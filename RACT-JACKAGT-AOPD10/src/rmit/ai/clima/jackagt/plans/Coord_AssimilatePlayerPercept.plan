package rmit.ai.clima.jackagt.plans;
import aos.jack.jak.cursor.Cursor;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;
import rmit.ai.clima.interfaces.*;
import rmit.ai.clima.gui.grid.*;
import rmit.ai.clima.comms.Cell;
import rmit.ai.clima.jackagt.*;

public plan Coord_AssimilatePlayerPercept extends Plan
{
	/******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: Coord_AssimilatePlayerPercept
*/
	//Events handled by the plan are declared here.
	#sends event MEPlayerPerceptsAssimilated meplayerperceptsassimilated_s;

	#posts event ECoordUpdateBel ecoordupdatebel_p;

	#posts event EUpdateBel eupdatebel_p;

	#handles event MEReportPlayerPercept mereportplayerpercept_h;


	// Declarations of any beliefset/data that the plan accesses.
	#modifies data BPathCache bel_moveHint_dat;

	#modifies data BPlayerGold bel_playerGold_dat;

	#modifies data BPlayerAt bel_playerAt_dat;

	#modifies data BPlayerPerceptReceived bel_playerPerceptReceived_dat;

	#modifies data BPlayerPosition bel_playerPositions_dat;

	#reads data BPlayer bel_players_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/
	// The enclosing agent or capability has to implement these interfaces
	#uses interface DebugInterface consoleIface;
	context()
	{
		
		true;
	}
	
	#reasoning method fail()
	{
	   System.out.println("OMGZORS ===========DickZilla : AssimilatePlayerPercepts");
	}
	
	body()
	{
	   //Clear cached info when first percept received in this turn
	   if (bel_playerPerceptReceived_dat.nFacts() == 0)
	   {
	      System.out.println( "CLEARING CACHE" );
	      
         //Reset all the obstacles in the pathfinding grid so it is ready for the next turn
         PathGrid.getInstance().Reset();
         
	      //Clear the pathfinding cache
	      logical int $srcX, $srcY,  $dstX,  $dstY;
	      logical Object $path;
	      logical boolean $reachable;
	      bel_moveHint_dat.get( $srcX, $srcY, $dstX, $dstY, $path, $reachable ).removeAll();
	      
         //Clear the enemy player locations
         logical int $playerAtX, $playerAtY;
         bel_playerAt_dat.get( $playerAtX, $playerAtY ).removeAll();
	   }
      
	   // Update the information on all the cells around (as a subtask)
      @subtask( eupdatebel_p.post(mereportplayerpercept_h.step, mereportplayerpercept_h.currentPos, mereportplayerpercept_h.cells, mereportplayerpercept_h.noCarryingGold) );
	   @subtask( ecoordupdatebel_p.post( mereportplayerpercept_h.currentPos, mereportplayerpercept_h.cells ));
	   
	   //Update info about this player
		bel_playerPositions_dat.add(mereportplayerpercept_h.name, mereportplayerpercept_h.currentPos.x , mereportplayerpercept_h.currentPos.y );
		bel_playerGold_dat.add(mereportplayerpercept_h.name, mereportplayerpercept_h.noCarryingGold);
		
		//Mark that we got percept from this player
		bel_playerPerceptReceived_dat.add(mereportplayerpercept_h.name);
		if(bel_playerPerceptReceived_dat.nFacts() == bel_players_dat.nFacts())
		{
		   System.out.println( "ALL YOUR PERCEPTS ARE BELONG TO US" );
		   
		   logical String $name;
		   Cursor c_players = bel_playerPerceptReceived_dat.get($name);
		   while(c_players.next())
		   {
		      String baseName = $name.as_string();
	         baseName = baseName.substring(0,baseName.indexOf("@"));
		      @send( baseName, meplayerperceptsassimilated_s.send() );
		   }
		   
		   //Reset the sync counter
		   bel_playerPerceptReceived_dat.get($name).removeAll();
		}
	}
}
