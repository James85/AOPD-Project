package rmit.ai.clima.jackagt.plans;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.PathGrid;
import rmit.ai.clima.jackagt.data.*;

import rmit.ai.clima.interfaces.*;

public plan Coord_InitSimulation extends Plan
{
   /******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: Coord_InitSimulation
Description: Coordination plan to start a simulation
*/
	//Events handled by the plan are declared here.
	#handles event MESimStart mesimstart_h;


	// Declarations of any beliefset/data that the plan accesses.
	#modifies data BObstacleAt bel_obstacleAt_dat;

	#modifies data BPlayer bel_players_dat;

	#modifies data BPlayerPerceptReceived bel_playerPerceptReceived_dat;

	#modifies data BUnexplored bel_unexplored_dat;

	#reads data SimulationProp bel_simulationProp_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/

   // The enclosing agent or capability has to implement these interfaces
   #uses interface DebugInterface consoleIface;

   static boolean relevant(MESimStart ev)
   {
      return true;
   }

   context()
   {
      true;
   }


   #reasoning method
   body()
   {
      //Retrieve data from the event structure
      int gridX = mesimstart_h.gridSize.x;
      int gridY = mesimstart_h.gridSize.y;
      int depotX = mesimstart_h.depotPosition.x;
      int depotY = mesimstart_h.depotPosition.y;
      int numSteps = mesimstart_h.numSteps;

      //Add name to the list of all players on the team 
      bel_players_dat.add(mesimstart_h.from);
      
      //Check if simulation properties already exist and match current ones
      if (bel_simulationProp_dat.check(gridX, gridY, depotX, depotY, numSteps, numSteps)) 
      {
         //Report the simulation already initialized
         consoleIface.showConsoleDebug("Agent "+mesimstart_h.from+ " reported the start of a new simulation, but I already know about it...");
      } 
      else
      {
         //Initalize parameters for the new simulation
         bel_simulationProp_dat.add(gridX, gridY, depotX, depotY, numSteps, numSteps);
         bel_obstacleAt_dat.add(depotX, depotY, Cursor.FALSE);
         consoleIface.showConsoleDebug("Agent "+mesimstart_h.from+ " reported the start of a new simulation!");
         
         //Initialize list of unexplored cells
         for(int x=0; x < gridX; ++x)
            for(int y=0; y < gridY; ++y)
               bel_unexplored_dat.add(x,y);
         
         //Initialize pathfinding grid
         PathGrid.InitInstance( gridX, gridY );
      }
   } 
}
