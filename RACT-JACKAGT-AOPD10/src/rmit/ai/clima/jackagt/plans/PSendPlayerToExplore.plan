package rmit.ai.clima.jackagt.plans;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;

public plan PSendPlayerToExplore extends Plan
{
   /******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: PSendPlayerToExplore
*/
	//Events handled by the plan are declared here.
	#posts event MEPlayerAction meplayeraction_p;

	#posts event EIdentifyTarget eidentifytarget_p;

	#handles event EPostPlayerAction epostplayeraction_h;


	// Declarations of any beliefset/data that the plan accesses.
	#modifies data BPathCache bel_moveHint_dat;

	#modifies data BPlayerPosition bel_playerTarget_dat;

	#reads data BPlayerPosition bel_playerPositions_dat;

	#reads data BPlayerGold bel_playerGold_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/

	logical int $targetX, $targetY;
	
   context()
   {
      bel_playerTarget_dat.getByName(epostplayeraction_h.playerName, $targetX, $targetY).negate();
   }

   body()
   {
      String baseName = epostplayeraction_h.playerName;
      baseName = baseName.substring(0,baseName.indexOf("@"));
      
      //Choose a random unexplored point to move
      logical int $tX, $tY;
      @subtask(eidentifytarget_p.post( epostplayeraction_h.playerName ));
      bel_playerTarget_dat.getByName( epostplayeraction_h.playerName, $tX, $tY);
//      if (!bel_playerTarget_dat.getByName( epostplayeraction_h.playerName, $tX, $tY)) {
//         System.out.println( "FAILED TO FIND UNEXPLORED" );
//         break;
//      }

      //Check direction of new target
      logical int $x, $y;
      logical String $tMove;
      bel_playerPositions_dat.getByName( epostplayeraction_h.playerName, $x, $y );
     // if (bel_moveHint_dat.getByEndPoints($x.as_int(), $y.as_int(), $tX.as_int(), $tY.as_int(), $tMove ))
      {
         //Move towards the new target
        // @send( baseName, meplayeraction_s.send( "moveTo", $tMove.as_string() ));
      }
   }
   public PlanInstanceInfo getInstanceInfo()
   {
      return PlanInstanceInfo.def[5];
   }
}
