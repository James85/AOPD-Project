package rmit.ai.clima.jackagt.plans;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;
import rmit.ai.clima.gui.grid.GridPoint;
import java.util.*;

public plan PReceiveState extends Plan
{
/******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: PReceiveState
*/
	//Events handled by the plan are declared here.
	#posts event EExecuteAction eexecuteaction_p;

	#handles event MEReturnPlayerState mereturnplayerstate_h;


	// Declarations of any beliefset/data that the plan accesses.
	#modifies data BCurrentPath bel_currentPath_dat;

	#modifies data BCurrentState bel_currentState_dat;

	#modifies data BCurrentPosition bel_currentTarget_dat;

	#reads data BCurrentPosition bel_currentPosition_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/

	static boolean relevant (MEReturnPlayerState e)
	{
	   return true;
	}
	
	context()
	{
		true;
	}
	
	#reasoning method fail()
   {
       System.out.println("OMGZORS ===========DickZilla : PReceiveState");
   }


	body()
	{
	   System.out.println( "GOT NEW STATE");
	   String newState = mereturnplayerstate_h.state;
	   GridPoint newTarget = mereturnplayerstate_h.target;
	   Vector newPath = mereturnplayerstate_h.path;
	   boolean newReachable = mereturnplayerstate_h.reachable;
	   
	   //Get current state
      logical String $state;
      bel_currentState_dat.get( $state );
      String state = $state.as_string();
      System.out.println("Our current state is: " + state);
      
      //Get current path
      Vector path = bel_currentPath_dat.getPath();
      boolean reachable = bel_currentPath_dat.getReachable();
      
      //Check if empty state received
      if (! newState.equals(""))
      {         
         //Check if current path invalid or longer than the new path
         if (state.equals("idle") || (newPath.size() < path.size()))
         //if (state.equals("idle"))
         {
            //Update state, target and path with what we received from the coordinator
            bel_currentState_dat.add( newState );
            bel_currentTarget_dat.add( newTarget.x, newTarget.y );
            bel_currentPath_dat.add( newPath, newReachable );
            System.out.println( "ACCEPTED new state: "+ newState );
         }
      }
      
      @post( eexecuteaction_p.post() );
	}
}
