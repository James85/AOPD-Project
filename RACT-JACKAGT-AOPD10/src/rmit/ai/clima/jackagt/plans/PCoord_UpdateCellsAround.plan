package rmit.ai.clima.jackagt.plans;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;
import rmit.ai.clima.comms.Cell;
import rmit.ai.clima.gui.grid.GridPoint;

public plan PCoord_UpdateCellsAround extends Plan
{
/******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: PCoord_UpdateCellsAround
*/
	//Events handled by the plan are declared here.
	#handles event ECoordUpdateBel ecoordupdatebel_h;


	// Declarations of any beliefset/data that the plan accesses.
	#modifies data BUnexplored bel_unexplored_dat;

	#modifies data BPlayerAt bel_playerAt_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/

	context()
	{
		true;
	}

	body()
	{
      Cell[] cells = ecoordupdatebel_h.cells;
      GridPoint pos = ecoordupdatebel_h.currentPos; 
      
      //Iterate on each cell
      for(int i=0; i < cells.length; i++) 
      {
         // Calculate the exact point of cells[i]: store it in GridPoint loc
         String dir = cells[i].id;   // first, get its direction (e.g., n, nw, s, se, etc.)
         GridPoint cellPos = GridPoint.getFromDir( pos.x, pos.y, dir);

         // Iterate on all the marks/labels for cells[i] (which is location loc)
         for(int j = 0; j < cells[i].marks.length; j++) 
         {
            //Check if any player (friendly or enemy) in the cell
            if( cells[i].marks[j].type.equalsIgnoreCase("agent"))
            {
               bel_playerAt_dat.add(cellPos.x, cellPos.y);
            }
            //Check if cell has any valid info
            if( !cells[i].marks[j].type.equalsIgnoreCase("unknown") )
            {
               bel_unexplored_dat.remove( cellPos.x, cellPos.y );
            }
         }
      }
	}
}
