package rmit.ai.clima.jackagt.plans;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;
import java.util.*;
import rmit.ai.clima.gui.grid.GridPoint;
import rmit.ai.clima.jackagt.*;

public plan PCoord_IdentifyExploreTargets extends Plan
{
/******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: PCoord_IdentifyExploreTargets
*/
	//Events handled by the plan are declared here.
	#handles event EIdentifyExploreTargets eidentifyexploretargets_h;


	// Declarations of any beliefset/data that the plan accesses.
	#reads data BUnexplored bel_unexplored_dat;

	#reads data SimulationProp bel_simulationProp_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/

   #reasoning method fail()
   {
       System.out.println("OMGZORS ===========DickZilla : IdentifyExploreTargets");
   }
   
	context()
	{
		true;
	}

	body()
	{      
	   logical int $gridW, $gridH;
	   bel_simulationProp_dat.getGridSize( $gridW, $gridH );
	   
	   //Calculate number of blocks required
      int BLOCK_RES_X = 5;
      int BLOCK_RES_Y = 5;
	   int BLOCK_W = (int) Math.ceil( (float) $gridW.as_int() / BLOCK_RES_X );
	   int BLOCK_H = (int) Math.ceil( (float) $gridH.as_int() / BLOCK_RES_Y );
	   UnexploredBlock[] blocks = new UnexploredBlock[ BLOCK_RES_X * BLOCK_RES_Y ];
	   
	   //Initialize block centers
	   for (int x=0; x<BLOCK_RES_X; ++x) {
	      for (int y=0; y<BLOCK_RES_Y; ++y) {
	         
	         GridPoint center = new GridPoint(
               x * BLOCK_W + BLOCK_W / 2,
               y * BLOCK_H + BLOCK_H / 2);
	         
	         int blockI = y * BLOCK_RES_X + x;
	         blocks[ blockI ] = new UnexploredBlock( center );
	      }
	   }
	   
	   //Iterate all unexplored points
	   logical int $uX, $uY;
	   Cursor c_unexplored = bel_unexplored_dat.get( $uX, $uY );
	   while (c_unexplored.next())
	   {
	      //Find block for this unexplored point
	      GridPoint uPos = new GridPoint( $uX.as_int(), $uY.as_int() );
	      int blockX = (int) uPos.x / BLOCK_W;
	      int blockY = (int) uPos.y / BLOCK_H;
	      int blockI = blockY * BLOCK_RES_X + blockX;
	      UnexploredBlock block = blocks[ blockI ];
	      
	      //Check if closer to center than old pivot and update pivot
         int uDist = block.center.getManhattanDist( uPos );
         if (block.count == 0 || uDist < block.pivotDist)
	      {
	         block.pivot = uPos;
	         block.pivotDist = uDist;
	      }
	      
         block.count++;
	   }
	   
	   //Add blocks with unexplored points to targets
	   for (int b=0; b < BLOCK_RES_X*BLOCK_RES_Y; ++b)
	   {
//	      System.out.println( "BLOCK #" + b + " center:" + blocks[b].center.x + "," + blocks[b].center.y
//	            + " count: " + blocks[b].count + " pivot:" + blocks[b].pivot.x + "," + blocks[b].pivot.y );
	      
	      //Check if any unexplored points
	      if (blocks[b].count > 0)
	      {
	         Target target = new Target();
            target.type = Target.Type.EXPLORE;
	         target.pos = blocks[b].pivot;
	         target.weight = BLOCK_W*BLOCK_H - blocks[b].count;
	         eidentifyexploretargets_h.targets.add( target );
	      }
	   }
	}
}
